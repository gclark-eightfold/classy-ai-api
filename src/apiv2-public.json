{
  "openapi": "3.0.0",
  "info": {
    "title": "Classy API",
    "description": "<h1>Classy API</h1>\n<p>Welcome to the Classy API (2.0.0), a powerful toolset that empowers innovative and creative minds to engineer the world for good. This documentation walks through the API’s latest endpoints.</p>\n<p>Classy APIs are crafted around REST and the REST architectural style to provide developers with a stateless and language-­agnostic interface. The Classy API leverages HTTP verbs and response codes, OAuth2 authentication, and resource-­oriented URLs.</p>\n<p>Currently, the Classy API only supports JSON. All POST/PUT requests required a valid JSON object for the request body.</p>\n<h2>Errors</h2>\n<p>The Classy API leverages standard HTTP response status codes for it’s error responses. Error codes are:</p>\n<p><br /></p>\n<table border='1'>\n<tr>\n<th width='100px'>Error Code</th>\n<th>Meaning</th>\n</tr>\n<tr>\n<td>400</td>\n<td>Bad Request: The request was malformed or provided incorrect/incomplete/conflicting parameters. Check the response for more detailed messaging about why the request was incorrect. Do not repeat request.</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthorized: The API does not recognize the request as authorized. API access token may be missing or invalid.</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden: The API recognizes the authorized API user, but the API user does not have correct permissions to satisfy the request.</td>\n</tr>\n<tr>\n<td>404</td>\n<td>Not Found: The resource requested does not exist or was not found.</td>\n</tr>\n<tr>\n<td>405</td>\n<td>Method Not Allowed: Some REST endpoints only accept a subset of valid REST HTTP verbs. This error is sent when an unsupported verb is requested.</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Error: The request was valid, but something failed on the server. Additional messages may be available.</td>\n</tr>\n<tr>\n<td>503</td>\n<td>Error: The service is unavailable or the consumer’s rate limit has been exceeded. To examine rate limiting details, check HTTP headers in the response prefixed with “X-RateLimit-”</td>\n</tr>\n</table>\n<h2>Requests</h2>\n<h3>Authenticating Requests</h3>\n<p>Most API requests will need to be signed with an Access Token.</p>\n<p>Refer to the <a href=\"https://developers.classy.org/overview/authentication\" target=\"_blank\" rel=\"noopener noreferrer\">Resource Documentation</a> for the specific call you are making to see if an access token is required for your request. See <a href=\"https://developers.classy.org/tutorials/samples\" target=\"_blank\" rel=\"noopener noreferrer\">this page</a> for a demonstration of usage through a sample app. \n<h3>Filters</h3>\n<p>We can filter a collection based on a set of input parameters. To do so, we can modify the query string using the parameters listed below.</p>\n\n<table border='1'>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n\n<tr>\n<td>with</td>\n<td>string</td>\n<td>N/A</td>\n<td>This allows you to include nested related resource. For example, you could request a campaign along with the organization it belongs to and the designation it was allocated to. In this case, <code>with=organization,designation.</code></td>\n</tr>\n\n<tr>\n<td>per_page</td>\n<td>integer</td>\n<td>20</td>\n<td>No. of pages to display.</td>\n</tr>\n\n<tr>\n<td>page</td>\n<td>integer</td>\n<td>1</td>\n<td>Set the total number of resources returned per page (Maximum: 100).</td>\n</tr>\n\n<tr>\n<td>sort</td>\n<td>string</td>\n<td>Depends on endpoint</td>\n<td>\nOrder the resources depending upon their attributes. Examples:\n<ul>\n<li><strong>created_at</strong>: oldest resource will come first</li>\n<li><strong>created_at:desc</strong>: newest resource will come first</li>\n<li><strong>last_name:asc,first_name:asc</strong>: order resources by last_name in alphabetical order. If same last_name, order by first_name in alphabetical order.</li>\n</ul>\n</td>\n</tr>\n\n<tr>\n<td>fields</td>\n<td>string</td>\n<td>Depends on endpoint</td>\n<td>List of resources attributes separated with comma. Narrow the list of attributes returned for each resource.</td>\n</tr>\n\n<tr>\n<td>filter</td>\n<td>string</td>\n<td>NULL</td>\n<td>\nAllow to filter the list of resources returned. Format is: <code>{association}.{attribute1}{operand}{value}</code> where: <ul>\n<li>association is the association if this is a nested filter (optional)</li>\n<li>operand is one of the following: <code><=, >=, <>, !=, =, <, or ></code>. Operand must be url encoded. (Note: if you are filtering on a boolean value, <code>true</code> can be expressed with <code>true</code> or <code>1</code>. Additionally, false can be expressed with <code>false</code> or <code>0</code>).</li>\n<li>If filtering on an association, ensure you include the nested resource using the ‘with’ parameter. with | string | NULL | This allows you to include a nested related resource. For example, you could request a collection of campaigns along with the organization they belong to and the designation they were allocated to. In this case, <code>with=organization,designation</code>.</li>\n</ul>\n</td>\n</tr>\n</table>\n\n<p>When filtering, the operand should be one of the following:</p>\n<p><code><=, >=, <>, !=, =, <, or ></code>. Operand must be url encoded. (Note: if you are filtering on a boolean value, <code>true</code> can be expressed with <code>true</code> or <code>1</code>. Additionally, <code>false</code> can be expressed with <code>false</code> or <code>0</code>).</p>\n<p>If filtering on an association, ensure you include the nested resource using the ‘with’ parameter. This allows you to include a nested related resource. For example, you could request a collection of campaigns along with the organization they belong to and the designation they were allocated to. In this case, <code>with=organization,designation</code>.</p>\n<p>Refer to the sample documentation for the specific call you are making to see which related resource can be fetched.</p>\n\n<h3>Date and Time Filtering</h3>\n<p>Unless otherwise noted, all Datetime attributes in API responses will be returned in an ISO8601 compliant format:</p>\n<><code>YYYY-MM-DDTHH:mm:ss.sssZ</code> (e.g. <code>2024-10-05T14:48:00.000Z</code>).</p>",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.classy.org/2.0"
    }
  ],
  "paths": {
    "/apps/{client_id}": {
      "get": {
        "tags": ["API App"],
        "summary": "fetchClientProfile",
        "description": "Show the Profile for a given Client",
        "operationId": "fetchClientProfile",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "description": "The specified Client ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "aSn3uWmolgnEnasT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiApp"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/apps/{client_id}/organizations": {
      "get": {
        "tags": ["Organization"],
        "summary": "listApiAppOrganizations",
        "description": "Retrieves a list of all Organizations for specified Client",
        "operationId": "listApiAppOrganizations",
        "parameters": [
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Organization",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "branding"
              }
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "Primary identifier of Client",
            "required": true,
            "schema": {
              "type": "string",
              "example": "aSn3uWmolgnEnasT"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Organizations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Organization"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/apps/aSn3uWmolgnEnasT/organizations?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/apps/aSn3uWmolgnEnasT/organizations?page=1"
                        },
                        "path": {
                          "description": "{host}/apps/aSn3uWmolgnEnasT/organizations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/dedications/{id}": {
      "get": {
        "tags": ["Dedication"],
        "summary": "fetchBillingDedication",
        "description": "Fetch specified Billing Dedication",
        "operationId": "fetchBillingDedication",
        "parameters": [
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the FundraisingPage",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["ecard"],
                "example": "ecard"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Dedication",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 547
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dedication"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Dedication not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Dedication"],
        "summary": "updateBillingDedication",
        "description": "Update a Dedication",
        "operationId": "updateBillingDedication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Dedication",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 547
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DedicationFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dedication"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Dedication not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/matched-transactions/{id}": {
      "get": {
        "tags": ["Matched Transaction"],
        "summary": "fetchMatchedTransaction",
        "description": "Fetch specified Matched Transaction",
        "operationId": "fetchMatchedTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Matched Transaction",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 6621
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchedTransaction"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Matched Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/recurring-donation-plans/{recurring_id}/history": {
      "get": {
        "tags": ["Recurring Donation Plan History"],
        "summary": "listRecurringDonationPlanHistory",
        "description": "List the history for a Recurring Donation Plan",
        "operationId": "listRecurringDonationPlanHistory",
        "parameters": [
          {
            "name": "recurring_id",
            "in": "path",
            "description": "Primary identifier of Recurring Donation Plan",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 85456
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Recurring Donation Plan History for specific Recurring Donation Plan",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RecurringDonationPlanHistory"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/recurring-donation-plans/{recurring_id}/history?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/recurring-donation-plans/{recurring_id}/history?page=1"
                        },
                        "path": {
                          "example": "{host}/recurring-donation-plans/{recurring_id}/history"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Recurring Donation Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "tags": ["Transaction"],
        "summary": "fetchTransaction",
        "description": "Retrieves a Transaction from the ID",
        "operationId": "fetchTransaction",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Transaction",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "answers",
                  "campaign",
                  "channel_transaction",
                  "dedication",
                  "decline_reason",
                  "fundraising_page",
                  "fundraising_team",
                  "items",
                  "member",
                  "offline_payment_info",
                  "organization",
                  "receipt_serial",
                  "recurring_donation_plan",
                  "reprocess_attempt_info",
                  "reprocess_history",
                  "source_tracking_codes",
                  "supporter",
                  "order_donation_match"
                ],
                "example": "campaign"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Transaction"],
        "summary": "updateTransaction",
        "description": "Update an existing Transaction",
        "operationId": "updateTransaction",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionFillable"
                  },
                  {
                    "properties": {
                      "answers": {
                        "description": "Collection of Answers",
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Answer"
                        }
                      }
                    },
                    "type": "object"
                  },
                  {
                    "properties": {
                      "items": {
                        "description": "Collection of Transaction Items",
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TransactionItemFillable"
                        }
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/transactions/{transaction_id}/items": {
      "get": {
        "tags": ["Transaction Item"],
        "summary": "listTransactionItems",
        "description": "Fetch Transaction Items.",
        "operationId": "listTransactionItems",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Primary identifier of Transaction",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Transaction Item",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TransactionItem"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/transactions/{transaction_id}/items?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/transactions/{transaction_id}/items?page=1"
                        },
                        "path": {
                          "example": "{host}/transactions/{transaction_id}/items"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/receipts": {
      "get": {
        "tags": ["Transaction Receipt"],
        "summary": "listTransactionReceipts",
        "description": "Retrieves a list of all Transaction Receipts for a specific Transaction",
        "operationId": "listTransactionReceipts",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of results",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TransactionReceipt"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/transactions/{transaction_id}/receipts?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/transactions/{transaction_id}/receipts?page=1"
                        },
                        "path": {
                          "example": "{host}/transactions/{transaction_id}/receipts"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/appeal-set": {
      "get": {
        "tags": ["Appeal Set"],
        "summary": "fetchCampaignAppealSet",
        "description": "Retrieves an Appeal Set for the specified Campaign.",
        "operationId": "fetchCampaignAppealSet",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppealSet"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Appeal Set"],
        "summary": "createCampaignAppealSet",
        "description": "Create Appeal Set for specified Campaign",
        "operationId": "createCampaignAppealSet",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AppealSetFillable"
                  },
                  {
                    "properties": {
                      "facebook_asset_id": {
                        "description": "Primary identifier of associated Facebook Asset",
                        "type": "integer",
                        "example": 56792
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppealSet"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/appeal-set/{id}": {
      "get": {
        "tags": ["Appeal Set"],
        "summary": "fetchAppealSet",
        "description": "Retrieves an Appeal Set from the ID.",
        "operationId": "fetchAppealSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The record's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 9082
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppealSet"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Appeal Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Appeal Set"],
        "summary": "updateAppealSet",
        "description": "Update Appeal Set",
        "operationId": "updateAppealSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The record's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 9082
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AppealSetFillable"
                  },
                  {
                    "properties": {
                      "facebook_asset_id": {
                        "description": "Primary identifier of associated Facebook Asset",
                        "type": "integer",
                        "example": 56792
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppealSet"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Appeal Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/activity": {
      "get": {
        "tags": ["Activity"],
        "summary": "listCampaignActivities",
        "description": "Retrieves a list of all Activities related to the specified Campaign",
        "operationId": "listCampaignActivities",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Activities",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Activity"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/activity?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/activity?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/activity"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/channels": {
      "get": {
        "tags": ["Campaign Channel"],
        "summary": "listCampaignChannels",
        "description": "Retrieves a list of all Channels for the specified Campaign",
        "operationId": "listCampaignChannels",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Campaign Channels",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CampaignChannel"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/channels?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/campaigns/227362/channels?page=1"
                        },
                        "path": {
                          "description": "{host}/campaigns/227362/channels"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Campaign Channel"],
        "summary": "createCampaignChannel",
        "description": "Create Channel for specified Campaign",
        "operationId": "createCampaignChannel",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignChannel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignChannel"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/credential-sets": {
      "get": {
        "tags": ["Campaign Credential Set"],
        "summary": "listCampaignCredentialSets",
        "description": "Retrieves a list of all Credential Sets for the specified Campaign",
        "operationId": "listCampaignCredentialSets",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Campaign Credential Sets",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CampaignCredentialSet"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/credential-sets?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/campaigns/227362/credential-sets?page=1"
                        },
                        "path": {
                          "description": "{host}/campaigns/227362/credential-sets"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Campaign Credential Set"],
        "summary": "createCampaignCredentialSet",
        "description": "Create Credential Set for specified Campaign",
        "operationId": "createCampaignCredentialSet",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["member_id"],
                "properties": {
                  "member_id": {
                    "description": "Primary identifier of associated Member",
                    "type": "integer",
                    "example": 2012
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignCredentialSet"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/campaigns/{campaign_id}/donation-matching-plans": {
      "get": {
        "tags": ["Donation Matching Plan"],
        "summary": "listCampaignDonationMatchingPlans",
        "description": "Retrieves a list of all Donation Matching Plans for specified Campaign",
        "operationId": "listCampaignDonationMatchingPlans",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of Donation Matching Plan",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Donation Matching Plans",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DonationMatchingPlan"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/donation-matching-plans?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/campaigns/227362/donation-matching-plans?page=1"
                        },
                        "path": {
                          "description": "{host}/campaigns/227362/donation-matching-plans"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Donation Matching Plan"],
        "summary": "createDonationMatchingPlan",
        "description": "Create a Donation Matching Plan for specified Campaign",
        "operationId": "createDonationMatchingPlan",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of Donation Matching Plan",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DonationMatchingPlan"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DonationMatchingPlan"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/recurring-donation-plans": {
      "get": {
        "tags": ["Recurring Donation Plan"],
        "summary": "listCampaignRecurringDonationPlans",
        "description": "Retrieves a list of all Recurring Donation Plans for a specific Campaign",
        "operationId": "listCampaignRecurringDonationPlans",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Recurring Donation Plans",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RecurringDonationPlan"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/recurring-donation-plans?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/recurring-donation-plans?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/recurring-donation-plans"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/credit-adjustments": {
      "post": {
        "tags": ["Credit Adjustment"],
        "summary": "createCampaignCreditAdjustment",
        "description": "Create Credential Adjustment for specified Campaign",
        "operationId": "createCampaignCreditAdjustment",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditAdjustmentFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CreditAdjustment"
                    },
                    {
                      "properties": {
                        "creditable_id": {
                          "description": "Primary identifier of associated Creditable",
                          "type": "integer",
                          "example": 227362,
                          "nullable": false
                        },
                        "creditable_type": {
                          "description": "Type of associated Creditable",
                          "type": "string",
                          "enum": [
                            "campaign",
                            "fundraising_page",
                            "fundraising_team"
                          ],
                          "example": "Campaign",
                          "nullable": false
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "creditable_type and creditable_id do not correspond to a valid Creditable object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Description of detected errors in request",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "creditable_type and creditable_id do not correspond to a valid Creditable object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/domain-slugs": {
      "get": {
        "tags": ["Domain Slug"],
        "summary": "listCampaignDomainSlugs",
        "description": "Retrieves a list of all Domain Slugs for specified Campaign",
        "operationId": "listCampaignDomainSlugs",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Domain Slugs",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DomainSlug"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/domain-slugs?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/campaigns/227362/domain-slugs?page=1"
                        },
                        "path": {
                          "description": "{host}/campaigns/227362/domain-slugs"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Domain Slug"],
        "summary": "createCampaignDomainSlug",
        "description": "Create a Domain Slug for the specified Campaign",
        "operationId": "createCampaignDomainSlug",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DomainSlugFillable"
                  },
                  {
                    "properties": {
                      "domain_id": {
                        "description": "Primary identifier of associated Domain. If none provided, the default Domain will be used.",
                        "type": "integer",
                        "example": 791
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSlug"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/ecards": {
      "get": {
        "tags": ["eCard"],
        "summary": "listEcards",
        "description": "Retrieves a list of all eCards made for the specified Campaign",
        "operationId": "listEcards",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier for specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of eCards",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Ecard"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/ecards?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/campaigns/227362/ecards?page=1"
                        },
                        "path": {
                          "description": "{host}/campaigns/227362/ecards"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["eCard"],
        "summary": "createEcard",
        "description": "Create an eCard for a Campaign",
        "operationId": "createEcard",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier for specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ecard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ecard"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "eCard not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/faqs": {
      "get": {
        "tags": ["FAQ"],
        "summary": "ListCampaignFAQs",
        "description": "List all FAQs for specified campaign",
        "operationId": "ListCampaignFAQs",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of desired Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of FAQs",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FAQ"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/faqs?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/faqs?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/faqs"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["FAQ"],
        "summary": "createFAQ",
        "description": "Create a FAQ for a campaign",
        "operationId": "createFAQ",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of desired Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FAQFillable"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQ"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request made",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/feed-items": {
      "get": {
        "tags": ["Feed Item"],
        "summary": "listCampaignFeedItems",
        "description": "List all Feed Items for specified Campaign (Direct)",
        "operationId": "listCampaignFeedItems",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of desired Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of FeedItems",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/FeedItemAssociation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemComment"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemCreation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemUpdate"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemOnboarding"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/feed-items?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/feed-items?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/feed-items"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Feed Item"],
        "summary": "createCampaignFeedItem",
        "description": "Create a FeedItem (Comment) for specified Campaign",
        "operationId": "createCampaignFeedItem",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "description": "Comment for the Campaign",
                    "type": "string",
                    "example": "I just want to say that I think you all are doing a great job. Keep up the good work!"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedItemComment"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/feed-items/{scope}": {
      "get": {
        "tags": ["Feed Item"],
        "summary": "listCampaignFeedItemsScoped",
        "description": "List all Feed Items for specified Campaign (Scoped)",
        "operationId": "listCampaignFeedItemsScoped",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of desired Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "Feed Items' scope",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["direct", "all"],
              "example": "direct"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of FeedItems",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/FeedItemAssociation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemComment"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemCreation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemUpdate"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemOnboarding"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/feed-items/direct?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/feed-items/direct?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/feed-items/direct"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/fundraising-pages": {
      "get": {
        "tags": ["Fundraising Page"],
        "summary": "listCampaignFundraisingPages",
        "description": "List all Fundraising Pages for specified Campaign",
        "operationId": "listCampaignFundraisingPages",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of desired Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Page",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "commitment",
                  "cover_photo",
                  "fundraising_team",
                  "logo",
                  "member",
                  "supporter"
                ],
                "example": "fundraising_team"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Pages",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingPage"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/fundraising-pages?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/fundraising-pages?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/fundraising-pages"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/fundraising-teams": {
      "get": {
        "tags": ["Fundraising Team"],
        "summary": "listCampaignFundraisingTeams",
        "description": "Retrieves a list of all Fundraising Teams for the specified Campaign",
        "operationId": "listCampaignFundraisingTeams",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the FundraisingTeam",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "campaign",
                  "cover_photo",
                  "logo",
                  "team_lead",
                  "team_policy"
                ],
                "example": "campaign"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Teams",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingTeam"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/fundraising-teams?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/campaigns/227362/fundraising-teams?page=1"
                        },
                        "path": {
                          "description": "{host}/campaigns/227362/fundraising-teams"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Fundraising Team"],
        "summary": "createCampaignFundraisingTeam",
        "description": "Create a Fundraising Team for the specified Campaign",
        "operationId": "createCampaignFundraisingTeam",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundraisingTeamFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingTeam"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/promo-codes": {
      "get": {
        "tags": ["Promo Code"],
        "summary": "listCampaignPromoCodes",
        "description": "Retrieves a list of all Promo Codes made for the specified Campaign",
        "operationId": "listCampaignPromoCodes",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Promo Codes",
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/PromoCode"
                              },
                              {
                                "properties": {
                                  "campaign_id": {
                                    "type": "integer",
                                    "example": 227362
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/promo-codes?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/campaigns/227362/promo-codes?page=1"
                        },
                        "path": {
                          "description": "{host}/campaigns/227362/promo-codes"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Promo Code"],
        "summary": "createCampaignPromoCode",
        "description": "Create Promo Code for the specified Campaign",
        "operationId": "createCampaignPromoCode",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of specified Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoCodeFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PromoCode"
                    },
                    {
                      "properties": {
                        "campaign_id": {
                          "type": "integer",
                          "example": 227362
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/questions": {
      "get": {
        "tags": ["Question"],
        "summary": "listCampaignQuestions",
        "description": "Retrieves a list of all questions for a specific Campaign",
        "operationId": "listCampaignQuestions",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Questions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Question"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/questions?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/questions?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/questions"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Question"],
        "summary": "createCampaignQuestion",
        "description": "Create a question for a Campaign",
        "operationId": "createCampaignQuestion",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSuccess"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Trying to duplicate a question cross Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/registrations": {
      "get": {
        "tags": ["Registration"],
        "summary": "listCampaignRegistrations",
        "description": "Retrieves a list of all Registrations for a specific Campaign",
        "operationId": "listCampaignRegistrations",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Registrations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Registration"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/registrations?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/registrations?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/registrations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/roles": {
      "get": {
        "tags": ["Role"],
        "summary": "listCampaignRoles",
        "description": "Lists all the roles that are available to the Campaign.",
        "operationId": "listCampaignRoles",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Campaign Roles",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CampaignRoles"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/roles?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/roles?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/roles"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/soft-credits": {
      "get": {
        "tags": ["SoftCredit"],
        "summary": "listCampaignSoftCredits",
        "description": "List Campaign Soft Credits",
        "operationId": "listCampaignSoftCredits",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Soft Credits",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SoftCredit"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/soft-credits?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/soft-credits?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/soft-credits"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/source-tracking-codes": {
      "get": {
        "tags": ["Source Tracking Codes"],
        "summary": "listCampaignSourceTrackingCodes",
        "description": "Lists all Source Tracking Codes which are managed by the specified Campaign.",
        "operationId": "listCampaignSourceTrackingCodes",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "name": "fundraisingTeams",
            "in": "query",
            "description": "Flag to fetch source codes associated to Fundraising Teams under the Campaign.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "name": "fundraisingPages",
            "in": "query",
            "description": "Flag to fetch source codes associated to Fundraising Pages under the Campaign.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "name": "transactions",
            "in": "query",
            "description": "Flag to fetch source codes associated to Transactions under the Campaign.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Source Tracking Codes",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SourceTrackingCode"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/source-tracking-codes?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/source-tracking-codes?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/source-tracking-codes"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/staff-notification-settings": {
      "get": {
        "tags": ["Staff Notification Setting"],
        "summary": "listCampaignStaffNotificationSettings",
        "description": "Get Staff Notification Settings for given Campaign",
        "operationId": "listCampaignStaffNotificationSettings",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Staff Notification Settings",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["scope"],
                "example": "scope"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Staff Notification Settings",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CampaignStaffNotificationSetting"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/staff-notification-settings?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/staff-notification-settings?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/staff-notification-settings"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Staff Notification Setting"],
        "summary": "createCampaignStaffNotificationSetting",
        "description": "Create a Staff Notification Setting for Campaign",
        "operationId": "createCampaignStaffNotificationSetting",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignStaffNotificationSettingFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignStaffNotificationSetting"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/stories": {
      "get": {
        "tags": ["Story"],
        "summary": "listCampaignStories",
        "description": "List Campaign Stories",
        "operationId": "listCampaignStories",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of desired Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Stories",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CampaignStory"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/stories?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/stories?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/stories"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/supporters": {
      "get": {
        "tags": ["Supporter"],
        "summary": "listCampaignSupporters",
        "description": "Retrieves a list of all Supporters for a specific Campaign",
        "operationId": "listCampaignSupporters",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Supporters",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Supporter"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/supporters?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/supporters?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/supporters"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/ticket-types": {
      "get": {
        "tags": ["Ticket Type"],
        "summary": "listCampaignTicketTypes",
        "description": "Get Ticket Types for a given Campaign.",
        "operationId": "listCampaignTicketTypes",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Ticket Type",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TicketType"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/ticket-types?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/{campaign_id}/ticket-types?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/{campaign_id}/ticket-types"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Ticket Type"],
        "summary": "createTicketType",
        "description": "Create a Ticket Type for a given Campaign.",
        "operationId": "createTicketType",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Primary identifier of Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "227362"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketTypeFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketType"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/transactions": {
      "get": {
        "tags": ["Transaction"],
        "summary": "listCampaignTransactions",
        "description": "List Campaign Transactions",
        "operationId": "listCampaignTransactions",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Transaction",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "items",
                  "member",
                  "offline_payment_info",
                  "channel_transaction",
                  "dedication",
                  "reprocess_status",
                  "recurring_donation_plan",
                  "receipt_serial",
                  "supporter",
                  "order_donation_match"
                ],
                "example": "items"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Transactions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Transaction"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/transactions?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/transactions?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/transactions"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Transaction"],
        "summary": "createCampaignTransaction",
        "description": "For external requests this creates an “offline” transaction record for the specified campaign. An offline transaction represents funds collected outside of the Classy platform, but accounted for in Classy reporting, activity feeds, etc. Adding an offline transaction record does not charge any credit cards, nor credit any Classy accounts.\n\n   An array of TransactionItems must be included along with the basic Transaction information via the items attribute. Please view the Transaction Item documentation for formatting pertaining to this attribute.\n\n   NOTE: requests must include one of the following:\n   billing_first_name AND billing_last_name\n   OR member_email_address\n   OR company_name\n\n   Requests may contain all three. Please note that if an offline transaction only contains a company_name and is therefore a transaction by a company and not a person then answers will not be created for that transaction.",
        "operationId": "createCampaignTransaction",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignTransactionFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/updates": {
      "get": {
        "tags": ["Update"],
        "summary": "listCampaignUpdates",
        "description": "List Campaign Updates",
        "operationId": "listCampaignUpdates",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "ID of desired Campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Updates",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CampaignUpdate"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/updates?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/updates?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/updates"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaign-channels/{campaign_channel_id}": {
      "put": {
        "tags": ["Campaign Channel"],
        "summary": "updateCampaignChannel",
        "description": "Update campaign channel",
        "operationId": "updateCampaignChannel",
        "parameters": [
          {
            "name": "campaign_channel_id",
            "in": "path",
            "description": "The specified Campaign Channel ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 73625
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "description": "Status of Campaign Channel",
                    "type": "boolean",
                    "example": true,
                    "nullable": false
                  },
                  "metadata": {
                    "description": "Additional Campaign settings data in JSON format",
                    "properties": {
                      "employer_match_on_donation_page": {
                        "description": "Indicates whether there is an employer match on Donation Page",
                        "type": "boolean",
                        "example": true
                      },
                      "employer_match_on_thankyou_page": {
                        "description": "Indicates whether there is an employer match on thankyou page",
                        "type": "boolean",
                        "example": true
                      },
                      "employer_match_preselect": {
                        "description": "Indicates whether there is an employer match preselect",
                        "type": "boolean",
                        "example": true
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignChannel"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign Channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{id}/duplicate": {
      "post": {
        "tags": ["Campaign"],
        "summary": "duplicateCampaign",
        "description": "Create a Campaign using a source Campaign as Template",
        "operationId": "duplicateCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "duplicates": {
                    "description": "List of resources associated with the campaign that should also be duplicated",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "appeal_set",
                        "ecards",
                        "faqs",
                        "products",
                        "questions",
                        "theme",
                        "permissions"
                      ]
                    }
                  },
                  "overrides": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Campaign"
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "Primary identifier of record",
                          "type": "integer",
                          "example": 227458
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{id}": {
      "get": {
        "tags": ["Campaign"],
        "summary": "fetchCampaign",
        "description": "Retrieves Campaign by ID",
        "operationId": "fetchCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Campaign"],
        "summary": "updateCampaign",
        "description": "Updates an existing Campaign",
        "operationId": "updateCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Campaign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/custom-url/{custom_url}": {
      "get": {
        "tags": ["Campaign"],
        "summary": "checkSlugAvailable",
        "description": "Checks if Slug is already taken",
        "operationId": "checkSlugAvailable",
        "parameters": [
          {
            "name": "custom_url",
            "in": "path",
            "description": "Custom URL",
            "required": true,
            "schema": {
              "type": "string",
              "example": "https://test.org/custom"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "available": {
                      "description": "Indicates whether custom URL is available or not",
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Custom URL not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{id}/publish": {
      "post": {
        "tags": ["Campaign"],
        "summary": "publishCampaign",
        "description": "Publish a Campaign",
        "operationId": "publishCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{id}/unpublish": {
      "post": {
        "tags": ["Campaign"],
        "summary": "unpublishCampaign",
        "description": "Unpublish a Campaign",
        "operationId": "unpublishCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{id}/deactivate": {
      "post": {
        "tags": ["Campaign"],
        "summary": "deactivateCampaign",
        "description": "Deactivate a Campaign",
        "operationId": "deactivateCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Campaign is already deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaigns/{id}/reactivate": {
      "post": {
        "tags": ["Campaign"],
        "summary": "reactivateCampaign",
        "description": "Reactivate a Campaign",
        "operationId": "reactivateCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 227362
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Can only reactivate a Campaign whose status is 'deactivated'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/campaign-credential-sets/{id}": {
      "get": {
        "tags": ["Campaign Credential Set"],
        "summary": "fetchCampaignCredentialSet",
        "description": "Retrieves a Campaign Credential Set from ID",
        "operationId": "fetchCampaignCredentialSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Campaign Credential Set ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 927483
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignCredentialSet"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign Credential Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Campaign Credential Set"],
        "summary": "deleteCampaignCredentialSet",
        "description": "Delete a specified Campaign Credential Set",
        "operationId": "deleteCampaignCredentialSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign Credential Set ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign Credential Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed deleting the CampaignCredentialSet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/channel-fundraising-entities/{id}": {
      "get": {
        "tags": ["Channel Fundraising Entity"],
        "summary": "showChannelFundraisingEntity",
        "description": "Retrieves a Channel Fundraising Entity from ID",
        "operationId": "showChannelFundraisingEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Channel Fundraising Entity ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 23742
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelFundraisingEntity"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Channel Fundraising Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classy-subscription-plans/{id}/plan-features": {
      "get": {
        "tags": ["Classy Subscription Plan"],
        "summary": "getSubscriptionPlanFeatures",
        "description": "Retrieves the Subscription Plan features for a specified Plan",
        "operationId": "getSubscriptionPlanFeatures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Subscription Plan ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 103
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanFeatures"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Subscription Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": ["Comment"],
        "summary": "fetchComment",
        "description": "Retrieves a Comment from the ID",
        "operationId": "fetchComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Comment ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 47281
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Comment"],
        "summary": "updateComment",
        "description": "Update Comment",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Comment ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 47281
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Comment"],
        "summary": "deleteComment",
        "description": "Delete Comment",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 47281
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/designations/{id}": {
      "get": {
        "tags": ["Designation"],
        "summary": "fetchDesignation",
        "description": "Fetch specified Designation",
        "operationId": "fetchDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Designation",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 34672
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Designation"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Designation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Designation"],
        "summary": "updateDesignation",
        "description": "Update specified Designation",
        "operationId": "updateDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Designation",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 34672
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DesignationFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Designation"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Designation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Designation"],
        "summary": "deleteDesignation",
        "description": "Delete a specified Designation",
        "operationId": "deleteDesignation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Designation",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 34672
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Designation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/domain-slugs/{id}": {
      "get": {
        "tags": ["Domain Slug"],
        "summary": "fetchDomainSlug",
        "description": "Fetch specified Domain Slug",
        "operationId": "fetchDomainSlug",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Domain Slug",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 235
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the DomainSlug",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["domain", "fundraising_entity"],
                "example": "domain"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSlug"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Domain Slug not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Domain Slug"],
        "summary": "updateDomainSlug",
        "description": "Update specified Domain Slug",
        "operationId": "updateDomainSlug",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Domain Slug",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 235
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainSlugFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSlug"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Domain slug not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Domain Slug"],
        "summary": "deleteDomainSlug",
        "description": "Delete specified Domain Slug",
        "operationId": "deleteDomainSlug",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Domain Slug",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 235
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Domain Slug not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/domain-slugs/availability-check/{slug_value}": {
      "get": {
        "tags": ["Domain Slug"],
        "summary": "checkSlugAvailability",
        "description": "Check if a Domain Slug exists with the specified value",
        "operationId": "checkSlugAvailability",
        "parameters": [
          {
            "name": "slug_value",
            "in": "path",
            "description": "Value of the Domain Slug",
            "required": true,
            "schema": {
              "type": "string",
              "example": "15thbowlathon"
            }
          },
          {
            "name": "domain_id",
            "in": "path",
            "description": "Primary identifier of Domain to apply availability check against. If none provided, the default Domain will be used.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 791
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/donation-matching-plans/{id}": {
      "get": {
        "tags": ["Donation Matching Plan"],
        "summary": "fetchDonationMatchingPlan",
        "description": "Fetch specified Donation Matching Plan",
        "operationId": "fetchDonationMatchingPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Donation Matching Plan",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 23847
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DonationMatchingPlan"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Donation Matching Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "put": {
        "tags": ["Donation Matching Plan"],
        "summary": "updateDonationMatchingPlan",
        "description": "Update a Donation Matching Plan",
        "operationId": "updateDonationMatchingPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Donation Matching Plan",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 23847
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DonationMatchingPlan"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DonationMatchingPlan"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Donation Matching Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/double-the-donations/{id}": {
      "delete": {
        "tags": ["Double the Donation"],
        "summary": "deleteDoubleTheDonation",
        "description": "Delete Double the Donation Account",
        "operationId": "deleteDoubleTheDonation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Double The Donation",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Double The Donation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/ecards/{id}": {
      "get": {
        "tags": ["eCard"],
        "summary": "fetchEcard",
        "description": "Fetch specified eCard",
        "operationId": "fetchEcard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of eCard",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4377
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ecard"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "eCard not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["eCard"],
        "summary": "updateEcard",
        "description": "Update specified eCard",
        "operationId": "updateEcard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of eCard",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4377
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ecard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ecard"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "eCard not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["eCard"],
        "summary": "deleteEcard",
        "description": "Delete specified eCard",
        "operationId": "deleteEcard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of eCard",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4377
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "eCard not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{id}/engagement-settings": {
      "get": {
        "tags": ["Engagement Settings"],
        "summary": "fetchOrganizationEngagementSettings",
        "description": "Fetch Engagement Settings for specified Organization",
        "operationId": "fetchOrganizationEngagementSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngagementSettings"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/engagement-settings/{id}": {
      "put": {
        "tags": ["Engagement Settings"],
        "summary": "updateOrganizationEngagementSettings",
        "description": "Update Engagement Settings for Organization",
        "operationId": "updateOrganizationEngagementSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Engagement Settings",
            "required": true,
            "schema": {
              "example": "5ceeb33d6e201a648239a387"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngagementSettingsFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngagementSettings"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Engagement Settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/faqs/{id}": {
      "get": {
        "tags": ["FAQ"],
        "summary": "fetchFAQ",
        "description": "Fetch specified FAQ",
        "operationId": "fetchFAQ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of FAQ",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 321
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQ"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "FAQ not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["FAQ"],
        "summary": "deleteFAQ",
        "description": "Delete a FAQ",
        "operationId": "deleteFAQ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of FAQ",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 321
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "FAQ not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/faqs/{id}/": {
      "put": {
        "tags": ["FAQ"],
        "summary": "updateFAQ",
        "description": "Update a FAQ",
        "operationId": "updateFAQ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of FAQ",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 321
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FAQFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQ"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request made",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "FAQ not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/feed-items/{feed_item_id}/comments": {
      "get": {
        "tags": ["Comment"],
        "summary": "listFeedItemComments",
        "description": "Retrieves a paginated list of Comments for a Feed Item",
        "operationId": "listFeedItemComments",
        "parameters": [
          {
            "name": "feed_item_id",
            "in": "path",
            "description": "The specified Feed Item ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 876
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Comments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Comment"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/feed-items/876/comments?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/feed-items/876/comments?page=1"
                        },
                        "path": {
                          "example": "{host}/feed-items/876/comments"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Feed Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Comment"],
        "summary": "createFeedItemComment",
        "description": "Create comment for specified Feed Item",
        "operationId": "createFeedItemComment",
        "parameters": [
          {
            "name": "feed_item_id",
            "in": "path",
            "description": "The specified Feed Item ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 876
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Feed Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/feed-items/{feed_item_id}/likes": {
      "get": {
        "tags": ["Like"],
        "summary": "listFeedItemLikes",
        "description": "Retrieves a list of all Likes made for the specified Feed Item",
        "operationId": "listFeedItemLikes",
        "parameters": [
          {
            "name": "feed_item_id",
            "in": "path",
            "description": "Primary identifier of specified Feed Item",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 876
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Likes",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Like"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/feed-items/876/likes?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/feed-items/876/likes?page=1"
                        },
                        "path": {
                          "description": "{host}/feed-items/876/likes"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Feed Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Like"],
        "summary": "createFeedItemLike",
        "description": "Create a Like for the specified Feed Item",
        "operationId": "createFeedItemLike",
        "parameters": [
          {
            "name": "feed_item_id",
            "in": "path",
            "description": "Primary identifier of specified Feed Item",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 876
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Feed Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/feed-items/{feed_item_id}": {
      "get": {
        "tags": ["Feed Item"],
        "summary": "fetchFeedItem",
        "description": "Show requested Feed Item",
        "operationId": "fetchFeedItem",
        "parameters": [
          {
            "name": "feed_item_id",
            "in": "path",
            "description": "The specified Feed Item ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 3498578
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FeedItemAssociation"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemComment"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemCreation"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemUpdate"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemOnboarding"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Feed Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "put": {
        "tags": ["Feed Item"],
        "summary": "updateFeedItem",
        "description": "Update a Feed Item",
        "operationId": "updateFeedItem",
        "parameters": [
          {
            "name": "feed_item_id",
            "in": "path",
            "description": "The specified Feed Item ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 3498578
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "description": "Comment for the Feed Item",
                    "type": "string",
                    "example": "I just want to say that I think you all are doing a great job. Keep up the good work!"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/FeedItemAssociation"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemComment"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemCreation"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemUpdate"
                    },
                    {
                      "$ref": "#/components/schemas/FeedItemOnboarding"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Feed Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Feed Item"],
        "summary": "deleteFeedItem",
        "description": "Delete Feed Item",
        "operationId": "deleteFeedItem",
        "parameters": [
          {
            "name": "feed_item_id",
            "in": "path",
            "description": "ID of Feed Item",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "3498578"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Feed Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{fundraising_page_id}/activity": {
      "get": {
        "tags": ["Activity"],
        "summary": "listFundraisingPageActivities",
        "description": "Retrieves a list of all Activities related to the specified Fundraising Page",
        "operationId": "listFundraisingPageActivities",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Activities",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Activity"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-pages/2173528/activity?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-pages/2173528/activity?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-pages/2173528/activity"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-pages/{fundraising_page_id}/answers": {
      "get": {
        "tags": ["Answer"],
        "summary": "listFundraisingPageAnswers",
        "description": "Retrieves list of all Answers related to specified Fundraising Page",
        "operationId": "listFundraisingPageAnswers",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Answers",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Answer"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-pages/2173528/answer?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-pages/2173528/answer?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-pages/2173528/answer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Answer"],
        "summary": "createFundraisingPageAnswer",
        "description": "Create an Answer for a Fundraising Page",
        "operationId": "createFundraisingPageAnswer",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["question_id"],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AnswerFillable"
                  },
                  {
                    "properties": {
                      "question_id": {
                        "description": "Primary identifier of associated Question",
                        "type": "integer",
                        "example": 45678,
                        "nullable": false
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{page_id}/channels": {
      "post": {
        "tags": ["Channel Fundraising Entity"],
        "summary": "createChannelFundraisingEntity",
        "description": "Create Channel such as Facebook for Fundraising Page",
        "operationId": "createChannelFundraisingEntity",
        "parameters": [
          {
            "name": "page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelFundraisingEntityFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelFundraisingEntity"
                }
              }
            }
          },
          "400": {
            "description": "The requested Channel Integration is not allowed for this Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Description of detected errors in request",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "The requested channel integration is not allowed for this campaign"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{page_id}/credit-adjustments": {
      "post": {
        "tags": ["Credit Adjustment"],
        "summary": "createFundraisingPageCreditAdjustment",
        "description": "Create Credential Adjustment for specified Fundraising Page",
        "operationId": "createFundraisingPageCreditAdjustment",
        "parameters": [
          {
            "name": "page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditAdjustmentFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAdjustment"
                }
              }
            }
          },
          "400": {
            "description": "creditable_type and creditable_id do not correspond to a valid Creditable object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Description of detected errors in request",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "creditable_type and creditable_id do not correspond to a valid creditable object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{page_id}/domain-slugs": {
      "post": {
        "tags": ["Domain Slug"],
        "summary": "createFundraisingPageDomainSlug",
        "description": "Create a Domain Slug for the specified Fundraising Page",
        "operationId": "createFundraisingPageDomainSlug",
        "parameters": [
          {
            "name": "page_id",
            "in": "path",
            "description": "Primary identifier of specified Fundraising Page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainSlugFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSlugPage"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{fundraising_page_id}/feed-items": {
      "get": {
        "tags": ["Feed Item"],
        "summary": "listFundraisingPageFeedItems",
        "description": "List all Feed Items for specified Fundraising Page",
        "operationId": "listFundraisingPageFeedItems",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "ID of desired Fundraising Page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of FeedItems",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/FeedItemAssociation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemComment"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemCreation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemUpdate"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemOnboarding"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-pages/2173528/feed-items?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-pages/2173528/feed-items?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-pages/2173528/feed-items"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Feed Item"],
        "summary": "createFundraisingPageFeedItem",
        "description": "Create a FeedItem (Comment) for specified Fundraising Page",
        "operationId": "createFundraisingPageFeedItem",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "description": "Comment for the Fundraising Page",
                    "type": "string",
                    "example": "I just want to say that I think you all are doing a great job. Keep up the good work!"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedItemComment"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{fundraising_page_id}": {
      "get": {
        "tags": ["Fundraising Page"],
        "summary": "fetchFundraisingPage",
        "description": "Show the Fundraising Page specified by the fundraising_page_id",
        "operationId": "fetchFundraisingPage",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "name": "aggregates",
            "in": "query",
            "description": "Request Fundraising Page Aggregates to be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Page",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "answers",
                  "campaign",
                  "commitment",
                  "cover_photo",
                  "fundraising_team",
                  "logo",
                  "member",
                  "registration",
                  "source_tracking_codes",
                  "supporter"
                ],
                "example": "answers"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingPage"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Fundraising Page"],
        "summary": "updateFundraisingPage",
        "description": "Update Fundraising Page",
        "operationId": "updateFundraisingPage",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundraisingPageFillableUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingPage"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Fundraising Page"],
        "summary": "deleteFundraisingPage",
        "description": "Delete a Fundraising Page",
        "operationId": "deleteFundraisingPage",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingPage"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{page_id}/transfers": {
      "post": {
        "tags": ["Fundraising Page Transfer"],
        "summary": "createFundraisingPageTransfer",
        "description": "Transfer specified Fundraising Page",
        "operationId": "createFundraisingPageTransfer",
        "parameters": [
          {
            "name": "page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundraisingPageTransferFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingPageTransfer"
                }
              }
            }
          },
          "400": {
            "description": "validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Description of detected errors in request",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "A fundraising team is required for the specified campaign's fundraising pages."
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{fundraising_page_id}/overview": {
      "get": {
        "tags": ["Fundraising Page"],
        "summary": "fetchFundraisingPageOverview",
        "description": "Retrieves aggregate records for the Fundraising Page's transactions.",
        "operationId": "fetchFundraisingPageOverview",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "The specified Fundraising Page ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Interval period of Fundraising Page overview",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["daily", "weekly"],
              "example": "weekly"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The date from which aggregation results will start. This is translated into a start_time, which is the beginning of the date presented in the timezone of the page's Campaign. If the Fundraising Page's Campaign has no associated timezone, this timezone will default to UTC.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2020-02-02 12:00:45"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The date at which aggregation results will end. This is translated into a end_time, which is the end of the date presented in the timezone of the page's Campaign. If the Fundraising Page's Campaign has no associated timezone, this timezone will default to UTC.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2020-02-02 12:00:45"
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "Timezone for start_date and end_date.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "America/Los_Angeles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_time": {
                      "description": "The end time used to filter results represented in aggregation",
                      "type": "string",
                      "format": "date-time",
                      "example": "2016-02-11T08:00:00+0000"
                    },
                    "start_time": {
                      "description": "The start time used to filter results represented in aggregation",
                      "type": "string",
                      "format": "date-time",
                      "example": "2016-02-11T08:00:00+0000",
                      "nullable": true
                    },
                    "timezone": {
                      "description": "The timezone used to establish date ranges and start/end times for aggregation",
                      "type": "string",
                      "example": "America/Los_Angeles",
                      "nullable": true
                    },
                    "metrics": {
                      "description": "The metrics of Fundraising Page overview",
                      "properties": {
                        "soft_credits_amount": {
                          "description": "Amount of soft credits",
                          "type": "number",
                          "format": "double",
                          "example": 50
                        },
                        "start_date": {
                          "description": "The date from which aggregation results started.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2020-02-05T12:00:00"
                        },
                        "donations_amount": {
                          "description": "The gross amount raised from donations",
                          "type": "number",
                          "format": "double",
                          "example": 1439.2,
                          "nullable": false
                        },
                        "donors_count": {
                          "description": "The number of unique Members who transacted with the Fundraising Page",
                          "type": "integer",
                          "example": 20,
                          "nullable": false
                        },
                        "fees_amount": {
                          "description": "The total fees incurred by Fundraising Page transactions",
                          "type": "number",
                          "format": "double",
                          "example": 5.4,
                          "nullable": false
                        },
                        "gross_amount": {
                          "description": "The gross amount transacted for the Fundraising Page",
                          "type": "number",
                          "format": "double",
                          "example": 65,
                          "nullable": false
                        },
                        "net_amount": {
                          "description": "The net amount transacted for the Fundraising Page (gross_amount - fees_amount)",
                          "type": "number",
                          "format": "double",
                          "example": 59.6,
                          "nullable": false
                        },
                        "percent_to_goal": {
                          "description": "The percentage of money transacted to the goal amount. (100 * gross_amount/goal)",
                          "type": "number",
                          "format": "double",
                          "example": 1,
                          "nullable": false
                        },
                        "registrations_amount": {
                          "description": "The gross amount raised from Tickets and Registrations",
                          "type": "number",
                          "format": "double",
                          "example": 560.2,
                          "nullable": false
                        },
                        "transactions_count": {
                          "description": "The number of discrete Transactions made for the Fundraising Page",
                          "type": "integer",
                          "example": 20,
                          "nullable": false
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-pages/{fundraisingPage_id}/soft-credits": {
      "get": {
        "tags": ["SoftCredit"],
        "summary": "listFundraisingPageSoftCredits",
        "description": "List Fundraising Page Soft Credits",
        "operationId": "listFundraisingPageSoftCredits",
        "parameters": [
          {
            "name": "fundraisingPage_id",
            "in": "path",
            "description": "ID of Fundraising Page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Soft Credits",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SoftCredit"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-pages/2173528/soft-credits?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-pages/2173528/soft-credits?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-pages/2173528/soft-credits"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-pages/{fundraising_page_id}/stories": {
      "get": {
        "tags": ["Story"],
        "summary": "listFundraisingPageStories",
        "description": "List Fundraising Page Stories",
        "operationId": "listFundraisingPageStories",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "ID of desired Fundraising Page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Stories",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingPageStory"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-pages/2173528/stories?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-pages/2173528/stories?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-pages/2173528/stories"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Story"],
        "summary": "createFundraisingPageStory",
        "description": "Create Fundraising Page Story",
        "operationId": "createFundraisingPageStory",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "ID of desired Fundraising Page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "Main content of Story",
                    "type": "string",
                    "example": "The main reason that I am raising funds for this organization is to...",
                    "nullable": false
                  },
                  "status": {
                    "description": "Indication whether Post is a draft or has been published",
                    "type": "string",
                    "enum": ["draft", "published"],
                    "example": "draft"
                  },
                  "title": {
                    "description": "Title of Post",
                    "type": "string",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingPageStory"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-pages/{fundraising_page_id}/updates": {
      "get": {
        "tags": ["Update"],
        "summary": "listFundraisingPageUpdates",
        "description": "List Fundraising Page Updates",
        "operationId": "listFundraisingPageUpdates",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "ID of desired Fundraising Page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Updates",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingPageUpdate"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-pages/2173528/updates?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-pages/2173528/updates?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-pages/2173528/updates"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Update"],
        "summary": "createFundraisingPageUpdate",
        "description": "Create Fundraising Page Update",
        "operationId": "createFundraisingPageUpdate",
        "parameters": [
          {
            "name": "fundraising_page_id",
            "in": "path",
            "description": "ID of desired Fundraising Page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2173528
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "Main content of Update",
                    "type": "string",
                    "example": "The main reason that I am raising funds for this organization is to...",
                    "nullable": false
                  },
                  "status": {
                    "description": "Indication whether Post is a draft or has been published",
                    "type": "string",
                    "enum": ["draft", "published"],
                    "example": "draft"
                  },
                  "title": {
                    "description": "Title of Post",
                    "type": "string",
                    "nullable": true
                  },
                  "visibility": {
                    "description": "Visibility of Update (private Updates can only be seen by the Member associated with record)",
                    "type": "string",
                    "enum": ["private", "public"],
                    "example": "public"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingPageUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Page not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-teams/{fundraising_team_id}/activity": {
      "get": {
        "tags": ["Activity"],
        "summary": "listFundraisingTeamActivities",
        "description": "Retrieves a list of all Activities related to the specified Fundraising Team",
        "operationId": "listFundraisingTeamActivities",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "The specified Fundraising Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Activities",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Activity"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-teams/209745/activity?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-teams/209745/activity?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-teams/209745/activity"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-teams/{fundraising_team_id}/answers": {
      "get": {
        "tags": ["Answer"],
        "summary": "listFundraisingTeamAnswers",
        "description": "Retrieves list of all Answers related to specified Fundraising Team",
        "operationId": "listFundraisingTeamAnswers",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "The specified Fundraising Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Answers",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Answer"
                          }
                        },
                        "first_team_url": {
                          "example": "{host}/fundraising-teams/209745/answer?page=1"
                        },
                        "last_team_url": {
                          "example": "{host}/fundraising-teams/209745/answer?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-teams/209745/answer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Answer"],
        "summary": "createFundraisingTeamAnswer",
        "description": "Create an Answer for a Fundraising Team",
        "operationId": "createFundraisingTeamAnswer",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "The specified Fundraising Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["question_id"],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AnswerFillable"
                  },
                  {
                    "properties": {
                      "question_id": {
                        "description": "Primary identifier of associated Question",
                        "type": "integer",
                        "example": 45678,
                        "nullable": false
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-teams/{team_id}/credit-adjustments": {
      "post": {
        "tags": ["Credit Adjustment"],
        "summary": "createFundraisingTeamCreditAdjustment",
        "description": "Create Credential Adjustment for specified Fundraising Team",
        "operationId": "createFundraisingTeamCreditAdjustment",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "description": "The specified Fundraising Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditAdjustmentFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CreditAdjustment"
                    },
                    {
                      "properties": {
                        "creditable_id": {
                          "description": "Primary identifier of associated Creditable",
                          "type": "integer",
                          "example": 209745,
                          "nullable": false
                        },
                        "creditable_type": {
                          "description": "Type of associated Creditable",
                          "type": "string",
                          "enum": [
                            "campaign",
                            "fundraising_page",
                            "fundraising_team"
                          ],
                          "example": "fundraising_team",
                          "nullable": false
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "creditable_type and creditable_id do not correspond to a valid Creditable object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Description of detected errors in request",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "creditable_type and creditable_id do not correspond to a valid creditable object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-teams/{team_id}/domain-slugs": {
      "get": {
        "tags": ["Domain Slug"],
        "summary": "listFundraisingTeamDomainSlugs",
        "description": "Retrieves a list of all Domain Slugs for specified Fundraising Team",
        "operationId": "listFundraisingTeamDomainSlugs",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "description": "Primary identifier of specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Domain Slugs",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DomainSlugTeam"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-teams/209745/domain-slugs?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/fundraising-teams/209745/domain-slugs?page=1"
                        },
                        "path": {
                          "description": "{host}/fundraising-teams/209745/domain-slugs"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Domain Slug"],
        "summary": "createFundraisingTeamDomainSlugs",
        "description": "Create a Domain Slug for the specified Fundraising Team",
        "operationId": "createFundraisingTeamDomainSlugs",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "description": "Primary identifier of specified Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainSlugFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSlugTeam"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-teams/{fundraising_team_id}/feed-items": {
      "get": {
        "tags": ["Feed Item"],
        "summary": "listFundraisingTeamFeedItems",
        "description": "List all Feed Items for specified Fundraising Team",
        "operationId": "listFundraisingTeamFeedItems",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "ID of desired Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of FeedItems",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/FeedItemAssociation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemComment"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemCreation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemUpdate"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemOnboarding"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-teams/209745/feed-items?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-teams/209745/feed-items?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-teams/209745/feed-items"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Feed Item"],
        "summary": "createFundraisingTeamFeedItem",
        "description": "Create a FeedItem (Comment) for specified Fundraising Team",
        "operationId": "createFundraisingTeamFeedItem",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "The specified Fundraising Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "description": "Comment for the Fundraising Team",
                    "type": "string",
                    "example": "I just want to say that I think you all are doing a great job. Keep up the good work!"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedItemComment"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-teams/{fundraising_team_id}/fundraising-pages": {
      "get": {
        "tags": ["Fundraising Page"],
        "summary": "listFundraisingTeamFundraisingPages",
        "description": "List all Fundraising Pages for specified Fundraising Team",
        "operationId": "listFundraisingTeamFundraisingPages",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "ID of desired Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Page",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "cover_photo",
                  "fundraising_team",
                  "logo",
                  "member",
                  "supporter"
                ],
                "example": "fundraising_team"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Pages",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingPage"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-teams/209745/fundraising-pages?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-teams/209745/fundraising-pages?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-teams/209745/fundraising-pages"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-teams/{id}": {
      "get": {
        "tags": ["Fundraising Team"],
        "summary": "fetchFundraisingTeam",
        "description": "Retrieves a specified Fundraising Team",
        "operationId": "fetchFundraisingTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of specified Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "name": "aggregates",
            "in": "query",
            "description": "Request FundraisingTeam Aggregates to be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the FundraisingTeam",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "campaign",
                  "cover_photo",
                  "logo",
                  "team_lead",
                  "team_policy"
                ],
                "example": "campaign"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingTeam"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Fundraising Team"],
        "summary": "updateFundraisingTeam",
        "description": "Update a Fundraising Team",
        "operationId": "updateFundraisingTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundraisingTeamFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingTeam"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Fundraising Team"],
        "summary": "deleteFundraisingTeam",
        "description": "Delete a Fundraising Team",
        "operationId": "deleteFundraisingTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-teams/{id}/subteams": {
      "get": {
        "tags": ["Fundraising Team"],
        "summary": "listSubteams",
        "description": "Retrieves a list of all SubTeams for specified Fundraising Teams",
        "operationId": "listSubteams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Teams",
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/FundraisingTeam"
                              },
                              {
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "example": 542
                                  },
                                  "parent_id": {
                                    "type": "integer",
                                    "example": 209745
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-teams/209745/subteams?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/fundraising-teams/209745/subteams?page=1"
                        },
                        "path": {
                          "description": "{host}/fundraising-teams/209745/subteams"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-teams/{fundraising_team_id}/overview": {
      "get": {
        "tags": ["Fundraising Team"],
        "summary": "fetchFundraisingTeamOverview",
        "description": "Retrieves aggregate records for the Fundraising Page's transactions.",
        "operationId": "fetchFundraisingTeamOverview",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "The specified Fundraising Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Interval period of Fundraising Page overview",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["daily", "weekly"],
              "example": "weekly"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The date from which aggregation results will start. This is translated into a start_time, which is the beginning of the date presented in the timezone of the team's Campaign. If the Fundraising Team's Campaign has no associated timezone, this timezone will default to UTC.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2020-02-02 12:00:45"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The date at which aggregation results will end. This is translated into a end_time, which is the end of the date presented in the timezone of the team's Campaign. If the Fundraising Team's Campaign has no associated timezone, this timezone will default to UTC.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2020-02-02 12:00:45"
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "Timezone for start_date and end_date.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "America/Los_Angeles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_time": {
                      "description": "The end time used to filter results represented in aggregation",
                      "type": "string",
                      "format": "date-time",
                      "example": "2016-02-11T08:00:00+0000"
                    },
                    "start_time": {
                      "description": "The start time used to filter results represented in aggregation",
                      "type": "string",
                      "format": "date-time",
                      "example": "2016-02-11T08:00:00+0000",
                      "nullable": true
                    },
                    "timezone": {
                      "description": "The timezone used to establish date ranges and start/end times for aggregation",
                      "type": "string",
                      "example": "America/Los_Angeles",
                      "nullable": true
                    },
                    "metrics": {
                      "description": "The metrics of Fundraising Team overview",
                      "properties": {
                        "soft_credits_amount": {
                          "description": "Amount of soft credits",
                          "type": "number",
                          "format": "double",
                          "example": 50
                        },
                        "start_date": {
                          "description": "The date from which aggregation results started.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2020-02-02 12:00:45"
                        },
                        "donations_amount": {
                          "description": "The gross amount raised from donations",
                          "type": "number",
                          "format": "double",
                          "example": 1439.2,
                          "nullable": false
                        },
                        "donors_count": {
                          "description": "The number of unique Members who transacted with the Fundraising Team",
                          "type": "integer",
                          "example": 20,
                          "nullable": false
                        },
                        "fees_amount": {
                          "description": "The total fees incurred by Fundraising Team Transactions",
                          "type": "number",
                          "format": "double",
                          "example": 5.4,
                          "nullable": false
                        },
                        "gross_amount": {
                          "description": "The gross amount transacted for the Fundraising Team",
                          "type": "number",
                          "format": "double",
                          "example": 65,
                          "nullable": false
                        },
                        "net_amount": {
                          "description": "The net amount transacted for the fundraising Team (gross_amount - fees_amount)",
                          "type": "number",
                          "format": "double",
                          "example": 59.6,
                          "nullable": false
                        },
                        "percent_to_goal": {
                          "description": "The percentage of money transacted to the goal amount. (100 * gross_amount/goal)",
                          "type": "number",
                          "format": "double",
                          "example": 1,
                          "nullable": false
                        },
                        "registrations_amount": {
                          "description": "The gross amount raised from Tickets and Registrations",
                          "type": "number",
                          "format": "double",
                          "example": 560.2,
                          "nullable": false
                        },
                        "transactions_count": {
                          "description": "The number of discrete Transactions made for the Fundraising Team",
                          "type": "integer",
                          "example": 20,
                          "nullable": false
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-teams/{fundraisingTeam_id}/soft-credits": {
      "get": {
        "tags": ["SoftCredit"],
        "summary": "listFundraisingTeamSoftCredits",
        "description": "List Fundraising Team Soft Credits",
        "operationId": "listFundraisingTeamSoftCredits",
        "parameters": [
          {
            "name": "fundraisingTeam_id",
            "in": "path",
            "description": "ID of Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Soft Credits",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SoftCredit"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/fundraising-teams/209745/soft-credits?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/fundraising-teams/209745/soft-credits?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-teams/209745/soft-credits"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fundraising-teams/{fundraising_team_id}/stories": {
      "get": {
        "tags": ["Story"],
        "summary": "listFundraisingTeamStories",
        "description": "List Fundraising Team Stories",
        "operationId": "listFundraisingTeamStories",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "ID of desired Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Stories",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingTeamStory"
                          }
                        },
                        "first_team_url": {
                          "example": "{host}/fundraising-teams/209745/stories?page=1"
                        },
                        "last_team_url": {
                          "example": "{host}/fundraising-teams/209745/stories?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-teams/209745/stories"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Story"],
        "summary": "createFundraisingTeamStory",
        "description": "Create Fundraising Team Story",
        "operationId": "createFundraisingTeamStory",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "ID of desired Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "Main content of Story",
                    "type": "string",
                    "example": "The main reason that I am raising funds for this organization is to...",
                    "nullable": false
                  },
                  "status": {
                    "description": "Indication whether post is a draft or has been published",
                    "type": "string",
                    "enum": ["draft", "published"],
                    "example": "draft"
                  },
                  "title": {
                    "description": "Title of Post",
                    "type": "string",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingTeamStory"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-teams/{fundraising_team_id}/transfers": {
      "post": {
        "tags": ["Fundraising Team Transfer"],
        "summary": "transferFundraisingTeam",
        "description": "Transfer a Fundraising Team within its Campaign/subteam infrastructure.",
        "operationId": "transferFundraisingTeam",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "The specified Fundraising Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "new_parent_id": {
                    "description": "The ID of the new parent. This must reference a Fundraising Team associated with the Campaign of the Fundraising Team being moved or the Fundraising Team's Campaign itself.",
                    "type": "integer",
                    "example": 227362,
                    "nullable": false
                  },
                  "new_parent_type": {
                    "description": "They type of the new parent. This can either be `fundraising_team` or `campaign`",
                    "type": "string",
                    "enum": ["fundraising_team", "campaign"],
                    "example": "campaign",
                    "nullable": false
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Campaign"
                    },
                    {
                      "$ref": "#/components/schemas/FundraisingTeam"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Description of detected errors in request",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Unable to transfer fundraising team"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-teams/{fundraising_team_id}/updates": {
      "get": {
        "tags": ["Update"],
        "summary": "listFundraisingTeamUpdates",
        "description": "List Fundraising Team Updates",
        "operationId": "listFundraisingTeamUpdates",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "ID of desired Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Updates",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingTeamUpdate"
                          }
                        },
                        "first_team_url": {
                          "example": "{host}/fundraising-teams/209745/updates?page=1"
                        },
                        "last_team_url": {
                          "example": "{host}/fundraising-teams/209745/updates?page=1"
                        },
                        "path": {
                          "example": "{host}/fundraising-teams/209745/updates"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Update"],
        "summary": "createFundraisingTeamUpdate",
        "description": "Create Fundraising Team Update",
        "operationId": "createFundraisingTeamUpdate",
        "parameters": [
          {
            "name": "fundraising_team_id",
            "in": "path",
            "description": "ID of desired Fundraising Team",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 209745
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "Main content of Update",
                    "type": "string",
                    "example": "The main reason that I am raising funds for this organization is to...",
                    "nullable": false
                  },
                  "status": {
                    "description": "Indication whether post is a draft or has been published",
                    "type": "string",
                    "enum": ["draft", "published"],
                    "example": "draft"
                  },
                  "title": {
                    "description": "Title of Post",
                    "type": "string",
                    "nullable": true
                  },
                  "visibility": {
                    "description": "Visibility of Update (private Updates can only be seen by the Member associated\n    with record)",
                    "type": "string",
                    "enum": ["private", "public"],
                    "example": "public"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingTeamUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/fundraising-team-policies/{id}": {
      "get": {
        "tags": ["Fundraising Team Policy"],
        "summary": "fetchFundraisingTeamPolicy",
        "description": "Fetch specified Fundraising Team Policy",
        "operationId": "fetchFundraisingTeamPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Fundraising Team Policy",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2354
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingTeamPolicy"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Fundraising Team Policy"],
        "summary": "updateFundraisingTeamPolicy",
        "description": "Update specified Fundraising Team Policy",
        "operationId": "updateFundraisingTeamPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Fundraising Team Policy",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2354
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundraisingTeamPolicyFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundraisingTeamPolicy"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Fundraising Team Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/likes/{id}": {
      "delete": {
        "tags": ["Like"],
        "summary": "deleteLike",
        "description": "Delete a Like",
        "operationId": "deleteLike",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Like",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 3397
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Like not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/members/{id}/organizations": {
      "get": {
        "tags": ["Member"],
        "summary": "listMemberOrganizations",
        "description": "Fetches a collection of Organizations to which this Member has administration access",
        "operationId": "listMemberOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Member",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2012
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Organizations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Organization"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/members/82364/organizations?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/members/82364/organizations?page=1"
                        },
                        "path": {
                          "example": "{host}/members/82364/organizations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/{id}/campaigns": {
      "get": {
        "tags": ["Member"],
        "summary": "listMemberCampaigns",
        "description": "Fetches a collection of Campaigns to which this Member has administration access",
        "operationId": "listMemberCampaigns",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Member",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2012
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Organizations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Campaign"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/members/82364/campaigns?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/members/82364/campaigns?page=1"
                        },
                        "path": {
                          "example": "{host}/members/82364/campaigns"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/{member_id}/fundraising-pages": {
      "get": {
        "tags": ["Fundraising Page"],
        "summary": "listMemberFundraisingPages",
        "description": "List all Fundraising Pages for specified Member",
        "operationId": "listMemberFundraisingPages",
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "description": "ID of desired Member",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2012
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Page",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "cover_photo",
                  "fundraising_team",
                  "logo",
                  "member",
                  "supporter"
                ],
                "example": "fundraising_team"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Pages",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingPage"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/fundraising-pages?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/fundraising-pages?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/fundraising-pages"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/{member_id}/fundraising-teams": {
      "get": {
        "tags": ["Fundraising Team"],
        "summary": "listMemberFundraisingTeams",
        "description": "Retrieves a list of all Fundraising Teams for the specified Member",
        "operationId": "listMemberFundraisingTeams",
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "description": "Primary identifier of specified Member",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2012
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Team",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "campaign",
                  "cover_photo",
                  "logo",
                  "team_lead",
                  "team_policy"
                ],
                "example": "campaign"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Teams",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingTeam"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/members/2012/fundraising-teams?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/members/2012/fundraising-teams?page=1"
                        },
                        "path": {
                          "description": "{host}/members/2012/fundraising-teams"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/{member_id}/leading-fundraising-teams": {
      "get": {
        "tags": ["Fundraising Team"],
        "summary": "listMemberLeadingFundraisingTeams",
        "description": "Retrieves a list of all Fundraising Teams for which the specified Member is the team lead",
        "operationId": "listMemberLeadingFundraisingTeams",
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "description": "Primary identifier of specified Member",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2012
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Team",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "campaign",
                  "cover_photo",
                  "logo",
                  "team_lead",
                  "team_policy"
                ],
                "example": "campaign"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Teams",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingTeam"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/members/2012/fundraising-teams?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/members/2012/fundraising-teams?page=1"
                        },
                        "path": {
                          "description": "{host}/members/2012/fundraising-teams"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/{member_id}/recurring-donation-plans": {
      "get": {
        "tags": ["Recurring Donation Plan"],
        "summary": "listMemberRecurringDonationPlans",
        "description": "Retrieves a list of all Recurring Donation Plans for a specific Member",
        "operationId": "listMemberRecurringDonationPlans",
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "description": "The specified Member ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2012
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Recurring Donation Plans",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RecurringDonationPlan"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/members/{member_id}/recurring-donation-plans?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/members/{member_id}/recurring-donation-plans?page=1"
                        },
                        "path": {
                          "example": "{host}/members/{member_id}/recurring-donation-plans"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/members/{member_id}/roles": {
      "get": {
        "tags": ["Role"],
        "summary": "listMemberRoles",
        "description": "Lists all the roles that are available to the Member.",
        "operationId": "listMemberRoles",
        "parameters": [
          {
            "name": "member_id",
            "in": "path",
            "description": "The specified Member ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2012
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Member Roles",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "Organization Admin"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/members/{member_id}/roles?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/members/{member_id}/roles?page=1"
                        },
                        "path": {
                          "example": "{host}/members/{member_id}/roles"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": ["Member"],
        "summary": "fetchMemberMe",
        "description": "return information about Member",
        "operationId": "fetchMemberMe",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request made",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/userinfo": {
      "get": {
        "tags": ["Member"],
        "summary": "fetchMemberUserInfo",
        "description": "return information about Member compatible with openid",
        "operationId": "fetchMemberUserInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "sub": {
                      "description": "Member ID",
                      "type": "integer",
                      "example": 2012
                    },
                    "name": {
                      "description": "Full name",
                      "type": "string",
                      "example": "Buster McTest"
                    },
                    "given_name": {
                      "description": "First name",
                      "type": "string",
                      "example": "Buster"
                    },
                    "family_name": {
                      "description": "Last Name",
                      "type": "string",
                      "example": "McTest"
                    },
                    "email": {
                      "description": "Email",
                      "type": "string",
                      "example": "user@example.com"
                    },
                    "picture": {
                      "description": "Profile picture",
                      "type": "string",
                      "example": ""
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Member not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/activity": {
      "get": {
        "tags": ["Activity"],
        "summary": "listOrganizationActivities",
        "description": "Retrieves a list of all Activities related to the specified Organization",
        "operationId": "listOrganizationActivities",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Activities",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Activity"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/activity?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/82364/activity?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/82364/activity"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/answers": {
      "get": {
        "tags": ["Answer"],
        "summary": "listOrganizationAnswers",
        "description": "Retrieves list of all Answers related to specified Organization",
        "operationId": "listOrganizationAnswers",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Answers",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Answer"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organization/82364/answer?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organization/82364/answer?page=1"
                        },
                        "path": {
                          "example": "{host}/organization/82364/answer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/campaigns": {
      "get": {
        "tags": ["Campaign"],
        "summary": "listOrganizationCampaigns",
        "description": "Retrieves a list of all Campaigns for a specific Organization",
        "operationId": "listOrganizationCampaigns",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Campaigns",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Campaign"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{org_id}/campaigns?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{org_id}/campaigns?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{org_id}/campaigns"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/dedications": {
      "get": {
        "tags": ["Dedication"],
        "summary": "listOrganizationDedications",
        "description": "List Organization Dedications",
        "operationId": "listOrganizationDedications",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary identifier of associated Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Dedications",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Dedication"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/dedications?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/82364/dedications?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/82364/dedications"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/designations": {
      "get": {
        "tags": ["Designation"],
        "summary": "listOrganizationDesignations",
        "description": "Retrieves a list of all Designations related to the specified Organization",
        "operationId": "listOrganizationDesignations",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Designations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Designation"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/designations?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/82364/designations?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/82364/designations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Designation"],
        "summary": "createOrganizationDesignation",
        "description": "Create Designation for specified Organization",
        "operationId": "createOrganizationDesignation",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DesignationFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Designation"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/domain-slugs": {
      "get": {
        "tags": ["Domain Slug"],
        "summary": "listOrganizationDomainSlugs",
        "description": "Retrieves a list of all Domain Slugs for specified Organization",
        "operationId": "listOrganizationDomainSlugs",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Domain Slugs",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DomainSlugOrganization"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/domain-slugs?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/organizations/82364/domain-slugs?page=1"
                        },
                        "path": {
                          "description": "{host}/organizations/82364/domain-slugs"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Domain Slug"],
        "summary": "createOrganizationDomainSlugs",
        "description": "Create a Domain Slug for the specified Organization",
        "operationId": "createOrganizationDomainSlugs",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainSlugFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainSlugOrganization"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/double-the-donation": {
      "get": {
        "tags": ["Double the Donation"],
        "summary": "fetchOrganizationDoubleTheDonation",
        "description": "Retrieves a Double The Donation Account for a specific Organization",
        "operationId": "fetchOrganizationDoubleTheDonation",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoubleTheDonationAccount"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Double the Donation"],
        "summary": "createOrganizationDoubleTheDonation",
        "description": "Create Organization Double The Donation Account",
        "operationId": "createOrganizationDoubleTheDonation",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of desired Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoubleTheDonationAccountFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoubleTheDonationAccount"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/feed-items": {
      "get": {
        "tags": ["Feed Item"],
        "summary": "listOrganizationFeedItems",
        "description": "List all Feed Items for specified Organization (Direct)",
        "operationId": "listOrganizationFeedItems",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of desired Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of FeedItems",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/FeedItemAssociation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemComment"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemCreation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemUpdate"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemOnboarding"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/feed-items?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/82364/feed-items?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/82364/feed-items"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Feed Item"],
        "summary": "createOrganizationFeedItem",
        "description": "Create a FeedItem (Comment) for specified Organization",
        "operationId": "createOrganizationFeedItem",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "description": "Comment for the Organization",
                    "type": "string",
                    "example": "I just want to say that I think you all are doing a great job. Keep up the good work!"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedItemComment"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/feed-items/{scope}": {
      "get": {
        "tags": ["Feed Item"],
        "summary": "listOrganizationFeedItemsScoped",
        "description": "List all Feed Items for specified Organization (Scoped)",
        "operationId": "listOrganizationFeedItemsScoped",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of desired Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "Feed Items' scope",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["direct", "all"],
              "example": "direct"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of FeedItems",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/FeedItemAssociation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemComment"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemCreation"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemUpdate"
                              },
                              {
                                "$ref": "#/components/schemas/FeedItemOnboarding"
                              }
                            ]
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/feed-items/direct?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/82364/feed-items/direct?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/82364/feed-items/direct"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/fundraising-pages": {
      "get": {
        "tags": ["Fundraising Page"],
        "summary": "listOrganizationFundraisingPages",
        "description": "List all Fundraising Pages for specified Organization",
        "operationId": "listOrganizationFundraisingPages",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of desired Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Page",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "cover_photo",
                  "fundraising_team",
                  "logo",
                  "member",
                  "supporter"
                ],
                "example": "fundraising_team"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Pages",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingPage"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/campaigns/227362/fundraising-pages?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/campaigns/227362/fundraising-pages?page=1"
                        },
                        "path": {
                          "example": "{host}/campaigns/227362/fundraising-pages"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organiztion not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/fundraising-teams": {
      "get": {
        "tags": ["Fundraising Team"],
        "summary": "listOrganizationFundraisingTeams",
        "description": "Retrieves a list of all Fundraising Teams for the specified Organization",
        "operationId": "listOrganizationFundraisingTeams",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Fundraising Team",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "campaign",
                  "cover_photo",
                  "logo",
                  "team_lead",
                  "team_policy"
                ],
                "example": "campaign"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Teams",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingTeam"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/fundraising-teams?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/organizations/82364/fundraising-teams?page=1"
                        },
                        "path": {
                          "description": "{host}/organizations/82364/fundraising-teams"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/fundraising-team-policies": {
      "get": {
        "tags": ["Fundraising Team Policy"],
        "summary": "listOrganizationFundraisingTeamPolicies",
        "description": "Retrieves a list of all Fundraising Team Policies for the specified Orgnaization",
        "operationId": "listOrganizationFundraisingTeamPolicies",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary identifier for specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Fundraising Team Policies",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FundraisingTeamPolicy"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/fundraising-team-policies?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/organizations/82364/fundraising-team-policies?page=1"
                        },
                        "path": {
                          "description": "{host}/organizations/82364/fundraising-team-policies"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/branding": {
      "put": {
        "tags": ["Branding"],
        "summary": "updateOrganizationBranding",
        "description": "Create/Update Organization Branding",
        "operationId": "updateOrganizationBranding",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrandingFillable"
                  },
                  {
                    "$ref": "#/components/schemas/OrganizationBrandingFillable"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Branding"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationBranding"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{org_id}/channels": {
      "get": {
        "tags": ["Organization Channel"],
        "summary": "listOrganizationChannel",
        "description": "Retrieves a list of all Channels for the specified Organization",
        "operationId": "listOrganizationChannel",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Channels",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrganizationChannel"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/channels?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/organizations/82364/channels?page=1"
                        },
                        "path": {
                          "description": "{host}/organizations/82364/channels"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/credential-sets": {
      "get": {
        "tags": ["Organization Credential Set"],
        "summary": "listOrganizationCredentialSets",
        "description": "Retrieves a list of all Credential Sets for the specified Organization",
        "operationId": "listOrganizationCredentialSets",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary identifier of specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Organization Credential Sets",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrganizationCredentialSet"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/credential-sets?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/organizations/82364/credential-sets?page=1"
                        },
                        "path": {
                          "description": "{host}/organizations/82364/credential-sets"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Organization Credential Set"],
        "summary": "createOrganizationCredentialSet",
        "description": "Create a Credential Set for specified Organization",
        "operationId": "createOrganizationCredentialSet",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary identifier for Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCredentialSetFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCredentialSet"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{org_id}/notifications": {
      "get": {
        "tags": ["Organization Notification"],
        "summary": "listOrganizationNotifications",
        "description": "Retrieves a list of all Nofications made for the specified Organization",
        "operationId": "listOrganizationNotifications",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary Identifier of specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Notifications",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrganizationNotification"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/notifications?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/organizations/82364/notifications?page=1"
                        },
                        "path": {
                          "description": "{host}/organizations/82364/notifications"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Organization Notification"],
        "summary": "createOrganizationNotification",
        "description": "Create a Nofication for the specified Organization",
        "operationId": "createOrganizationNotification",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "Primary Identifier of specified Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationNotificationFillable"
                  },
                  {
                    "properties": {
                      "email_address": {
                        "description": "Email address who will receive the updates",
                        "type": "string",
                        "example": "test@classy.org"
                      },
                      "type": {
                        "description": "Type of notifications to be received",
                        "type": "string",
                        "enum": [
                          "transaction",
                          "third_party",
                          "recurring",
                          "fundraising",
                          "chargeback",
                          "payout_report"
                        ],
                        "example": "transaction"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationNotification"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{org_id}/payouts/{type}": {
      "get": {
        "tags": ["Payouts"],
        "summary": "fetchPaypalStripePayouts",
        "description": "Fetch all payouts for a specific Organization on a given payout date",
        "operationId": "fetchPaypalStripePayouts",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "The specified Organization ID of classy",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "payout_type",
            "in": "path",
            "description": "The type of payout which can be either paypal or stripe",
            "required": true,
            "schema": {
              "type": "string",
              "example": "paypal"
            }
          },
          {
            "name": "payout_date",
            "in": "query",
            "description": "The records of the specified date for payouts",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2023-06-12"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of pages required in output of payouts",
            "required": false,
            "schema": {
              "type": "int",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PayoutPaginatedResponse"
                    },
                    {
                      "$ref": "#/components/schemas/Payout"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/questions": {
      "get": {
        "tags": ["Question"],
        "summary": "listOrganizationQuestions",
        "description": "Retrieves a list of all questions for a specific Organization",
        "operationId": "listOrganizationQuestions",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82634
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Questions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Question"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{org_id}/questions?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{org_id}/questions?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{org_id}/questions"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/recurring-donation-plans": {
      "get": {
        "tags": ["Recurring Donation Plan"],
        "summary": "listOrganizationRecurringDonationPlans",
        "description": "Retrieves a list of all Recurring Donation Plans for a specific Organization",
        "operationId": "listOrganizationRecurringDonationPlans",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Recurring Donation Plans",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RecurringDonationPlan"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/recurring-donation-plans?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organization_id}/recurring-donation-plans?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organization_id}/recurring-donation-plans"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/recurring-donation-history": {
      "get": {
        "tags": ["Recurring Donation Plan History"],
        "summary": "listOrganizationRecurringDonationPlanHistory",
        "description": "Retrieve a list of all the Recurring Donation Plan History for the given organization.",
        "operationId": "listOrganizationRecurringDonationPlanHistory",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Recurring Donation Plan History for specific Organization",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RecurringDonationPlanHistory"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/recurring-donation-history?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organization_id}/recurring-donation-history?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organization_id}/recurring-donation-history"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/registrations": {
      "get": {
        "tags": ["Registration"],
        "summary": "listOrganizationRegistrations",
        "description": "Retrieves a list of all Registrations for a specific Organization",
        "operationId": "listOrganizationRegistrations",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Registrations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Registration"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/registrations?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organization_id}/registrations?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organization_id}/registrations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/restricted-countries": {
      "get": {
        "tags": ["Restricted Country"],
        "summary": "listOrganizationRestrictedCountries",
        "description": "Retrieves a list of all blacklisted countries for the specified Organzation",
        "operationId": "listOrganizationRestrictedCountries",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of associated Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Restricted Countries",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RestrictedCountry"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/restricted-countries?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/organizations/82364/restricted-countries?page=1"
                        },
                        "path": {
                          "description": "{host}/organizations/82364/restricted-countries"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/roles": {
      "get": {
        "tags": ["Role"],
        "summary": "listOrganizationRoles",
        "description": "Lists all the Roles that are available to the Organization.",
        "operationId": "listOrganizationRoles",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Organization Roles",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrganizationRoles"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/roles?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organization_id}/roles?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organization_id}/roles"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/source-tracking-codes": {
      "get": {
        "tags": ["Source Tracking Codes"],
        "summary": "listOrganizationSourceTrackingCodes",
        "description": "Lists all Source Tracking Codes which are managed by the specified Organization.",
        "operationId": "listOrganizationSourceTrackingCodes",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "fundraisingTeams",
            "in": "query",
            "description": "Flag to fetch source codes associated to Fundraising Teams under the Organization.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "name": "fundraisingPages",
            "in": "query",
            "description": "Flag to fetch source codes associated to Fundraising Pages under the Organization.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "name": "transactions",
            "in": "query",
            "description": "Flag to fetch source codes associated to Transactions under the Organization.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Source Tracking Codes",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SourceTrackingCode"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organization/{organization_id}/source-tracking-codes?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organization/{organization_id}/source-tracking-codes?page=1"
                        },
                        "path": {
                          "example": "{host}/organization/{organization_id}/source-tracking-codes"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/staff-notification-settings": {
      "get": {
        "tags": ["Staff Notification Setting"],
        "summary": "listOrganizationStaffNotificationSettings",
        "description": "Get Staff Notification Settings for given Organization",
        "operationId": "listOrganizationStaffNotificationSettings",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Staff Notification Settings",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["scope"],
                "example": "scope"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Staff Notification Settings",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrganizationStaffNotificationSetting"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/staff-notification-settings?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organization_id}/staff-notification-settings?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organization_id}/staff-notification-settings"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Staff Notification Setting"],
        "summary": "createOrganizationStaffNotificationSetting",
        "description": "Create a Staff Notification Setting for an Organization",
        "operationId": "createOrganizationStaffNotificationSetting",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationStaffNotificationSettingFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationStaffNotificationSetting"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/supporters": {
      "get": {
        "tags": ["Supporter"],
        "summary": "listOrganizationSupporters",
        "description": "Retrieves a list of all Supporters for a specific Organization",
        "operationId": "listOrganizationSupporters",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Supporters",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Supporter"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/supporters?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organizations_id}/supporters?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organizations_id}/supporters"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Supporter"],
        "summary": "createOrganizationSupporter",
        "description": "Create a Supporter for an Organization",
        "operationId": "createOrganizationSupporter",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupporterFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supporter"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Trying to duplicate a supporter cross organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/supporters/{supporter_id}/messages/asrs": {
      "get": {
        "tags": ["Supporter"],
        "summary": "listAsrMessages",
        "description": "Retrieves an array with recipientsIds, template_name, year and message_id for Annual Summary Report wrt Supporters for a specific Organization",
        "operationId": "listAsrMessages",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The specified Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "supporter_id",
            "in": "path",
            "description": "The specified Supporter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 4467663
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "recipientIds": {
                        "type": "string",
                        "example": "65a6a30a4f4d5300089183dd"
                      },
                      "templateName": {
                        "type": "string",
                        "example": "recurring_annual_receipt_2021"
                      },
                      "year": {
                        "type": "integer",
                        "example": 2021
                      },
                      "id": {
                        "type": "string",
                        "example": "65a6a30a4f4d5300089183dd"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/ticket-types": {
      "get": {
        "tags": ["Ticket Type"],
        "summary": "listOrganizationTicketTypes",
        "description": "Retrieve a list of all the Ticket Types for the given Organization.",
        "operationId": "listOrganizationTicketTypes",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Ticket Type",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TicketType"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/ticket-types?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organization_id}/ticket-types?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organization_id}/ticket-types"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/transactions": {
      "get": {
        "tags": ["Transaction"],
        "summary": "listOrganizationTransactions",
        "description": "List Organization Transactions",
        "operationId": "listOrganizationTransactions",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Transaction",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "items",
                  "member",
                  "offline_payment_info",
                  "channel_transaction",
                  "dedication",
                  "reprocess_status",
                  "recurring_donation_plan",
                  "receipt_serial",
                  "supporter",
                  "order_donation_match"
                ],
                "example": "items"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Transactions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Transaction"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/transactions?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/82364/transactions?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/82364/transactions"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/transaction-items": {
      "get": {
        "tags": ["Transaction Item"],
        "summary": "listOrganizationTransactionItems",
        "description": "Fetch Transaction Items for specific Organization.",
        "operationId": "listOrganizationTransactionItems",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "Primary identifier of Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the Transaction Items",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["transaction"],
                "example": "transaction"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Transaction Item",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TransactionItem"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/{organization_id}/transaction-items?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/{organization_id}/transaction-items?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/{organization_id}/transaction-items"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/whitelisted-currencies": {
      "get": {
        "tags": ["Whitelisted Currency"],
        "summary": "listOrganizationWhitelistedCurrencies",
        "description": "List all Whitelisted Currencies for specified Organization",
        "operationId": "listOrganizationWhitelistedCurrencies",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of desired Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Whitelisted Currencies",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WhitelistedCurrency"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/organizations/82364/whitelisted-currencies?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/organizations/82364/whitelisted-currencies?page=1"
                        },
                        "path": {
                          "example": "{host}/organizations/82364/whitelisted-currencies"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Whitelisted Currency"],
        "summary": "createWhitelistedCurrency",
        "description": "Create a new Whitelisted Currency",
        "operationId": "createWhitelistedCurrency",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of desired Organization",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "currency_code": {
                    "description": "ISO 4217-compliant alpha currency code",
                    "type": "string",
                    "example": "USD",
                    "nullable": false
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelistedCurrency"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organization-channels/{id}/disable": {
      "put": {
        "tags": ["Organization Channel"],
        "summary": "disableOrganizationChannel",
        "description": "Disables a Channel for the specified Organization",
        "operationId": "disableOrganizationChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Organization Channel",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2437
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationChannel"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organization-credential-sets/{id}": {
      "get": {
        "tags": ["Organization Credential Set"],
        "summary": "fetchOrganizationCredentialSet",
        "description": "Retrieves a Organization Credential Set from ID",
        "operationId": "fetchOrganizationCredentialSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The specified Organization Credential Set ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the OrganizationCredentialSet",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["member", "organization"],
                "example": "member"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCredentialSet"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Credential Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": ["Organization Credential Set"],
        "summary": "updateOrganizationCredentialSet",
        "description": "Update a specified Organization Credential Set",
        "operationId": "updateOrganizationCredentialSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization Credential Set ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82374
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCredentialSetFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCredentialSet"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Credential Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Organization Credential Set"],
        "summary": "deleteOrganizationCredentialSet",
        "description": "Delete a specified Organization Credential Set",
        "operationId": "deleteOrganizationCredentialSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization Credential Set ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 82364
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Credential Set not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed deleting the OrganizationCredentialSet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/organization-notifications/{id}": {
      "get": {
        "tags": ["Organization Notification"],
        "summary": "fetchOrganizationNotification",
        "description": "Retrieves a specific notification by id",
        "operationId": "fetchOrganizationNotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier for specified Organization Notification",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 238
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationNotification"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": ["Organization Notification"],
        "summary": "updateOrganizationNotification",
        "description": "Update nofication",
        "operationId": "updateOrganizationNotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Organization Notification",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 238
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationNotificationFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationNotification"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Organization Notification"],
        "summary": "deleteOrganizationNotification",
        "description": "Delete a Organization Notification",
        "operationId": "deleteOrganizationNotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Organization Notification",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 238
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/promo-codes/{promo_code_id}/promo-code-configurations": {
      "get": {
        "tags": ["Promo Code Configuration"],
        "summary": "listPromoCodeConfigurations",
        "description": "Retrieves a list of all Promo Code Configurations for the specified Promo Code",
        "operationId": "listPromoCodeConfigurations",
        "parameters": [
          {
            "name": "promo_code_id",
            "in": "path",
            "description": "The specified Promo Code ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8273
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the PromoCodeConfiguration",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["ticket_type"],
                "example": "ticket_type"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Promo Code Configurations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PromoCodeConfiguration"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/promo-codes/8273/promo-code-configurations?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/promo-codes/8273/promo-code-configurations?page=1"
                        },
                        "path": {
                          "description": "{host}/promo-codes/8273/promo-code-configurations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Promo Code not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promo-codes/{promo_code_id}/ticket-types": {
      "get": {
        "tags": ["Ticket Type"],
        "summary": "listPromoCodeTicketTypes",
        "description": "List all Ticket Types configured to work with the specified Promo Code",
        "operationId": "listPromoCodeTicketTypes",
        "parameters": [
          {
            "name": "promo_code_id",
            "in": "path",
            "description": "Primary identifier of Promo Code",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8273
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Ticket Type",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TicketType"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/promo-codes/{promo_code_id}/ticket-types?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/promo-codes/{promo_code_id}/ticket-types?page=1"
                        },
                        "path": {
                          "example": "{host}/promo-codes/{promo_code_id}/ticket-types"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Promo Code not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/promo-code-configurations": {
      "post": {
        "tags": ["Promo Code Configuration"],
        "summary": "createPromoCodeConfiguration",
        "description": "Create Promo Code Configuration",
        "operationId": "createPromoCodeConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoCodeConfigurationFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoCodeConfiguration"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/promo-code-configurations/{id}": {
      "delete": {
        "tags": ["Promo Code Configuration"],
        "summary": "deletePromoCodeConfiguration",
        "description": "Delete Promo Code Configuration",
        "operationId": "deletePromoCodeConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Promo Code Configuration",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 6054
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Promo Code Configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/promo-codes/{id}": {
      "get": {
        "tags": ["Promo Code"],
        "summary": "fetchPromoCode",
        "description": "Fetch specified Promo Code",
        "operationId": "fetchPromoCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Promo Code",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8273
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoCode"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Promo Code not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Promo Code"],
        "summary": "updatePromoCode",
        "description": "Update a Promo Code",
        "operationId": "updatePromoCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Promo Code",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8273
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoCodeFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoCode"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Promo Code not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/questions/{question_id}/answers": {
      "get": {
        "tags": ["Answer"],
        "summary": "listQuestionAnswers",
        "description": "Retrieves list of all Answers related to specified Question",
        "operationId": "listQuestionAnswers",
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "The specified Question ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 45678
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Answers",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Answer"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/question/45678/answer?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/question/45678/answer?page=1"
                        },
                        "path": {
                          "example": "{host}/question/45678/answer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/questions/{question_id}": {
      "get": {
        "tags": ["Question"],
        "summary": "fetchQuestion",
        "description": "Fetch specified Question",
        "operationId": "fetchQuestion",
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "Primary identifier of Question",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 45678
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/question/{question_id}": {
      "put": {
        "tags": ["Question"],
        "summary": "updateQuestion",
        "description": "Update a Question",
        "operationId": "updateQuestion",
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "Primary identifier of Question",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 45678
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Question"],
        "summary": "deleteQuestion",
        "description": "Delete Question",
        "operationId": "deleteQuestion",
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "Primary identifier of Question",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 45678
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Question not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/recurring-donation-plans/{recurring_donation_plan_id}/transactions": {
      "get": {
        "tags": ["Transaction"],
        "summary": "listRecurringDonationPlanTransactions",
        "description": "List Recurring Donation Plan Transactions",
        "operationId": "listRecurringDonationPlanTransactions",
        "parameters": [
          {
            "name": "recurring_donation_plan_id",
            "in": "path",
            "description": "ID of Recurring Donation Plan",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 85456
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Transactions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Transaction"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/recurring-donation-plans/{recurring_donation_plan_id/transactions?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/recurring-donation-plans/{recurring_donation_plan_id/transactions?page=1"
                        },
                        "path": {
                          "example": "{host}/recurring-donation-plans/{recurring_donation_plan_id/transactions"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Recurring Donation Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/recurring-donation-plans/{recurring_donation_plan_id}/transactions/{transaction_id}/reprocess": {
      "post": {
        "tags": ["Transaction"],
        "summary": "reprocessRecurringDonationPlanTransaction",
        "description": "Reprocess a Transactions for a Recurring Donation Plan",
        "operationId": "reprocessRecurringDonationPlanTransaction",
        "parameters": [
          {
            "name": "recurring_donation_plan_id",
            "in": "path",
            "description": "The specified Recurring Donation Plan ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 85456
            }
          },
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReprocessAttemptInfo"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Recurring Donation Plan or Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/recurring-donation-plans/{recurring_donation_plan_id}": {
      "get": {
        "tags": ["Recurring Donation Plan"],
        "summary": "fetchRecurringDonationPlan",
        "description": "Fetch specified Recurring Donation Plan",
        "operationId": "fetchRecurringDonationPlan",
        "parameters": [
          {
            "name": "recurring_donation_plan_id",
            "in": "path",
            "description": "Primary identifier of Recurring Donation Plan",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 85456
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringDonationPlan"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Recurring Donation Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/answers": {
      "get": {
        "tags": ["Answer"],
        "summary": "listRegistrationAnswers",
        "description": "Retrieves list of all Answers related to specified Registration",
        "operationId": "listRegistrationAnswers",
        "parameters": [
          {
            "name": "registration_id",
            "in": "path",
            "description": "The specified Registration ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 78345
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Answers",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Answer"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/registration/78345/answer?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/registration/78345/answer?page=1"
                        },
                        "path": {
                          "example": "{host}/registration/78345/answer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Registration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Answer"],
        "summary": "createRegistrationAnswer",
        "description": "Create an Answer for a Registration",
        "operationId": "createRegistrationAnswer",
        "parameters": [
          {
            "name": "registration_id",
            "in": "path",
            "description": "The specified Registration ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 78345
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["question_id"],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AnswerFillable"
                  },
                  {
                    "properties": {
                      "question_id": {
                        "description": "Primary identifier of associated Question",
                        "type": "integer",
                        "example": 45678,
                        "nullable": false
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Registration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/registrations/{registration_id}": {
      "get": {
        "tags": ["Registration"],
        "summary": "getRegistrationById",
        "description": "Retrieves Registrations from ID",
        "operationId": "fetchRegistration",
        "parameters": [
          {
            "name": "registration_id",
            "in": "path",
            "description": "The specified Registration ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 78345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Registration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Registration"],
        "summary": "updateRegistration",
        "description": "Updates an existing Registration",
        "operationId": "updateRegistration",
        "parameters": [
          {
            "name": "registration_id",
            "in": "path",
            "description": "The specified Registration ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 78345
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Registration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/reprocess-attempt-info/{reprocess_transaction_id}": {
      "put": {
        "tags": ["Transaction"],
        "summary": "updateReprocessAttemptInfo",
        "description": "Update a Reprocess Attempt Info Record",
        "operationId": "updateReprocessAttemptInfo",
        "parameters": [
          {
            "name": "reprocess_transaction_id",
            "in": "path",
            "description": "The specified Reprocess Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 34672
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReprocessAttemptInfoFillable"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReprocessAttemptInfo"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Reprocess Attempt Info record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{story_id}/comments": {
      "get": {
        "tags": ["Comment"],
        "summary": "listStoryComments",
        "description": "Retrieves a paginated list of Comments for a Story",
        "operationId": "listStoryComments",
        "parameters": [
          {
            "name": "story_id",
            "in": "path",
            "description": "The specified Story ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 736
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Comments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StoryComment"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/stories/736/comments?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/stories/736/comments?page=1"
                        },
                        "path": {
                          "example": "{host}/stories/736/comments"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Comment"],
        "summary": "createStoryComment",
        "description": "Create Comment for specified Story",
        "operationId": "createStoryComment",
        "parameters": [
          {
            "name": "story_id",
            "in": "path",
            "description": "The specified Story ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 736
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoryComment"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Story not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/stories/{story_id}/likes": {
      "get": {
        "tags": ["Like"],
        "summary": "listStoryLikes",
        "description": "Retrieves a list of all Likes made for the specified Story",
        "operationId": "listStoryLikes",
        "parameters": [
          {
            "name": "story_id",
            "in": "path",
            "description": "Primary identifier of specified Story",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 736
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Likes",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LikeStory"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/stories/736/likes?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/stories/736/likes?page=1"
                        },
                        "path": {
                          "description": "{host}/stories/736/likes"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Story not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Like"],
        "summary": "createStoryLike",
        "description": "Create a Like for the specified Story",
        "operationId": "createStoryLike",
        "parameters": [
          {
            "name": "story_id",
            "in": "path",
            "description": "Primary identifier of specified Story",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 736
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeFillableStory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikeStory"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Story not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/stories/{id}": {
      "put": {
        "tags": ["Story"],
        "summary": "updateStory",
        "description": "Update Story",
        "operationId": "updateStory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Story",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72552
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "Main content of Story",
                    "type": "string",
                    "example": "The main reason that I am raising funds for this organization is to...",
                    "nullable": false
                  },
                  "status": {
                    "description": "Indication whether Post is a draft or has been published",
                    "type": "string",
                    "enum": ["draft", "published"],
                    "example": "draft"
                  },
                  "title": {
                    "description": "Title of Post",
                    "type": "string",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignStory"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Story not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Story"],
        "summary": "deleteStory",
        "description": "Delete Story",
        "operationId": "deleteStory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Story",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72552
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Story not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/supporters/{supporter_id}": {
      "get": {
        "tags": ["Supporter"],
        "summary": "fetchSupporter",
        "description": "Retrieves Supporter from ID",
        "operationId": "fetchSupporter",
        "parameters": [
          {
            "name": "supporter_id",
            "in": "path",
            "description": "The specified supporter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 5827
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supporter"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Supporter not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Supporter"],
        "summary": "deleteSupporter",
        "description": "Delete a Supporter",
        "operationId": "deleteSupporter",
        "parameters": [
          {
            "name": "supporter_id",
            "in": "path",
            "description": "Primary identifier of Supporter",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "5827"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Supporter not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/supporter/{supporter_id}": {
      "put": {
        "tags": ["Supporter"],
        "summary": "updateSupporter",
        "description": "Updates an existing Supporter",
        "operationId": "updateSupporter",
        "parameters": [
          {
            "name": "supporter_id",
            "in": "path",
            "description": "The specified Supporter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 5827
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupporterFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supporter"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Supporter not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/themes/{id}": {
      "put": {
        "tags": ["Theme"],
        "summary": "updateTheme",
        "description": "Update existing Theme for a Campaign",
        "operationId": "updateTheme",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Theme",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5df32f6a7402874de6093201"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThemeFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Theme not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/themes": {
      "post": {
        "tags": ["Theme"],
        "summary": "createTheme",
        "description": "Creates a new Theme for a Campaign",
        "operationId": "createTheme",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThemeFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/ticket-types/{ticket_type_id}/promo-code-configurations": {
      "get": {
        "tags": ["Promo Code Configuration"],
        "summary": "listTicketTypePromoCodeConfigurations",
        "description": "Retrieves a list of all Promo Code Configurations for the specified Ticket Type",
        "operationId": "listTicketTypePromoCodeConfigurations",
        "parameters": [
          {
            "name": "ticket_type_id",
            "in": "path",
            "description": "The specified Tiket Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 9978
            }
          },
          {
            "name": "with",
            "in": "query",
            "description": "Request specific relationships to be returned with the PromoCodeConfiguration",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["promo_code"],
                "example": "promo_code"
              }
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Promo Code Configurations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PromoCodeConfiguration"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/ticket-types/9978/promo-code-configurations?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/ticket-types/9978/promo-code-configurations?page=1"
                        },
                        "path": {
                          "description": "{host}/ticket-types/9978/promo-code-configurations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Ticket Type not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ticket-types/{ticket_types_id}/promo-codes": {
      "get": {
        "tags": ["Promo Code"],
        "summary": "listTicketTypesPromoCodes",
        "description": "Retrieves a list of all Promo Codes made for the specified Ticket Type",
        "operationId": "listTicketTypesPromoCodes",
        "parameters": [
          {
            "name": "ticket_types_id",
            "in": "path",
            "description": "Primary identifier of specified Ticket Type",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 9978
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Promo Codes",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PromoCode"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/ticket-types/9978/promo-codes?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/ticket-types/9978/promo-codes?page=1"
                        },
                        "path": {
                          "description": "{host}/ticket-types/9978/promo-codes"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Ticket Type not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ticket-types/{id}": {
      "get": {
        "tags": ["Ticket Type"],
        "summary": "fetchTicketType",
        "description": "Fetch a single Ticket Type resource.",
        "operationId": "fetchTicketType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Ticket Type",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 9978
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketType"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Ticket Type not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Ticket Type"],
        "summary": "updateTicketType",
        "description": "Update a single Ticket Type resource.",
        "operationId": "updateTicketType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Ticket Type",
            "required": true,
            "schema": {
              "type": "integer",
              "example": "9978"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketTypeFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketType"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Ticket Type not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/transactions/{transaction_id}/acknowledgements": {
      "get": {
        "tags": ["Acknowledgement"],
        "summary": "listAcknowledgements",
        "description": "Retrieves a list of all Acknowledgements made for the specified Transaction",
        "operationId": "listAcknowledgements",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1427264
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Acknowledgements",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Acknowledgement"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/transaction/1427264/acknowledgements?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/transaction/1427264/acknowledgements?page=1"
                        },
                        "path": {
                          "description": "{host}/transaction/1427264/acknowledgements"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Acknowledgement"],
        "summary": "createAcknowledgement",
        "description": "Create Acknowledgement for specified Transaction",
        "operationId": "createAcknowledgement",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1427264
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcknowledgementFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Acknowledgement"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/answers": {
      "get": {
        "tags": ["Answer"],
        "summary": "listTransactionAnswers",
        "description": "Retrieves list of all Answers related to specified Transaction",
        "operationId": "listTransactionAnswers",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1427264
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Answers",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Answer"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/transaction/1427264/answer?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/transaction/1427264/answer?page=1"
                        },
                        "path": {
                          "example": "{host}/transaction/1427264/answer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/dedications": {
      "post": {
        "tags": ["Dedication"],
        "summary": "createTransactionDedication",
        "description": "Create a Dedication",
        "operationId": "createTransactionDedication",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Primary identifier of Transaction",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DedicationFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dedication"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/transactions/{transaction_id}/hard-credit-transfers": {
      "post": {
        "tags": ["Hard Credit Transfer"],
        "summary": "createHardCreditTransfer",
        "description": "Creates a Hard Credit Transfer for the specified Transaction, thereby re-attributing it to the new Fundraising Entity",
        "operationId": "createHardCreditTransfer",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Primary identifier of specified Transaction",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HardCreditTransferFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardCreditTransfer"
                }
              }
            }
          },
          "400": {
            "description": "'to' is not a valid creditable type",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "description": "Description of detected errors in request",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "'to' is not a valid creditable type"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/transactions/{transaction_id}/registrations": {
      "get": {
        "tags": ["Registration"],
        "summary": "listTransactionsRegistrations",
        "description": "Retrieves a list of all Registrations for a specific Transaction",
        "operationId": "listTransactionsRegistrations",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "The specified Transaction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 8734
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Registrations",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Registration"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/transactions/{transaction_id}/registrations?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/transactions/{transaction_id}/registrations?page=1"
                        },
                        "path": {
                          "example": "{host}/transactions/{transaction_id}/registrations"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/updates/{update_id}/comments": {
      "get": {
        "tags": ["Comment"],
        "summary": "listUpdateComments",
        "description": "Retrieves a paginated list of Comments for a Update",
        "operationId": "listUpdateComments",
        "parameters": [
          {
            "name": "update_id",
            "in": "path",
            "description": "The specified Update ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72631
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Comments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UpdateComment"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/updates/72631/comments?page=1"
                        },
                        "last_page_url": {
                          "example": "{host}/updates/72631/comments?page=1"
                        },
                        "path": {
                          "example": "{host}/updates/72631/comments"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{update_id}/comments": {
      "put": {
        "tags": ["Comment"],
        "summary": "createUpdateComment",
        "description": "Create Comment for specified Update",
        "operationId": "createUpdateComment",
        "parameters": [
          {
            "name": "update_id",
            "in": "path",
            "description": "The specified Update ID",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72631
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentFillable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateComment"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/updates/{update_id}/likes": {
      "get": {
        "tags": ["Like"],
        "summary": "listUpdateLikes",
        "description": "Retrieves a list of all Likes made for the specified Update",
        "operationId": "listUpdateLikes",
        "parameters": [
          {
            "name": "update_id",
            "in": "path",
            "description": "Primary identifier of specified Update",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72631
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "description": "Collection of Likes",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LikeUpdate"
                          }
                        },
                        "first_page_url": {
                          "example": "{host}/updates/72631/likes?page=1"
                        },
                        "last_page_url": {
                          "description": "{host}/updates/72631/likes?page=1"
                        },
                        "path": {
                          "description": "{host}/updates/72631/likes"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Like"],
        "summary": "createUpdateLike",
        "description": "Create a Like for the specified Update",
        "operationId": "createUpdateLike",
        "parameters": [
          {
            "name": "update_id",
            "in": "path",
            "description": "Primary identifier of specified Update",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72631
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeFillableUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikeUpdate"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/updates/{id}": {
      "get": {
        "tags": ["Update"],
        "summary": "fetchUpdate",
        "description": "Fetch Update",
        "operationId": "fetchUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Update",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72631
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignUpdate"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Update"],
        "summary": "updateUpdate",
        "description": "Update Update",
        "operationId": "updateUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Update",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72631
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "description": "Main content of Update",
                    "type": "string",
                    "example": "The main reason that I am raising funds for this organization is to...",
                    "nullable": false
                  },
                  "status": {
                    "description": "Indication whether Post is a draft or has been published",
                    "type": "string",
                    "enum": ["draft", "published"],
                    "example": "draft"
                  },
                  "title": {
                    "description": "Title of Post",
                    "type": "string",
                    "nullable": true
                  },
                  "visibility": {
                    "description": "Visibility of Update (private Updates can only be seen by the Member associated\n    with record)",
                    "type": "string",
                    "enum": ["private", "public"],
                    "example": "public"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Malformed payload provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MalformedPayloadResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      },
      "delete": {
        "tags": ["Update"],
        "summary": "deleteUpdate",
        "description": "Delete Update",
        "operationId": "deleteUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Update",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 72631
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Update not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    },
    "/whitelisted-currencies/{id}": {
      "get": {
        "tags": ["Whitelisted Currency"],
        "summary": "fetchWhitelistedCurrency",
        "description": "Fetch specified Whitelisted Currency",
        "operationId": "fetchWhitelistedCurrency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Whitelisted Currency",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 427
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelistedCurrency"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Whitelisted Currency not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Whitelisted Currency"],
        "summary": "deleteWhitelistedCurrency",
        "description": "Delete specified Whitelisted Currency",
        "operationId": "deleteWhitelistedCurrency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Primary identifier of Whitelisted Currency",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 427
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requester is not authorized to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Whitelisted Currency not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2Member": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Amount": {
        "title": "Amount",
        "properties": {
          "data": {
            "properties": {
              "suggested_donation_amount": {
                "description": "Predicted amount for donation",
                "type": "number",
                "format": "float",
                "example": 30
              },
              "suggested_recurring_amount": {
                "description": "Predicted amount for recurring donation",
                "type": "number",
                "format": "float",
                "example": 30
              },
              "grid": {
                "description": "Grid has predicted amount for donation and recurring donation",
                "properties": {
                  "suggested_donation_amount": {
                    "description": "Array of suggested amounts for one-time donations",
                    "type": "array",
                    "items": {
                      "type": "float",
                      "example": "[125,105,95,75]"
                    }
                  },
                  "suggested_recurring_amount": {
                    "description": "Array of suggested amounts for recurring donations",
                    "type": "array",
                    "items": {
                      "type": "float",
                      "example": "[125,105,95,75]"
                    }
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CreateCampaignSeriesIteration": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignSeriesIterationFillable"
          },
          {
            "$ref": "#/components/schemas/CampaignCollectionFillable"
          }
        ]
      },
      "CreateCampaignSeriesIterationResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignSeriesIteration"
          },
          {
            "$ref": "#/components/schemas/CampaignCollectionFillable"
          },
          {
            "properties": {
              "created_at": {
                "description": "Date/time of initial record creation",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of record last updated",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "CreateCampaignSeriesRegion": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignSeriesRegionFillable"
          },
          {
            "$ref": "#/components/schemas/CampaignCollectionFillable"
          }
        ]
      },
      "CreateCampaignSeriesRegionResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignSeriesRegion"
          },
          {
            "$ref": "#/components/schemas/CampaignCollectionFillable"
          },
          {
            "properties": {
              "created_at": {
                "description": "Date/time of initial record creation",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of record last updated",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "CampaignTemplateMessage": {
        "title": "Campaign Template Message",
        "properties": {
          "campaign_template_id": {
            "description": "Primary identifier of Campaign Template",
            "type": "integer",
            "example": 413
          },
          "component_set_id": {
            "description": "Primary identifier of Component Set",
            "type": "string",
            "example": "602117f2a20fed221008f8e9"
          },
          "Message": {
            "$ref": "#/components/schemas/ComponentItemMessage"
          }
        },
        "type": "object"
      },
      "PaginationLink": {
        "description": "Object referencing a page for the resource queried that can be used to fetch that page.",
        "properties": {
          "label": {
            "description": "Identifier of the page.",
            "type": "string",
            "example": "1"
          },
          "url": {
            "description": "URL that can be used to fetch associated page of records.",
            "type": "string",
            "example": "{host}/{resource}?page=1"
          },
          "active": {
            "description": "Identifies whether the previously requested page matches the page this link object references.",
            "type": "boolean",
            "example": "true"
          }
        },
        "type": "object"
      },
      "PaginatedResponse": {
        "title": "Paginated Response",
        "properties": {
          "current_page": {
            "description": "Index of current page",
            "type": "integer",
            "example": 1
          },
          "data": {
            "description": "Collection of results",
            "type": "array",
            "items": {}
          },
          "first_page_url": {
            "description": "URL of first page of results",
            "type": "string",
            "example": null
          },
          "from": {
            "description": "Index of first displayed result within total result set",
            "type": "integer",
            "example": 1
          },
          "last_page": {
            "description": "Index of last page in result set",
            "type": "integer",
            "example": 1
          },
          "last_page_url": {
            "description": "URL of last page of results",
            "type": "string",
            "example": null
          },
          "next_page_url": {
            "description": "URL of next page of results",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "path": {
            "description": "URL of current page of results",
            "type": "string",
            "example": null
          },
          "per_page": {
            "description": "Maximum number of records returned per page of results",
            "type": "integer",
            "example": 20
          },
          "prev_page_url": {
            "description": "URL of previous page of results",
            "type": "string",
            "example": null
          },
          "links": {
            "description": "Collection of objects representing pages {label, URL, active} that can be used to request the associated page of records.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaginationLink"
            }
          },
          "to": {
            "description": "Index of last displayed result within total result set",
            "type": "integer",
            "example": 1
          },
          "total": {
            "description": "Total count of records in result set",
            "type": "integer",
            "example": 1
          }
        },
        "type": "object"
      },
      "MalformedPayloadResponse": {
        "title": "Malformed Payload Response",
        "properties": {
          "errors": {
            "description": "Description of detected errors in request",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Malformed JSON payload."
            }
          }
        },
        "type": "object"
      },
      "ResourceNotFoundResponse": {
        "title": "Resource Not Found Response",
        "properties": {
          "error": {
            "description": "Description of detected errors in request",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ForbiddenResponse": {
        "title": "Forbidden Response",
        "properties": {
          "error": {
            "description": "Description of detected error in request",
            "type": "string",
            "example": "This action is unauthorized."
          }
        },
        "type": "object"
      },
      "EmptyResponse": {
        "title": "Empty Response",
        "properties": {},
        "type": "object"
      },
      "CerberusRole": {
        "title": "Role",
        "properties": {
          "id": {
            "description": "ID of role",
            "type": "integer",
            "example": 1
          },
          "name": {
            "description": "Name of role",
            "type": "string",
            "example": "Campaign Editor"
          },
          "description": {
            "description": "Description of role",
            "type": "string",
            "example": "Edit the details and design of specific Campaigns."
          },
          "custom_id": {
            "description": "Custom ID for role",
            "type": "string",
            "example": "campaign_editor"
          },
          "scope_type": {
            "description": "Scope type for role",
            "type": "string",
            "example": "campaign"
          },
          "is_assignable": {
            "description": "Determine if can assign",
            "type": "integer",
            "example": 1
          },
          "created_at": {
            "description": "Date/time of created role",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of updated role",
            "type": "string",
            "format": "date-time",
            "example": "2020-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "CerberusScope": {
        "title": "Scope",
        "properties": {
          "id": {
            "description": "ID of scope",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "Scope type",
            "type": "string",
            "example": "campaign"
          },
          "value": {
            "description": "",
            "type": "integer",
            "example": 54348
          },
          "created_at": {
            "description": "Date/time of created scope",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of updated scope",
            "type": "string",
            "format": "date-time",
            "example": "2020-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "Metadata": {
        "title": "Metadata",
        "properties": {
          "foo": {
            "type": "string",
            "example": "bar"
          }
        },
        "type": "object"
      },
      "OrchestrationJobSync": {
        "title": "Orchestration data sync job",
        "properties": {
          "id": {
            "description": "Data sync job id",
            "type": "number",
            "example": 12
          },
          "jobStatus": {
            "description": "Job Status which can be received, extracting, extracted, completed, failed",
            "type": "string",
            "enum": [
              "received",
              "extracting",
              "extracted",
              "completed",
              "failed"
            ],
            "example": "received"
          },
          "existingCount": {
            "description": "Existing count",
            "type": "number",
            "example": 10
          },
          "resource": {
            "description": "Resource of the event",
            "type": "string",
            "enum": ["campaign", "designation", "transaction", "recurring"],
            "example": "campaign"
          },
          "integration": {
            "description": "The integration type for which event is to stored",
            "type": "string",
            "example": "npc"
          },
          "totalObjects": {
            "description": "Total number of objects",
            "type": "number",
            "example": 10
          }
        },
        "type": "object"
      },
      "Orchestration": {
        "title": "Orchestration data sync",
        "properties": {
          "startedTs": {
            "description": "Started date/time to get the time range for data-sync",
            "type": "string",
            "example": "2024-01-01T00:00:00",
            "nullable": false
          },
          "endedTs": {
            "description": "Ended date/time to get the time range for data-sync",
            "type": "string",
            "example": "2024-01-02T00:00:00",
            "nullable": false
          },
          "dataSyncConfigId": {
            "description": "Data sync config id: this is config which tells all the resources that are allowed for data sync",
            "type": "number",
            "example": 7,
            "nullable": false
          },
          "orgId": {
            "description": "The id of the organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "status": {
            "description": "Status of data sync",
            "type": "string",
            "enum": [
              "received",
              "extracting",
              "extracted",
              "completed",
              "failed"
            ],
            "example": "received"
          }
        },
        "type": "object"
      },
      "ExportSettingsRequestBody": {
        "title": "ExportSettingsRequestBody",
        "properties": {
          "list_id": {
            "description": "ID of the List",
            "type": "string",
            "example": "xxxcx"
          },
          "interest_categories": {
            "description": "Interest categories",
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "ID of the interest category",
                  "type": "string",
                  "example": "f7837fh"
                },
                "title": {
                  "description": "Name of the interest category",
                  "type": "string",
                  "example": "Favorite Food"
                },
                "interests": {
                  "description": "Interests",
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "description": "ID of interest",
                        "type": "string",
                        "example": "f7837fh"
                      },
                      "name": {
                        "description": "Name of interest",
                        "type": "string",
                        "example": "Pasta"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "Payout": {
        "title": "Payout",
        "properties": {
          "data": {
            "properties": {
              "id": {
                "description": "Primary identifier of record",
                "type": "integer",
                "example": 30,
                "nullable": false
              },
              "payout_id": {
                "description": "Payout identifier of record",
                "type": "integer",
                "example": 12,
                "nullable": false
              },
              "payout_date": {
                "description": "Date/time of payout date",
                "type": "string",
                "example": "2021-08-27T00:00:00.000Z",
                "nullable": false
              },
              "payout_amount": {
                "description": "Payout amount of transaction",
                "type": "integer",
                "example": 10000,
                "nullable": true
              },
              "payout_amount_currency": {
                "description": "The currency that the Organization collects transactions in",
                "type": "string",
                "example": "USD",
                "nullable": true
              },
              "payout_created_at": {
                "description": "Date/time of created payout",
                "type": "string",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "payout_updated_at": {
                "description": "Date/time of updated payout",
                "type": "string",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "transactions": {
                "description": "Transactions",
                "type": "array",
                "items": {
                  "properties": {
                    "classy_transaction_id": {
                      "description": "Classy transaction id",
                      "type": "integer",
                      "example": null,
                      "nullable": true
                    },
                    "transaction_type": {
                      "description": "Transaction type",
                      "type": "string",
                      "example": "PAYMENT",
                      "nullable": true
                    },
                    "source_reference_id": {
                      "description": "Reference id of either paypal or stripe",
                      "type": "string",
                      "example": "7D967559AH6765983",
                      "nullable": true
                    },
                    "source_transaction_id": {
                      "description": "Transaction id of paypal or stripe",
                      "type": "string",
                      "example": "0B966690AH6223143",
                      "nullable": false
                    },
                    "transaction_date": {
                      "description": "Transaction date",
                      "type": "string",
                      "example": "2021-09-20T18:03:42.000Z",
                      "nullable": true
                    },
                    "transaction_amount": {
                      "description": "Transaction amount",
                      "type": "integer",
                      "example": 100,
                      "nullable": true
                    },
                    "transaction_currency": {
                      "description": "Transaction currency",
                      "type": "string",
                      "example": "USD",
                      "nullable": true
                    },
                    "transaction_fee": {
                      "description": "Transaction fees",
                      "type": "integer",
                      "example": 5,
                      "nullable": true
                    },
                    "transaction_created_at": {
                      "description": "Date/time of created transaction",
                      "type": "string",
                      "example": "2021-10-15T14:31:05.000Z",
                      "nullable": false
                    },
                    "transaction_updated_at": {
                      "description": "Date/time of updated transaction",
                      "type": "string",
                      "example": "2021-10-15T14:31:05.000Z",
                      "nullable": false
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "PayoutPaginatedResponse": {
        "title": "Paginated Response",
        "properties": {
          "current_page": {
            "description": "Index of current page",
            "type": "integer",
            "example": 2
          },
          "data": {
            "description": "Collection of results",
            "type": "object"
          },
          "from": {
            "description": "Index of first displayed result within total result set",
            "type": "integer",
            "example": 1
          },
          "last_page": {
            "description": "Index of last page in result set",
            "type": "integer",
            "example": 1
          },
          "next_page_url": {
            "description": "URL of next page of results",
            "type": "string",
            "example": "/organizations/82364/payouts/paypal?payout_date=2021-08-27&page=3",
            "nullable": true
          },
          "per_page": {
            "description": "Maximum number of records returned per page of results",
            "type": "integer",
            "example": 20
          },
          "pre_page_url": {
            "description": "URL of previous page of results",
            "type": "string",
            "example": "/organizations/82364/payouts/paypal?payout_date=2021-08-27&page=1"
          },
          "to": {
            "description": "Index of last displayed result within total result set",
            "type": "integer",
            "example": 1
          },
          "total": {
            "description": "Total count of records in result set",
            "type": "integer",
            "example": 1
          }
        },
        "type": "object"
      },
      "PayoutById": {
        "title": "Payout",
        "properties": {
          "data": {
            "properties": {
              "id": {
                "description": "Primary identifier of record",
                "type": "integer",
                "example": 30,
                "nullable": false
              },
              "payout_id": {
                "description": "Payout identifier of record",
                "type": "integer",
                "example": 12,
                "nullable": false
              },
              "payout_date": {
                "description": "Date/time of payout date",
                "type": "string",
                "example": "2021-08-27T00:00:00.000Z",
                "nullable": false
              },
              "payout_amount": {
                "description": "Payout amount of transaction",
                "type": "integer",
                "example": 10000,
                "nullable": true
              },
              "payout_amount_currency": {
                "description": "The currency that the Organization collects transactions in",
                "type": "string",
                "example": "USD",
                "nullable": true
              },
              "payout_created_at": {
                "description": "Date/time of created payout",
                "type": "string",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "payout_updated_at": {
                "description": "Date/time of updated payout",
                "type": "string",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "transactions": {
                "description": "Transactions",
                "properties": {
                  "classy_transaction_id": {
                    "description": "Classy transaction id",
                    "type": "integer",
                    "example": null,
                    "nullable": true
                  },
                  "transaction_type": {
                    "description": "Transaction type",
                    "type": "string",
                    "example": "PAYMENT",
                    "nullable": true
                  },
                  "source_reference_id": {
                    "description": "Reference id of either paypal or stripe",
                    "type": "string",
                    "example": "7D967559AH6765983",
                    "nullable": true
                  },
                  "source_transaction_id": {
                    "description": "Transaction id of paypal or stripe",
                    "type": "string",
                    "example": "0B966690AH6223143",
                    "nullable": false
                  },
                  "transaction_date": {
                    "description": "Transaction date",
                    "type": "string",
                    "example": "2021-09-20T18:03:42.000Z",
                    "nullable": true
                  },
                  "transaction_amount": {
                    "description": "Transaction amount",
                    "type": "integer",
                    "example": 100,
                    "nullable": true
                  },
                  "transaction_currency": {
                    "description": "Transaction currency",
                    "type": "string",
                    "example": "USD",
                    "nullable": true
                  },
                  "transaction_fee": {
                    "description": "Transaction fees",
                    "type": "integer",
                    "example": 5,
                    "nullable": true
                  },
                  "transaction_created_at": {
                    "description": "Date/time of created transaction",
                    "type": "string",
                    "example": "2021-10-15T14:31:05.000Z",
                    "nullable": false
                  },
                  "transaction_updated_at": {
                    "description": "Date/time of updated transaction",
                    "type": "string",
                    "example": "2021-10-15T14:31:05.000Z",
                    "nullable": false
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Business": {
        "title": "Business",
        "properties": {
          "id": {
            "description": "ID of Business",
            "type": "integer",
            "example": "423",
            "nullable": false
          },
          "name": {
            "description": "Name of Business",
            "type": "string",
            "example": "Donation Match Org",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-18T12:24:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "ClaimAccountCode": {
        "title": "Claim Account Code",
        "properties": {
          "id": {
            "description": "ID of Claim Account Code",
            "type": "integer",
            "example": "54327",
            "nullable": false
          },
          "member_id": {
            "description": "ID of Member",
            "type": "integer",
            "example": "2012",
            "nullable": false
          },
          "code": {
            "description": "Claim account code",
            "type": "string",
            "example": "xxxx1234xxxx",
            "nullable": false
          },
          "redirect_after": {
            "description": "URL the Member will be redirected to once their Account is claimed",
            "type": "integer",
            "example": "https://example.com"
          },
          "expires_at": {
            "description": "Date/time of which Claim Account Code will expire",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-18T12:24:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "ConstantContactAccount": {
        "title": "ConstantContact Account",
        "properties": {
          "id": {
            "description": "ID of Constant Contact Account",
            "type": "integer",
            "example": "904",
            "nullable": false
          },
          "organization_id": {
            "description": "ID of Organization",
            "type": "integer",
            "example": "82364",
            "nullable": false
          },
          "donor_list_id": {
            "description": "ID of Donor List",
            "type": "integer",
            "example": "90543"
          },
          "fundraiser_list_id": {
            "description": "ID of Fundraiser List",
            "type": "integer",
            "example": "453"
          },
          "name": {
            "description": "Name of Constant Contact Account",
            "type": "string",
            "example": "Test Buster",
            "nullable": false
          },
          "status": {
            "description": "Status of Constant Contact Account",
            "type": "string",
            "enum": ["active", "incomplete", "failing"],
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of creation of Constant Contact Account",
            "type": "string",
            "format": "date-time",
            "example": "2020-04-18T12:24:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of Constant Contact Account last updated",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-18T12:24:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "Domain": {
        "title": "Domain",
        "properties": {
          "id": {
            "description": "ID of Domain",
            "type": "integer",
            "example": 1,
            "nullable": false
          },
          "value": {
            "description": "Fully-qualified Domain name",
            "type": "string",
            "example": "fundraise.mydomain.org",
            "nullable": false
          },
          "favicon": {
            "description": "Full URL for favicon location",
            "type": "string",
            "example": "https://favicon.com/image.png"
          },
          "facebook_app_id": {
            "description": "Associated Facebook App ID for this Domain",
            "type": "string",
            "example": "01189998819991197253"
          },
          "created_at": {
            "description": "Date/time of initial Domain creation",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of Domain last updated",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "DoubleTheDonationAccount": {
        "title": "DoubleTheDonation Account",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 93823,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "public_key": {
            "description": "Public key for DoubleTheDonation",
            "type": "string",
            "example": "2j9VhYMySDkLAEeB",
            "nullable": false
          }
        },
        "type": "object"
      },
      "DoubleTheDonationAccountFillable": {
        "title": "DoubleTheDonation Account Fillable",
        "properties": {
          "public_key": {
            "description": "Public key for DoubleTheDonation",
            "type": "string",
            "example": "2j9VhYMySDkLAEeB",
            "nullable": false
          },
          "private_key": {
            "description": "Private key for DoubleTheDonation",
            "type": "string",
            "example": "2j9VhYMySDkLAEeB",
            "nullable": false
          }
        },
        "type": "object"
      },
      "MailchimpAccount": {
        "title": "Mailchimp Account",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 816,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "api_key": {
            "description": "Mailchimp API key for this Mailchimp Account",
            "type": "string",
            "example": "3a92cdb258a5b9fa61fdf487c03b26d7-us1",
            "nullable": false
          },
          "list_id": {
            "description": "ID of the default Mailchimp list new Supporters will be synced with. This ID is used when the supporter is neither a fundraiser nor a donor",
            "type": "string",
            "example": "817f6f66b"
          },
          "donors_export_settings": {
            "description": "Json object describing where to export donors",
            "type": "object",
            "example": "{}"
          },
          "fundraisers_export_settings": {
            "description": "Json object describing where to export fundraisers",
            "type": "object",
            "example": "{}"
          }
        },
        "type": "object"
      },
      "MemberRequestBody": {
        "title": "MemberRequestBody",
        "properties": {
          "first_name": {
            "description": "First name",
            "type": "string",
            "example": "Buster"
          },
          "last_name": {
            "description": "Last name",
            "type": "string",
            "example": "McTest"
          },
          "address1": {
            "description": "Address1",
            "type": "string",
            "example": "123 Baker St"
          },
          "address2": {
            "description": "Address2",
            "type": "string",
            "example": ""
          },
          "city": {
            "description": "City",
            "type": "string",
            "example": "San Diego"
          },
          "state": {
            "description": "State",
            "type": "string",
            "example": "CA"
          },
          "country": {
            "description": "Country",
            "type": "string",
            "example": "US"
          },
          "postal_code": {
            "description": "Postal Code",
            "type": "string",
            "example": "91111"
          },
          "email_address": {
            "description": "Email address",
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "date_of_birth": {
            "description": "Date of birth",
            "type": "string",
            "example": "1990-01-01"
          },
          "phone": {
            "description": "Phone number",
            "type": "string",
            "example": "8883219876"
          },
          "fax": {
            "description": "Fax",
            "type": "string",
            "example": "123"
          },
          "gender": {
            "description": "Gender",
            "type": "string",
            "enum": ["M", "F", "m", "f"],
            "example": "M"
          },
          "title": {
            "description": "Title",
            "type": "string",
            "example": "Mr"
          }
        },
        "type": "object"
      },
      "Member": {
        "title": "Member",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "okta_id": {
            "description": "ID of Okta",
            "type": "string",
            "example": "00aaqm2iupwbJrgDv0h7"
          },
          "okta_synchronized_at": {
            "description": "Date/time of last sync update to Okta",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z"
          },
          "first_name": {
            "description": "First name",
            "type": "string",
            "example": "Buster",
            "nullable": false
          },
          "last_name": {
            "description": "Last name",
            "type": "string",
            "example": "McTest",
            "nullable": false
          },
          "address1": {
            "description": "Address1",
            "type": "string",
            "example": "123 Baker St"
          },
          "address2": {
            "description": "Address2",
            "type": "string",
            "example": ""
          },
          "city": {
            "description": "City",
            "type": "string",
            "example": "San Diego"
          },
          "state": {
            "description": "State",
            "type": "string",
            "example": "CA"
          },
          "country": {
            "description": "Country",
            "type": "string",
            "example": "US"
          },
          "postal_code": {
            "description": "Postal Code",
            "type": "string",
            "example": "91111"
          },
          "email_address": {
            "description": "Email address",
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "nullable": false
          },
          "date_of_birth": {
            "description": "Date of birth",
            "type": "string",
            "example": "1990-01-01"
          },
          "phone": {
            "description": "Phone number",
            "type": "string",
            "example": "8883219876"
          },
          "fax": {
            "description": "Fax",
            "type": "string",
            "example": "123"
          },
          "gender": {
            "description": "Gender",
            "type": "string",
            "enum": ["M", "F", "m", "f"],
            "example": "M"
          },
          "title": {
            "description": "Title",
            "type": "string",
            "example": "Mr"
          },
          "profile_image_id": {
            "description": "ID of associated Asset representing current profile image",
            "type": "integer",
            "example": 432
          },
          "thumbnail_large": {
            "description": "Thumbnail, large. This is a deprecated field.",
            "type": "string",
            "example": null,
            "deprecated": true
          },
          "thumbnail_medium": {
            "description": "Thumbnail, medium. This is a deprecated field.",
            "type": "string",
            "example": null,
            "deprecated": true
          },
          "thumbnail_small": {
            "description": "Thumbnail, small. This is a deprecated field.",
            "type": "string",
            "example": null,
            "deprecated": true
          },
          "status": {
            "description": "Status of Member",
            "type": "string",
            "enum": ["active", "deleted", "unclaimed", "unconfirmed", "locked"]
          },
          "created_at": {
            "description": "Date/time of created Member",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "last_login_at": {
            "description": "Date/time of Member successful login",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": true
          }
        },
        "type": "object"
      },
      "MemberAsAdmins": {
        "title": "Member As Admins",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "first_name": {
            "description": "First name",
            "type": "string",
            "example": "Buster",
            "nullable": false
          },
          "last_name": {
            "description": "Last name",
            "type": "string",
            "example": "McTest",
            "nullable": false
          },
          "email_address": {
            "description": "Email address",
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "nullable": false
          },
          "thumbnail_large": {
            "description": "Thumbnail, large. This is a deprecated field.",
            "type": "string",
            "example": null,
            "deprecated": true
          },
          "thumbnail_medium": {
            "description": "Thumbnail, medium. This is a deprecated field.",
            "type": "string",
            "example": null,
            "deprecated": true
          },
          "thumbnail_small": {
            "description": "Thumbnail, small. This is a deprecated field.",
            "type": "string",
            "example": null,
            "deprecated": true
          }
        },
        "type": "object"
      },
      "Administrator": {
        "title": "Administrator",
        "properties": {
          "id": {
            "description": "Primary identifier Administrator",
            "type": "integer",
            "example": 4227418,
            "nullable": false
          },
          "actor_id": {
            "description": "ID of Actor in Cerberus",
            "type": "integer",
            "example": 115247,
            "nullable": false
          },
          "assignments_count": {
            "description": "",
            "type": "integer",
            "default": 0,
            "example": 1
          },
          "campaign_assignments_count": {
            "description": "Number of Campaigns assigned to the Role",
            "type": "integer",
            "default": 0,
            "example": 1
          },
          "organization_assignments_count": {
            "description": "Number of Organizations assigned to the Role",
            "type": "integer",
            "default": 0,
            "example": 1
          },
          "roles_count": {
            "description": "Number of Roles that have been assigned against the Scope",
            "type": "integer",
            "default": 0,
            "example": 1
          },
          "created_at": {
            "description": "Date/time of initial Administrators creation",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of Administrators last updated",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "custom_id": {
            "description": "Custom ID. Typically the Member ID prefixed with 'member_'",
            "type": "string",
            "example": "member_4227418",
            "nullable": false
          },
          "directly_assigned": {
            "description": "Indicates if the Role is directly assigned or not.",
            "type": "boolean",
            "example": true
          },
          "Member": {
            "description": "Member",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          }
        },
        "type": "object"
      },
      "Organization": {
        "title": "Organization",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "address": {
            "description": "Organization address line",
            "type": "string",
            "maxLength": 127,
            "example": "123 Classy Dr"
          },
          "are_activity_feeds_disabled": {
            "description": "Whether activity feeds should be enabled for this Organization",
            "type": "boolean",
            "example": false
          },
          "allow_download_annual_receipts": {
            "description": "Control over whether I enable the ability for supporters to download annual donation receipts",
            "type": "boolean",
            "example": false
          },
          "city": {
            "description": "Organization city",
            "type": "string",
            "maxLength": 50,
            "example": "San Diego"
          },
          "country": {
            "description": "Organization country",
            "type": "string",
            "example": "USA"
          },
          "currency": {
            "description": "The currency that the Organization collects transactions in. This is a legacy field.",
            "type": "string",
            "example": "USD"
          },
          "currency_code": {
            "description": "The currency that the Organization collects transactions in",
            "type": "string",
            "example": "USD"
          },
          "description": {
            "description": "Organization Description",
            "type": "string",
            "example": "Helps saves all animals"
          },
          "facebook": {
            "description": "The name of the Organization's facebook page",
            "type": "string",
            "maxLength": 150,
            "example": "save.animals"
          },
          "fixed_fot_percent": {
            "description": "Percentage to be added to fee on top (aka Classy Mode) transactions for the Organization to cover fees unless Campaign specifies differently",
            "type": "number",
            "format": "double",
            "maximum": 15,
            "minimum": 0,
            "example": 5
          },
          "flex_rate_percent": {
            "description": "Percentage Organization elects to be added to donor covered fees calculation to cover any additional costs other than fees.",
            "type": "number",
            "format": "double",
            "maximum": 5,
            "minimum": 0,
            "example": 5
          },
          "has_double_the_donation_enployer_match": {
            "description": "Enable employer matching through Double The Donation. Can only be enabled if the default currency is USD and other employer matching (e.g Donate Double) is not enabled.",
            "type": "boolean",
            "example": false
          },
          "has_employer_match": {
            "description": "Enabled employer matching through Donate Double. Can only be enabled if the default currency is USD.",
            "type": "boolean",
            "example": false
          },
          "is_gift_aid_available": {
            "description": "Flag whether the organization allows donors to opt into gift aid used by the UK",
            "type": "boolean",
            "example": false
          },
          "logo_id": {
            "description": "The asset ID of the organization's logo",
            "type": "string",
            "example": "10"
          },
          "mission": {
            "description": "Organization's mission statement",
            "type": "string",
            "example": "Save all animals and find them a home"
          },
          "name": {
            "description": "Organization Name",
            "type": "string",
            "maxLength": 127,
            "example": "Rescue All Animals"
          },
          "opt_in_wording": {
            "description": "Custom opt in language used to collect Supporters consent to receive communications",
            "type": "string",
            "maxLength": 255,
            "example": "You have agreed to the terms and services."
          },
          "plan_type": {
            "description": "Organization plan name",
            "type": "string",
            "example": "Enterprise"
          },
          "postal_code": {
            "description": "Organization postal code",
            "type": "string",
            "example": "92000",
            "nullable": false
          },
          "restricted_country_information": {
            "description": "Will be populated if the Organization has chosen to restrict transactions from certain countries. Otherwise null",
            "type": "string",
            "example": "UK"
          },
          "resend_receipt_flag": {
            "description": "If true, give the supporters the option to resend the receipts.",
            "type": "boolean",
            "example": true
          },
          "signature_id": {
            "description": "The asset ID of the signature",
            "type": "integer",
            "example": 100
          },
          "signature_name": {
            "description": "The name of the person signing",
            "type": "string",
            "maxLength": 50,
            "example": "Bob Smith"
          },
          "signature_title": {
            "description": "The title of the person signing",
            "type": "string",
            "maxLength": 50,
            "example": "CEO"
          },
          "signature_url": {
            "description": "The title of the person signing",
            "type": "string",
            "example": "https://example.org"
          },
          "state": {
            "description": "Organization state",
            "type": "string",
            "example": "CA"
          },
          "status": {
            "description": "Status of the organization",
            "type": "string",
            "enum": ["trial", "active", "deleted", "cancelled"],
            "example": "active"
          },
          "subscription_plan": {
            "description": "ID of the legacy base subscription plan",
            "type": "integer",
            "enum": [0, 3, 4, 5, 8],
            "deprecated": true
          },
          "thumbnail": {
            "description": "Thumbnail",
            "type": "string",
            "example": "https://examplerta.org/thumbnail.png"
          },
          "timezone_identifier": {
            "description": "The timezone of the organization. This will be used for reporting.",
            "type": "string",
            "example": "UTC",
            "nullable": false
          },
          "twitter": {
            "description": "The twitter handle for the organization",
            "type": "string",
            "maxLength": 50,
            "example": "@animal.rescue"
          },
          "privacy_policy_url": {
            "description": "The Privacy policy URL for the organization",
            "type": "string",
            "maxLength": 150,
            "example": "https://examplerta.org"
          },
          "type": {
            "description": "Organization type",
            "type": "string",
            "example": "npo"
          },
          "url": {
            "description": "The website for the organization",
            "type": "string",
            "example": "https://examplerta.org"
          },
          "welcome_message": {
            "description": "This message appears at the top of the Supporter Hub.",
            "type": "string",
            "maxLength": 100,
            "example": "Thank you for all you do to make our mission possible"
          },
          "created_at": {
            "description": "Date/time of created organization",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of updated organization",
            "type": "string",
            "format": "date-time",
            "example": "2020-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "OrganizationFull": {
        "title": "Organization Full",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Organization"
          },
          {
            "properties": {
              "billing_provider_name": {
                "description": "The name of the currently-active billing configuration provider",
                "type": "string",
                "example": "chargify"
              },
              "canceled_at": {
                "description": "Date/Time organization was canceled",
                "type": "string",
                "example": "2020-04-23T10:25:03Z"
              },
              "classy_fee_percent": {
                "description": "Represents the fees in percent of a Transaction Classy will charge the Organization for each Transaction",
                "type": "integer",
                "example": 5
              },
              "classy_subscription_plan_id": {
                "description": "Primary identifier of the base subscription plan",
                "type": "integer",
                "example": 4
              },
              "contact_first_name": {
                "description": "Contact's first name",
                "type": "string",
                "example": "John"
              },
              "contact_last_name": {
                "description": "Contact's last name",
                "type": "string",
                "example": "Doe"
              },
              "contact_phone": {
                "description": "Contact's phone number",
                "type": "string",
                "example": "619-555-1212"
              },
              "ein": {
                "description": "Tax identification ID, deprecated field",
                "type": "string",
                "example": null
              },
              "email_address": {
                "description": "Contact's email address",
                "type": "string",
                "example": "contact@classy.org"
              },
              "past_due_at": {
                "description": "Date/Time organization is past due",
                "type": "string",
                "example": "2020-04-23T10:25:03Z"
              },
              "payment_provider_id": {
                "description": "Organization Payment Provider ID",
                "type": "integer",
                "example": 23
              },
              "payment_provider_name": {
                "description": "Organization Payment Provider name",
                "type": "string",
                "example": "Classy Pay"
              },
              "plan_name": {
                "description": "Organization plan name",
                "type": "string",
                "example": "My Plan"
              },
              "subscription_plan": {
                "description": "Primary identifier of the legacy base subscription plan",
                "type": "integer",
                "example": 23
              },
              "tax_identifier": {
                "description": "Tax identification number",
                "type": "integer",
                "example": 12345
              }
            },
            "type": "object"
          }
        ]
      },
      "OrganizationFillable": {
        "title": "Organization Fillable",
        "properties": {
          "address": {
            "description": "Organization address line",
            "type": "string",
            "maxLength": 127,
            "example": "123 Classy Dr"
          },
          "are_activity_feeds_disabled": {
            "description": "Whether activity feeds should be enabled for this organization",
            "type": "boolean",
            "example": false
          },
          "city": {
            "description": "Organization city",
            "type": "string",
            "maxLength": 50,
            "example": "San Diego"
          },
          "contact_first_name": {
            "description": "Contact's first name",
            "type": "string",
            "maxLength": 50,
            "example": "John"
          },
          "contact_last_name": {
            "description": "Contact's last name",
            "type": "string",
            "maxLength": 50,
            "example": "Doe"
          },
          "contact_phone": {
            "description": "Contact's phone number",
            "type": "string",
            "example": "619-555-1212"
          },
          "country": {
            "description": "Organization country",
            "type": "string",
            "example": "USA"
          },
          "description": {
            "description": "Organization Description",
            "type": "string",
            "example": "Helps saves all animals"
          },
          "email_address": {
            "description": "Contact's email address",
            "type": "string",
            "maxLength": 127,
            "example": "contact@classy.org"
          },
          "facebook": {
            "description": "The name of the organization's facebook page",
            "type": "string",
            "maxLength": 150,
            "example": "save.animals"
          },
          "fixed_fot_percent": {
            "description": "Percentage to be added to fee on top (aka Classy Mode) transactions for the organization to cover fees unless campaign specifies differently",
            "type": "number",
            "format": "double",
            "maximum": 15,
            "minimum": 0,
            "example": 5
          },
          "flex_rate_percent": {
            "description": "Percentage Organization elects to be added to donor covered fees calculation to cover any additional costs other than fees.",
            "type": "number",
            "format": "double",
            "maximum": 5,
            "minimum": 0,
            "example": 5
          },
          "is_gift_aid_available": {
            "description": "Flag whether the organization allows donors to opt into gift aid used by the UK",
            "type": "boolean",
            "example": false
          },
          "name": {
            "description": "Organization Name",
            "type": "string",
            "maxLength": 127,
            "example": "Rescue All Animals"
          },
          "opt_in_wording": {
            "description": "Custom opt in language used to collect Supporters consent to receive communications",
            "type": "string",
            "maxLength": 255,
            "example": "You have agreed to the terms and services."
          },
          "postal_code": {
            "description": "Organization postal code",
            "type": "string",
            "example": "92000",
            "nullable": false
          },
          "resend_receipt_flag": {
            "description": "If true, give the supporters the option to resend the receipts.",
            "type": "boolean",
            "example": true
          },
          "signature_name": {
            "description": "The name of the person signing",
            "type": "string",
            "maxLength": 50,
            "example": "Bob Smith"
          },
          "signature_title": {
            "description": "The title of the person signing",
            "type": "string",
            "maxLength": 50,
            "example": "CEO"
          },
          "show_donation_stats_on_home_page": {
            "description": "Show dontation stats at home page flag",
            "type": "boolean",
            "example": "true"
          },
          "show_donation_stats_on_rgp": {
            "description": "Show dontation stats at rgp flag",
            "type": "boolean",
            "example": "true"
          },
          "state": {
            "description": "Organization state",
            "type": "string",
            "example": "CA"
          },
          "tax_identifier": {
            "description": "Tax identification ID",
            "type": "string",
            "example": "1234"
          },
          "timezone_identifier": {
            "description": "The timezone of the organization. This will be used for reporting.",
            "type": "string",
            "example": "UTC",
            "nullable": false
          },
          "twitter": {
            "description": "The twitter handle for the organization",
            "type": "string",
            "maxLength": 50,
            "example": "@animal.rescue"
          },
          "privacy_policy_url": {
            "description": "The Privacy policy URL for the organization",
            "type": "string",
            "maxLength": 150,
            "example": "https://examplerta.org"
          },
          "url": {
            "description": "The website for the organization",
            "type": "string",
            "example": "https://examplerta.org"
          },
          "welcome_message": {
            "description": "This message appears at the top of the Supporter Hub.",
            "type": "string",
            "maxLength": 100,
            "example": "Thank you for all you do to make our mission possible",
            "nullable": false
          }
        },
        "type": "object"
      },
      "OrganizationRoles": {
        "title": "Organization Roles",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "scope_type": {
                "description": "Type of Scope",
                "type": "string",
                "enum": ["organization", "campaign"],
                "example": "organization"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/Roles"
          }
        ]
      },
      "OrganizationBranding": {
        "title": "Organization Branding",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandingFillable"
          },
          {
            "properties": {
              "favicon": {
                "description": "URL of favicon image; deprecated/replaced by favicon_asset_url",
                "type": "string",
                "example": null
              },
              "favicon_asset_id": {
                "description": "Primary identifier of associated Asset representing favicon image",
                "type": "integer",
                "example": 1145
              },
              "favicon_asset_url": {
                "description": "URL of favicon image derived from associated Asset",
                "type": "string",
                "example": "https://www.image-url.com/favicon.png"
              },
              "organization_id": {
                "description": "Primary identifier of associated Organization",
                "type": "integer",
                "example": 82364,
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "OrganizationBrandingFillable": {
        "title": "Organization Branding Fillable",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandingFillable"
          },
          {
            "properties": {
              "favicon": {
                "description": "URL of favicon image; deprecated/replaced by favicon_asset_url",
                "type": "string",
                "example": null
              },
              "favicon_asset_id": {
                "description": "Primary identifier of associated Asset representing favicon image",
                "type": "integer",
                "example": 1145
              },
              "favicon_asset_url": {
                "description": "URL of favicon image derived from associated Asset",
                "type": "string",
                "example": "https://www.image-url.com/favicon.png"
              }
            },
            "type": "object"
          }
        ]
      },
      "WhiteLabelInformationFillable": {
        "title": "White Label Information Fillable",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandingFillable"
          },
          {
            "properties": {
              "header_url": {
                "description": "URL of location to which header image links",
                "type": "string",
                "example": "https://www.my-url.com/donate"
              },
              "custom_script": {
                "description": "Raw javascript to be stored",
                "type": "string",
                "example": "script"
              },
              "footer_code": {
                "description": "CSS for rendering footer",
                "type": "string",
                "example": "script"
              },
              "right_column_code": {
                "description": "CSS for rendering right column code",
                "type": "string",
                "example": "script"
              }
            },
            "type": "object"
          }
        ]
      },
      "WhiteLabelInformation": {
        "title": "White Label Information",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BrandingFillable"
          },
          {
            "properties": {
              "custom_script": {
                "description": "Raw javascript to be stored",
                "type": "string",
                "example": "script"
              },
              "footer_code": {
                "description": "CSS for rendering footer",
                "type": "string",
                "example": "script"
              },
              "right_column_code": {
                "description": "CSS for rendering right column code",
                "type": "string",
                "example": "script"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrganizationNotification": {
        "title": "Organization Notification",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 238,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "type": {
            "description": "Type of notifications to be received",
            "type": "string",
            "enum": [
              "transaction",
              "third_party",
              "recurring",
              "fundraising",
              "chargeback",
              "payout_report"
            ],
            "example": "transaction",
            "nullable": false
          },
          "email_address": {
            "description": "Email address who will receive the updates",
            "type": "string",
            "example": "test@classy.org",
            "nullable": false
          },
          "enabled": {
            "description": "Indicates if the Notification is active or not",
            "type": "boolean",
            "example": true,
            "nullable": false
          }
        },
        "type": "object"
      },
      "OrganizationNotificationFillable": {
        "title": "Organization Notification Fillable",
        "properties": {
          "enabled": {
            "description": "Indicates if the Notification is active or not",
            "type": "boolean",
            "example": true,
            "nullable": false
          }
        },
        "type": "object"
      },
      "SecuritySettings": {
        "title": "Security Settings",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "readOnly": true,
            "example": 987,
            "nullable": false
          },
          "securable_id": {
            "description": "Primary identifier of associated securable - Organization or Campaign",
            "type": "integer",
            "readOnly": true,
            "example": 82364,
            "nullable": false
          },
          "securable_type": {
            "description": "Type of Securable that the settings are for.",
            "type": "string",
            "enum": ["organization", "campaign"],
            "readOnly": true,
            "example": "organization",
            "nullable": true
          },
          "recaptcha": {
            "description": "Indicates whether or not captcha should be displayed on checkout pages. If false at Org level, will not display on campaigns.",
            "type": "string",
            "enum": ["ENABLED", "DISABLED"],
            "example": "ENABLED",
            "nullable": false
          },
          "allow_custom_email_content": {
            "description": "Indicates whether or not the content of the emails can be modified",
            "type": "boolean",
            "example": true,
            "nullable": false
          }
        },
        "type": "object"
      },
      "Acknowledgement": {
        "title": "Acknowledgement",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 427,
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "transaction_id": {
            "description": "Primary identifier of associated Transaction",
            "type": "integer",
            "example": 1427264,
            "nullable": false
          },
          "fundraising_entity_id": {
            "description": "Primary identifier of associated Fundraising Entity",
            "type": "integer",
            "example": 444,
            "nullable": true
          },
          "fundraising_entity_type": {
            "description": "Type of associated Fundraising Entity",
            "type": "string",
            "enum": [
              "organization",
              "campaign",
              "fundraisingPage",
              "fundraisingTeam"
            ],
            "example": "organization",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "AcknowledgementFillable": {
        "title": "AcknowledgementFillable",
        "properties": {
          "fundraising_entity_id": {
            "description": "Primary identifier of associated Fundraising Entity",
            "type": "integer",
            "example": 444,
            "nullable": true
          },
          "fundraising_entity_type": {
            "description": "Type of associated Fundraising Entity",
            "type": "string",
            "enum": [
              "organization",
              "campaign",
              "fundraisingPage",
              "fundraisingTeam"
            ],
            "example": "organization",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Activity": {
        "title": "Activity",
        "properties": {
          "business": {
            "$ref": "#/components/schemas/Business"
          },
          "campaign": {
            "$ref": "#/components/schemas/Campaign"
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "designation": {
            "$ref": "#/components/schemas/Designation"
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "fundraising_page_id": {
            "description": "Primary identifier of associated Fundraising Page",
            "type": "integer",
            "example": 2173528
          },
          "fundraising_team_id": {
            "description": "Primary identifier of associated Fundraising Team",
            "type": "integer",
            "example": 209745
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 324,
            "nullable": false
          },
          "link_id": {
            "description": "Primary identifier of the associated Link",
            "type": "integer",
            "example": 111
          },
          "link_text": {
            "description": "String that provides additional details about the activity",
            "type": "string",
            "example": "$12.00"
          },
          "member_id": {
            "description": "Primary identifier of the associated Member",
            "type": "integer",
            "example": 2012
          },
          "organization_id": {
            "description": "Primary identifier of the associated Organization",
            "type": "integer",
            "example": 82364
          },
          "transaction_id": {
            "description": "Primary identifier of the associated Transaction",
            "type": "integer",
            "example": 1427264
          },
          "type": {
            "description": "Type of Activity",
            "type": "string",
            "enum": [
              "supporter_added",
              "blog_post_created",
              "campaign_created",
              "comment_created",
              "status_updated",
              "designation_created",
              "volunteer_opportunity_created",
              "volunteer_added",
              "project_milestone_created",
              "campaign_milestone_created",
              "donation_created",
              "ticket_purchased",
              "admin_note",
              "note",
              "fundraising_page_notification",
              "fundraising_page_created",
              "fundraising_team_created",
              "classy_award_nomination",
              "classy_award_vote",
              "fundraising_team_joined",
              "event_check_in",
              "fundraising_page_requested",
              "classy_onboarding"
            ],
            "example": "supporter_added"
          }
        },
        "type": "object"
      },
      "ActivityComment": {
        "title": "Activity Comment",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 47281,
            "nullable": false
          },
          "activity_id": {
            "description": "Primary identifier of associated Activity",
            "type": "integer",
            "example": 324,
            "nullable": false
          },
          "content": {
            "description": "Content for Activity Comment",
            "type": "string",
            "maxLength": 500,
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "is_admin": {
            "description": "True if User is admin",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-18T12:24:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-18T12:24:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "StaffNotificationSettingFillable": {
        "title": "Staff Notification Setting Fillable",
        "properties": {
          "member_id": {
            "description": "Member who created Staff Notification Setting",
            "type": "integer",
            "example": 2012
          },
          "chargebacks_category": {
            "description": "Receive an email if a Supporter files a chargeback and if it’s won or lost.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "classy_pay_category": {
            "description": "Sent when your Organization's payout report is available",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "fundraising_page_category": {
            "description": "Receive an email when a Supporter creates a Fundraising Page or Team.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "recurring_canceled_category": {
            "description": "Receive an email when a Recurring Plan is canceled.",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "recurring_ended_category": {
            "description": "Receive an email when a Recurring Plan has ended.",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "recurring_failed_category": {
            "description": "Receive an email when a Recurring Donation fails.",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "recurring_modified_category": {
            "description": "Receive an email when a Recurring Plan has been updated.",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "recurring_new_category": {
            "description": "Receive an email when a new Recurring Plan has been created.",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "recurring_successful_category": {
            "description": "Receive an email when a Recurring Donation has been made.",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "transactions_category": {
            "description": "Receive an email for every donation, ticket/registration purchase.",
            "type": "boolean",
            "default": false,
            "example": true
          }
        },
        "type": "object"
      },
      "StaffNotificationSetting": {
        "title": "Staff Notification Setting",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaffNotificationSettingFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Staff Notification Setting",
                "type": "integer",
                "example": "21003",
                "nullable": false
              },
              "created_at": {
                "description": "Date/time of initial Staff Notification Setting creation",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Staff Notification Setting last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "BaseStaffNotificationSettingFillable": {
        "title": "Base Staff Notification Setting Fillable",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "scope_type": {
                "description": "Scope for email notifications",
                "type": "string",
                "enum": [
                  "Organization_Manager",
                  "Campaign_Manager",
                  "Organization_Manager_Campaign_Subscriber"
                ],
                "example": "Organization_Manager"
              },
              "scope_id": {
                "description": "Scope ID will be Organization ID if scope type is Organization_Manager, if scope type is either Campaign_Manager or Organization_Manager_Campaign_Subscriber then scope ID will be Campaign ID",
                "type": "integer",
                "example": "82364",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/StaffNotificationSettingFillable"
          }
        ]
      },
      "BaseStaffNotificationSetting": {
        "title": "Base Staff Notification Setting",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaffNotificationSetting"
          },
          {
            "$ref": "#/components/schemas/BaseStaffNotificationSettingFillable"
          }
        ]
      },
      "OrganizationStaffNotificationSettingFillable": {
        "title": "Organization Staff Notification Setting Fillable",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "scope_type": {
                "description": "Scope for email notifications",
                "type": "string",
                "enum": ["Organization_Manager"],
                "example": "Organization_Manager"
              },
              "scope_id": {
                "description": "Scope ID will be Organization ID as the scope type is Organization_Manager",
                "type": "integer",
                "example": "82364",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/StaffNotificationSettingFillable"
          }
        ]
      },
      "OrganizationStaffNotificationSetting": {
        "title": "Organization Staff Notification Setting",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaffNotificationSetting"
          },
          {
            "$ref": "#/components/schemas/OrganizationStaffNotificationSettingFillable"
          }
        ]
      },
      "CampaignStaffNotificationSettingFillable": {
        "title": "Campaign Staff Notification Setting Fillable",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "scope_type": {
                "description": "Scope for email notifications",
                "type": "string",
                "enum": [
                  "Campaign_Manager",
                  "Organization_Manager_Campaign_Subscriber"
                ],
                "example": "Campaign_Manager"
              },
              "scope_id": {
                "description": "Scope ID will be Campaign ID af scope type is either Campaign_Manager or Organization_Manager_Campaign_Subscriber",
                "type": "integer",
                "example": "227362",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/StaffNotificationSettingFillable"
          }
        ]
      },
      "CampaignStaffNotificationSetting": {
        "title": "Campaign Staff Notification Setting",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StaffNotificationSetting"
          },
          {
            "$ref": "#/components/schemas/CampaignStaffNotificationSettingFillable"
          }
        ]
      },
      "AnalyticsServiceSettings": {
        "title": "Analytics Service Settings",
        "properties": {
          "id": {
            "description": "Primary identifier of Analytics Service Settings",
            "type": "integer",
            "readOnly": true,
            "example": 9364
          },
          "trackable_id": {
            "description": "The ID of the Campaign or Organization whose settings are requested.",
            "type": "integer",
            "example": 82374
          },
          "trackable_type": {
            "description": "The type of trackable ID",
            "type": "string",
            "enum": ["organization", "campaign"],
            "example": "organization"
          },
          "service_name": {
            "description": "Name of Analytics Service",
            "type": "string",
            "enum": [
              "adobe_analytics",
              "facebook_pixel",
              "facebook_tracking",
              "google_adwords",
              "google_analytics_4",
              "google_tag_manager",
              "mixpanel",
              "segment"
            ],
            "example": "google_analytics_4",
            "nullable": false
          },
          "parameters": {
            "description": "Custom parameters for the Analytics Service",
            "type": "object",
            "example": {
              "tracking_id": "UA-212538-1",
              "type": "classic"
            },
            "nullable": true
          },
          "tracked_events": {
            "description": "Details for tracking specific Events",
            "type": "object",
            "example": {
              "fundraising-page/create/complete": true,
              "donation/create/begin": true,
              "donation/create/complete": true,
              "recurring-donation/create/complete": true
            },
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial Analytics Service Settings creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of Analytics Service Settings last updated",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "Assignment": {
        "title": "Assignment",
        "properties": {
          "actor_id": {
            "description": "Primary identifier of associated actor",
            "type": "integer",
            "example": 564,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 9847,
            "nullable": false
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "role_id": {
            "description": "Primary identifier of associated Role",
            "type": "integer",
            "example": 765,
            "nullable": false
          },
          "scope": {
            "description": "The context of the Assignment. A value of null implies access to all related contexts",
            "properties": {
              "type": {
                "description": "Type of assignment scope",
                "type": "string",
                "enum": ["organization", "campaign"],
                "example": "organization"
              },
              "value": {
                "description": "The value of the associated scope, likely the primary key of the associated scope entity",
                "type": "integer",
                "example": 444
              }
            },
            "type": "object"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "OrganizationAssignment": {
        "title": "Organization Assignment",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 9847,
            "nullable": false
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "role_id": {
            "description": "Primary identifier of associated Role",
            "type": "integer",
            "example": 765,
            "nullable": false
          },
          "scope": {
            "description": "The context of the Assignment. A value of null implies access to all related contexts",
            "properties": {
              "created_at": {
                "description": "Date/time of initial record creation",
                "type": "string",
                "format": "date-time",
                "example": "2021-04-23T10:25:03Z",
                "nullable": false
              },
              "id": {
                "description": "The ID of the associated scope",
                "type": "integer",
                "example": 444
              },
              "type": {
                "description": "Type of assignment scope",
                "type": "string",
                "enum": ["organization", "campaign"],
                "example": "organization"
              },
              "value": {
                "description": "The value of the associated scope, likely the primary key of the associated scope entity",
                "type": "integer",
                "example": 444
              },
              "updated_at": {
                "description": "Date/time of last record update",
                "type": "string",
                "format": "date-time",
                "example": "2021-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          },
          "scope_value": {
            "description": "The value of the associated scope, likely the primary key of the associated scope entity",
            "type": "integer",
            "example": 444
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignAssignment": {
        "title": "Campaign Assignment",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 9847,
            "nullable": false
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "role_id": {
            "description": "Primary identifier of associated Role",
            "type": "integer",
            "example": 765,
            "nullable": false
          },
          "scope": {
            "description": "The context of the Assignment. A value of null implies access to all related contexts",
            "properties": {
              "created_at": {
                "description": "Date/time of initial record creation",
                "type": "string",
                "format": "date-time",
                "example": "2021-04-23T10:25:03Z",
                "nullable": false
              },
              "id": {
                "description": "The ID of the associated scope",
                "type": "integer",
                "example": 444
              },
              "type": {
                "description": "Type of assignment scope",
                "type": "string",
                "enum": ["organization", "campaign"],
                "example": "campaign"
              },
              "value": {
                "description": "The value of the associated scope, likely the primary key of the associated scope entity",
                "type": "integer",
                "example": 444
              },
              "updated_at": {
                "description": "Date/time of last record update",
                "type": "string",
                "format": "date-time",
                "example": "2021-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          },
          "scope_value": {
            "description": "The value of the associated scope, likely the primary key of the associated scope entity",
            "type": "integer",
            "example": 444
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "AssignmentFillable": {
        "title": "Assignment Fillable",
        "properties": {
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "role_custom_id": {
            "description": "Custom identifier of associated Role",
            "type": "string",
            "example": "organization_admin"
          },
          "role_id": {
            "description": "Primary identifier of associated Role",
            "type": "integer",
            "example": 765
          }
        },
        "type": "object"
      },
      "ApiApp": {
        "title": "API App",
        "properties": {
          "associated_app": {
            "description": "Integration or partner app associated with this app",
            "type": "string",
            "enum": [
              "amply",
              "double_the_donation",
              "mittun",
              "nuclavis",
              "omatic",
              "rally_corp",
              "salesforce",
              "salesforce_fundraising",
              "zapier"
            ],
            "example": "salesforce",
            "nullable": true
          },
          "client_id": {
            "description": "Primary identifier of associated Client",
            "type": "string",
            "example": "aSn3uWmolgnEnasT",
            "nullable": false
          },
          "client_secret": {
            "description": "Secret related to associated Client",
            "type": "string",
            "example": "w65Nh4nUu7aOP9Jh",
            "nullable": false
          },
          "developer_id": {
            "description": "Primary identifier of associated Developer",
            "type": "integer",
            "example": 9634,
            "nullable": false
          },
          "name": {
            "description": "Name of associated App",
            "type": "string",
            "example": "My App",
            "nullable": false
          },
          "redirect_uri": {
            "description": "URI an internet user must be redirected to after granting permissions to this App",
            "type": "string",
            "example": "http://domain.tld",
            "nullable": false
          },
          "url": {
            "description": "App Url",
            "type": "string",
            "example": "https://www.classy.org"
          }
        },
        "type": "object"
      },
      "ApiAppFillable": {
        "title": "API App fillable",
        "properties": {
          "asset_id": {
            "description": "Primary identifier of associated Asset",
            "type": "integer",
            "example": 237892
          },
          "associated_app": {
            "description": "Integration or partner app associated with this app",
            "type": "string",
            "enum": [
              "amply",
              "double_the_donation",
              "mittun",
              "nuclavis",
              "omatic",
              "rally_corp",
              "salesforce",
              "salesforce_fundraising",
              "zapier"
            ],
            "example": "salesforce",
            "nullable": true
          },
          "name": {
            "description": "Name of associated Developer",
            "type": "string",
            "example": "My App",
            "nullable": false
          },
          "url": {
            "description": "App Url",
            "type": "string",
            "example": "https://www.classy.org"
          },
          "redirect_uri": {
            "description": "URI an internet user must be redirected to after granting permissions to this App",
            "type": "string",
            "example": "http://domain.tld",
            "nullable": false
          }
        },
        "type": "object"
      },
      "BillingConfiguration": {
        "title": "Billing Configuration",
        "properties": {
          "activated_at": {
            "description": "Date/time from which the Organization should be considered active on the specified provider",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "deactivated_at": {
            "description": "Date/time at which the Organization is no longer considered active for the specified provider",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 563745,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 563745,
            "nullable": false
          },
          "provider_id": {
            "description": "Billing Service Provider's unique id. Typically a 32 character hash",
            "type": "string",
            "example": "2c92c0fa62ae0df20162b1d003983c41",
            "nullable": false
          },
          "provider_name": {
            "description": "Name of associated Billing Service Provider",
            "type": "string",
            "enum": ["chargify", "zuora"],
            "example": "chargify",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "BillingConfigurationFillable": {
        "title": "Billing Configuration Fillable",
        "properties": {
          "provider_id": {
            "description": "Billing Service Provider's unique id. Typically a 32 character hash",
            "type": "string",
            "example": "2c92c0fa62ae0df20162b1d003983c41",
            "nullable": false
          },
          "provider_name": {
            "description": "Name of associated Billing Service Provider",
            "type": "string",
            "enum": ["chargify", "zuora"],
            "example": "chargify",
            "nullable": false
          }
        },
        "type": "object"
      },
      "Dedication": {
        "title": "Dedication",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 547,
            "nullable": false
          },
          "type": {
            "description": "Description of Dedication's purpose",
            "type": "string",
            "enum": ["honor", "memory"],
            "example": "honor",
            "nullable": false
          },
          "transaction_id": {
            "description": "Primary identifier of associated Transaction",
            "type": "integer",
            "example": 8734,
            "nullable": false
          },
          "honoree_name": {
            "description": "Honoree's full name",
            "type": "string",
            "example": "Honoree Name"
          },
          "name": {
            "description": "Dedication contact full name",
            "type": "string",
            "example": "John Doe"
          },
          "email_address": {
            "description": "Email Address",
            "type": "string",
            "example": "example@classy.com"
          },
          "address": {
            "description": "Dedication contact address",
            "type": "string",
            "example": "533 F St"
          },
          "city": {
            "description": "Dedication contact city",
            "type": "string",
            "example": "San Diego"
          },
          "state": {
            "description": "Dedication contact state",
            "type": "string",
            "example": "CA"
          },
          "postal_code": {
            "description": "Dedication contact postal code",
            "type": "string",
            "example": "90210"
          },
          "country": {
            "description": "Dedication contact country",
            "type": "string",
            "example": "US"
          },
          "is_gift_amount_msg_included": {
            "description": "Indicates whether the gift amount is to be displayed in communication",
            "type": "boolean",
            "example": true
          },
          "ecard": {
            "$ref": "#/components/schemas/Ecard"
          },
          "ecard_id": {
            "description": "Primary identifier of associated Ecard",
            "type": "integer",
            "example": 4377
          },
          "ecard_message": {
            "description": "Message added to Ecard",
            "type": "string",
            "example": "eCard message"
          },
          "first_name": {
            "description": "Dedication contact first name",
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "description": "Dedication contact last name",
            "type": "string",
            "example": "Doe"
          },
          "honoree_first_name": {
            "description": "Honoree's first name",
            "type": "string",
            "example": "Honoree"
          },
          "honoree_last_name": {
            "description": "Honoree's last name",
            "type": "string",
            "example": "Name"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "DedicationFillable": {
        "title": "DedicationFillable",
        "properties": {
          "type": {
            "description": "Description of Dedication's purpose",
            "type": "string",
            "enum": ["honor", "memory"],
            "example": "honor",
            "nullable": false
          },
          "honoree_name": {
            "description": "Honoree's full name",
            "type": "string",
            "example": "Honoree Name"
          },
          "name": {
            "description": "Dedication contact full name",
            "type": "string",
            "example": "John Doe"
          },
          "email_address": {
            "description": "Email Address",
            "type": "string",
            "example": "example@classy.com"
          },
          "address": {
            "description": "Dedication contact address",
            "type": "string",
            "example": "533 F St"
          },
          "city": {
            "description": "Dedication contact city",
            "type": "string",
            "example": "San Diego"
          },
          "state": {
            "description": "Dedication contact state",
            "type": "string",
            "maxLength": 50,
            "example": "CA"
          },
          "postal_code": {
            "description": "Dedication contact postal code",
            "type": "string",
            "example": "90210"
          },
          "country": {
            "description": "Dedication contact country",
            "type": "string",
            "maxLength": 2,
            "example": "US"
          },
          "is_gift_amount_msg_included": {
            "description": "Indicates whether the gift amount is to be displayed in communication",
            "type": "boolean",
            "example": true
          },
          "ecard_message": {
            "description": "Message added to Ecard",
            "type": "string",
            "example": "eCard message"
          },
          "first_name": {
            "description": "Dedication contact first name",
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "description": "Dedication contact last name",
            "type": "string",
            "example": "Doe"
          },
          "honoree_first_name": {
            "description": "Honoree's first name",
            "type": "string",
            "example": "Honoree"
          },
          "honoree_last_name": {
            "description": "Honoree's last name",
            "type": "string",
            "example": "Name"
          }
        },
        "type": "object"
      },
      "CreditAdjustment": {
        "title": "Credit Adjustment",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 6743,
            "nullable": false
          },
          "amount": {
            "description": "The amount of the Credit Adjustment.  Positive values add credit to a Fundraising Entity.  Negative values remove credit",
            "type": "integer",
            "format": "float",
            "example": -40,
            "nullable": false
          },
          "metadata": {
            "description": "Arbitrary JSON metadata",
            "type": "string",
            "example": "{'foo':'bar'}"
          },
          "memo": {
            "description": "An arbitrary memo about the Credit Adjustment.",
            "type": "string",
            "maxLength": 255,
            "example": "Credit applied from previous fundraising event."
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          },
          "creditable_id": {
            "description": "Primary identifier of associated Creditable",
            "type": "integer",
            "example": 2173528,
            "nullable": false
          },
          "creditable_type": {
            "description": "Type of associated Creditable",
            "type": "string",
            "enum": ["campaign", "fundraising_page", "fundraising_team"],
            "example": "fundraising_page",
            "nullable": false
          },
          "amount_received": {
            "description": "The amount of the Credit Adjustment received",
            "type": "integer",
            "format": "float",
            "example": -40
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362
          }
        },
        "type": "object"
      },
      "CreditAdjustmentFillable": {
        "title": "Credit Adjustment Fillable",
        "properties": {
          "amount": {
            "description": "The amount of the Credit Adjustment.  Positive values add credit to a Fundraising Entity.  Negative values remove credit",
            "type": "integer",
            "format": "float",
            "example": -40,
            "nullable": false
          },
          "metadata": {
            "description": "Arbitrary JSON metadata",
            "type": "string",
            "example": "{'foo':'bar'}"
          },
          "memo": {
            "description": "An arbitrary memo about the Credit Adjustment.",
            "type": "string",
            "maxLength": 255,
            "example": "Credit applied from previous fundraising event."
          }
        },
        "type": "object"
      },
      "MatchedTransaction": {
        "title": "Matched Transaction",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 6621,
            "nullable": false
          },
          "source_transaction_id": {
            "description": "Primary identifier of source Transaction",
            "type": "integer",
            "example": 1427264,
            "nullable": false
          },
          "status": {
            "description": "Status of Matched Transaction",
            "type": "string",
            "enum": ["confirmed", "unconfirmed", "rejected", "closed"],
            "example": "confirmed"
          },
          "matched_name": {
            "description": "The entity that is expected to perform the matching transaction payment",
            "type": "string",
            "maxLength": 255,
            "example": "ABC Widget Inc."
          },
          "amount": {
            "description": "The amount that should be matched against this Transaction.  Does not have to equal the amount of the original Transaction",
            "type": "integer",
            "example": 500,
            "nullable": false
          },
          "metadata": {
            "description": "Arbitrary JSON metadata",
            "type": "string",
            "example": "{foo:bar}"
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362
          },
          "type": {
            "description": "Type of Matched Transaction",
            "type": "string",
            "enum": ["campiagn", "fundraisingPage", "fundraisingTeam"],
            "example": "campaign"
          },
          "amount_received": {
            "description": "The amount recieved for this Matched Transaction",
            "type": "integer",
            "example": 500
          }
        },
        "type": "object"
      },
      "MatchedTransactionFillable": {
        "title": "Matched Transaction Fillable",
        "properties": {
          "status": {
            "description": "Status of Matched Transaction",
            "type": "string",
            "enum": ["confirmed", "unconfirmed", "rejected", "closed"],
            "example": "confirmed"
          },
          "matched_name": {
            "description": "The entity that is expected to perform the Matching Transaction payment",
            "type": "string",
            "maxLength": 255,
            "example": "ABC Widget Inc."
          },
          "amount": {
            "description": "The amount that should be matched against this Transaction.  Does not have to equal the amount of the original Transaction",
            "type": "integer",
            "example": 500,
            "nullable": false
          },
          "metadata": {
            "description": "Arbitrary JSON metadata",
            "type": "string",
            "example": "{foo:bar}"
          }
        },
        "type": "object"
      },
      "GrossAdjustment": {
        "title": "Gross Adjustment",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 987,
            "nullable": false
          },
          "adjustable_id": {
            "description": "Primary identifier of the transaction or recurring plan that had its gross amount adjusted",
            "type": "integer",
            "example": 438475,
            "nullable": true
          },
          "adjustable_type": {
            "description": "Type of Adjustable that had its gross amount adjusted.",
            "type": "string",
            "enum": [
              "transaction",
              "recurring",
              "donation_cart",
              "registration_cart"
            ],
            "example": "donation",
            "nullable": true
          },
          "flex_rate_percent": {
            "description": "Percentage set by org to be added when donor chooses to cover fees",
            "type": "number",
            "format": "float",
            "maximum": 5,
            "minimum": 0,
            "example": "2"
          },
          "application_fee_percent": {
            "description": "Percentage charged by classy per transaction",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": "2"
          },
          "processor_fee_percent": {
            "description": "Percentage charged by proceessor per transaction",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": "2"
          },
          "processor_fee_flat": {
            "description": "Percentage charged by proceessor per transaction",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "example": "2"
          },
          "raw_initial_gross_amount": {
            "description": "Raw Initial amount shown to the user before gross adjustment",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "100"
          },
          "raw_flex_rate_amount": {
            "description": "Raw Flat amount associated with the flex rate percent",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "42"
          },
          "raw_application_fee_amount": {
            "description": "Raw Flat amount associated with the application fee",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "42"
          },
          "raw_processor_fee_amount": {
            "description": "Raw Flat amount associated with the processor fee",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "42"
          },
          "initial_gross_amount": {
            "description": "Initial amount shown to the user before gross adjustment (normalized value)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "100"
          },
          "flex_rate_amount": {
            "description": "Flat amount associated with the flex rate percent (normalized value)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "42"
          },
          "application_fee_amount": {
            "description": "Flat amount associated with the application fee (normalized value)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "42"
          },
          "processor_fee_amount": {
            "description": "Flat amount associated with the processor fee (normalized value)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": "42"
          }
        },
        "type": "object"
      },
      "HardCreditTransfer": {
        "title": "Hard Credit Transfer",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 6579,
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012
          },
          "transaction_id": {
            "description": "Primary identifier of associated Transaction",
            "type": "integer",
            "example": 1427264,
            "nullable": false
          },
          "from_creditable_type": {
            "description": "Type of Fundraising Entity from which the Transaction was transferred",
            "type": "string",
            "enum": ["campaign", "fundraising_page", "fundraising_team"],
            "example": "fundraising_page",
            "nullable": false
          },
          "from_creditable_id": {
            "description": "Primary identifier of associated Fundraising Entity",
            "type": "integer",
            "example": 2173528,
            "nullable": false
          },
          "to_creditable_type": {
            "description": "Type of Fundraising Entity to which the Transaction was transferred",
            "type": "string",
            "enum": ["campaign", "fundraising_page", "fundraising_team"],
            "example": "fundraising_team",
            "nullable": false
          },
          "to_creditable_id": {
            "description": "Primary identifier of associated Fundraising Entity",
            "type": "integer",
            "example": 209745,
            "nullable": false
          },
          "note": {
            "description": "Memo describing details of / reason for Transfer",
            "type": "string",
            "maxLength": 255,
            "example": "Fixed an error"
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "HardCreditTransferFillable": {
        "title": "Hard Credit Transfer Fillable",
        "properties": {
          "note": {
            "description": "Memo describing details of / reason for Transfer",
            "type": "string",
            "maxLength": 255,
            "example": "Fixed an error"
          },
          "to": {
            "properties": {
              "type": {
                "description": "Type of page",
                "type": "string",
                "enum": ["campaign", "fundraising_page", "fundraising_team"],
                "example": "campaign"
              },
              "id": {
                "description": "ID of the page",
                "type": "integer",
                "example": 227362
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "OfflinePaymentInfo": {
        "title": "Offline Payment Info",
        "properties": {
          "check_number": {
            "description": "Check number for a check payment type",
            "type": "string",
            "maxLength": 32,
            "example": 456,
            "nullable": true
          },
          "description": {
            "description": "Additional offline donation details",
            "type": "string",
            "maxLength": 255,
            "example": "Lorem ipsum whatever",
            "nullable": true
          },
          "payment_type": {
            "description": "Payment type for the offline donation",
            "type": "string",
            "enum": [
              "cash",
              "check",
              "cc",
              "pledge",
              "other",
              "sponsor",
              "stock_donations",
              "corporate_match",
              "donation_match",
              "eft",
              "crypto"
            ],
            "example": "cash",
            "nullable": true
          },
          "sync_third_party": {
            "description": "Sync this offline transaction into third party products such as salesforce",
            "type": "boolean",
            "example": false,
            "nullable": true
          }
        },
        "type": "object"
      },
      "PaymentProviderConfiguration": {
        "title": "Payment Provider Configuration",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 7112,
            "nullable": false
          },
          "status": {
            "description": "Status of the Payment Provider Configuration",
            "type": "string",
            "enum": ["hidden", "active", "inactive"],
            "example": "active",
            "nullable": false
          },
          "api_app_id": {
            "description": "Primary identifier of Api App",
            "type": "integer",
            "example": 561
          },
          "payment_provider_id": {
            "description": "Identifier of Payment Provider type",
            "type": "integer",
            "enum": [0, 1, 2, 3, 4, 5, 6],
            "example": 1,
            "nullable": false
          },
          "payment_provider_name": {
            "description": "Name that payment_provider_id maps to",
            "type": "string",
            "enum": [
              "WePay",
              "PayPal",
              "Paypal External",
              "Authorize.net",
              "WePay",
              "Authorize.net DPM",
              "Network for Good",
              "Classy Pay"
            ],
            "example": "WePay"
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "api_endpoint": {
            "description": "URL of Payment Provider API",
            "type": "string",
            "example": "http://www.google.com"
          },
          "api_username": {
            "description": "Username/Key credential for Payment Provider API",
            "type": "string",
            "example": "TestKey"
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "PaymentProviderConfigurationFillable": {
        "title": "Payment Provider Configuration Fillable",
        "properties": {
          "status": {
            "description": "Status of the Payment Provider Configuration",
            "type": "string",
            "enum": ["hidden", "active", "inactive"],
            "example": "active",
            "nullable": false
          },
          "api_app_id": {
            "description": "Primary identifier of Api App",
            "type": "integer",
            "example": 561
          },
          "payment_provider_id": {
            "description": "Identifier of Payment Provider type",
            "type": "integer",
            "enum": [0, 1, 2, 3, 4, 5, 6],
            "example": 1,
            "nullable": false
          },
          "api_endpoint": {
            "description": "URL of Payment Provider API",
            "type": "string",
            "example": "http://www.google.com"
          },
          "api_username": {
            "description": "Username/Key credential for Payment Provider API",
            "type": "string",
            "example": "TestKey"
          },
          "api_password": {
            "description": "Password/Secret credential for Payment Provider API",
            "type": "string",
            "example": "P@ssW0rd1"
          },
          "api_signature": {
            "description": "Additional credential value for Payment Provider API",
            "type": "string",
            "example": "Djiwb@33sj"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "example": "example@classy.org"
          }
        },
        "type": "object"
      },
      "ClassySubscriptionPlan": {
        "title": "Classy Subscription Plan",
        "properties": {
          "comments": {
            "description": "Comments associated with Plan",
            "type": "string",
            "example": "Example comment"
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "ended_at": {
            "description": "Date/time of initial record ended",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 103,
            "nullable": false
          },
          "name": {
            "description": "Name of Plan",
            "type": "string",
            "example": "Pro (2015)",
            "nullable": false
          },
          "plan_features_id": {
            "description": "Primary identifier of associated Plan Features",
            "type": "integer",
            "example": 3452,
            "nullable": false
          },
          "started_at": {
            "description": "Date/time of initial record started",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "PlanFeatures": {
        "title": "Plan Features",
        "properties": {
          "ach_account_and_routing": {
            "description": "Specifies whether the associated Organization can process ACH through manually entered account and routing numbers",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ach_processing": {
            "description": "Specifies whether the associated Organization can process ACH transactions",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "api_access": {
            "description": "Specifies whether the associated Organization can access the Classy API",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "campaign_templating": {
            "description": "Specifies whether the associated Organization can access Campaign Templating",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "connected_accounts": {
            "description": "Specifies whether the associated Organization is connected to other Organizations",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "cctype_crowdfunding": {
            "description": "Specifies whether the associated Organization can create and maintain crowdfunding Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ctype_donation": {
            "description": "Specifies whether the associated Organization can create and maintain Donation Page Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ctype_fund_for_entry": {
            "description": "Specifies whether the associated Organization can create and maintain fundraise-for-entry Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ctype_peer_to_peer": {
            "description": "Specifies whether the associated Organization can create and maintain peer-to-peer Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ctype_reg_w_fund": {
            "description": "Specifies whether the associated Organization can create and maintain registration-with-fundraising Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ctype_registration": {
            "description": "Specifies whether the associated Organization can create and maintain registration Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ctype_ticketed": {
            "description": "Specifies whether the associated Organization can create and maintain ticketed Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ctype_virtual": {
            "description": "Specifies whether the associated Organization can create and maintain virtual Campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "designations": {
            "description": "Specifies whether the associated Organization can create Designations",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "domain_masking": {
            "description": "Specifies whether the associated Organization can enable Domain mMsking for their Classy pages",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "donate_double": {
            "description": "Allow Organization to enable Double the Donation integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "ecard_dedications": {
            "description": "Specifies whether the associated Organization has ecard Dedications enabled",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "email_contacts": {
            "description": "Allow Organization to send emails to Supporters",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_constant_contact": {
            "description": "Specifies whether the associated Organization can enable Constant Contact integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_double_the_donation": {
            "description": "Specifies whether the associated Organization can enable Double The Donation integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_dynamics": {
            "description": "Specifies whether the associated Organization can enable the Microsoft Dynamics integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_facebook": {
            "description": "Specifies whether the associated Organization can set up Facebook for Fundraising Pages creation on Facebook",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_meta_capi": {
            "description": "Specifies whether the associated Organization can configure a Meta CAPI integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_google_analytics": {
            "description": "Specifies whether the associated Organization can configure a Google Analytics integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_mailchimp": {
            "description": "Specifies whether the associated Organization can enable Mailchimp integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_raisers_edge": {
            "description": "Specifies whether the associated Organization can use Raiser's Edge for Classy",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_salesforce": {
            "description": "Specifies whether the associated Organization can enable the Salesforce integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_salesforce_advanced": {
            "description": "Specifies whether the associated Organization can enable the advanced Salesforce integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_zapier": {
            "description": "Specifies whether the associated Organization can enable the Zapier integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "int_salesforce_fundraising": {
            "description": "Specifies whether the associated Organization can enable the Salesforce nonprofit cloud integration",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "intelligent_ask_amounts": {
            "description": "Specifies whether the associated Organization can enable intelligent ask amounts",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "international_processing": {
            "description": "Specifies whether the associated Organization can set up and maintain multiple payment processors and enable international charges",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "live_agent": {
            "description": "Specifies whether the associated Organization can enable the live agent",
            "type": "boolean",
            "default": false,
            "example": false,
            "nullable": false
          },
          "live_chat": {
            "description": "Specifies whether the associated Organization can enable the live chat",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "max_admins": {
            "description": "Maximum number of admins that can access the organization's dashboard",
            "type": "integer",
            "minimum": 0,
            "example": 1,
            "nullable": false
          },
          "max_total_admins": {
            "description": "Number of total admins",
            "type": "integer",
            "example": 1
          },
          "max_campaigns": {
            "description": "Specifies the maximum number of active Campaigns that the Organization can have at a time",
            "type": "integer",
            "minimum": 0,
            "example": 1,
            "nullable": false
          },
          "max_zero_fee_donation_pages": {
            "description": "Specifies the maximum number of Donation pages that incur no Classy Transaction Fees",
            "type": "integer",
            "minimum": 0,
            "example": 1,
            "nullable": false
          },
          "org_dashboard": {
            "description": "Specifies whether the associated Organization can enable the dashboard",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "org_level_reporting": {
            "description": "Specifies whether the associated Organization can enable level reporting",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "org_sso": {
            "description": "Specifies whether the associated Organization is federated sso",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "pp_authorize": {
            "description": "Specifies whether the associated Organization can enable an Authorize.net payment processor",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "pp_braintree": {
            "description": "Specifies whether the associated Organization can enable a Braintree payment processor",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "pp_paypal": {
            "description": "Specifies whether the associated Organization can enable a PayPal payment processor",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "pp_cryptogiving": {
            "description": "Specifies whether the associated Organization can enable a crypto payment processor, such as Coinbase",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "pp_stripe": {
            "description": "Specifies whether the associated Organization can enable a Stripe payment processor",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "pp_wepay": {
            "description": "Specifies whether the associated Organization can enable a WePay payment processor",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "pro_designer": {
            "description": "Specifies whether the associated Organization can access the Pro Designer",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "recurring_donations": {
            "description": "Specifies whether the associated Organization can enable recurring donations",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "rollup_reporting": {
            "description": "Specifies whether the Organization can be included within roll-up reporting functionality",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "seo_keywords": {
            "description": "N/A",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "sponsor_matching": {
            "description": "Enabling Organization to allow the creation of Donation Matching Plans",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_advanced_features": {
            "description": "Allows for enterprise-level virtual event features (e.g. multiple stages)",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_advanced_reporting": {
            "description": "Allows for advanced reporting features for all auction-type events (e.g. recording transcripts)",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_auctions": {
            "description": "Allows for auctions to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_auction_packages": {
            "description": "Allows for auction packages to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_bulk_attendees": {
            "description": "Allows for bulk attendees to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_bulk_auction_items": {
            "description": "Allows for bulk auction items to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_customization": {
            "description": "Allows for advanced customization features for all auction-type events (e.g. custom emails)",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_group_registration": {
            "description": "Allows for group registration to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_max_admins": {
            "description": "Maximum number of admin assignments for Classy Live events (not including organization admins)",
            "type": "integer",
            "minimum": 0,
            "example": 1,
            "nullable": true
          },
          "virtual_max_duration_hours": {
            "description": "Maximum number of hours for Classy Live virtual events",
            "type": "integer",
            "minimum": 0,
            "example": 24,
            "nullable": true
          },
          "virtual_max_event_attendees": {
            "description": "Maximum number of event attendees for Classy Live virtual events",
            "type": "integer",
            "minimum": 0,
            "example": 100,
            "nullable": true
          },
          "virtual_max_events_per_year": {
            "description": "Maximum number of events per year for Classy Live organization",
            "type": "integer",
            "minimum": 0,
            "example": 12,
            "nullable": true
          },
          "virtual_max_rooms": {
            "description": "Maximum number of breakout rooms allowed for each Classy Live event",
            "type": "integer",
            "minimum": 0,
            "example": 10,
            "nullable": true
          },
          "virtual_max_room_attendees": {
            "description": "Maximum number of attendees allowed per breakout room in Classy Live event",
            "type": "integer",
            "minimum": 0,
            "example": 10,
            "nullable": true
          },
          "virtual_max_stages": {
            "description": "Maximum number of stages allowed for each Classy Live event",
            "type": "integer",
            "minimum": 0,
            "example": 5,
            "nullable": true
          },
          "virtual_mobile_app": {
            "description": "Allows for mobile app to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_seating": {
            "description": "Allows for seating to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_support_onsite": {
            "description": "Allows for support onsite to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_support_phone": {
            "description": "Allows for support phone to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_support_remote": {
            "description": "Allows for support remote to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_text_to_donate": {
            "description": "Allows for text to donate to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "virtual_venue": {
            "description": "Allows for venue to be enabled for virtual campaigns",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "zero_fee_donation_page": {
            "description": "Allow Organization to create a zero fee Campaign",
            "type": "boolean",
            "example": false,
            "nullable": false
          }
        },
        "type": "object"
      },
      "RecurringDonationPlan": {
        "title": "Recurring Donation Plan",
        "properties": {
          "address": {
            "description": "Line one of Billing address",
            "type": "string",
            "example": "533 F Street"
          },
          "address2": {
            "description": "Line two of Billing address",
            "type": "string",
            "example": "Unit 26"
          },
          "applied_fot_percent": {
            "description": "The percentage to be added to all fee on top (aka Classy Mode) transactions created for this plan",
            "type": "number",
            "format": "float",
            "example": 4
          },
          "campaign_id": {
            "description": "ID for Recurring Donation Plan's Campaign",
            "type": "integer",
            "example": 227362
          },
          "canceled_at": {
            "description": "Datetime representing cancellation time(can be null)",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "cancel_by": {
            "description": "Type of user that cancelled Recurring Donation Plan",
            "type": "string",
            "default": null,
            "enum": ["admin", "supporter"],
            "example": "supporter"
          },
          "cancel_reason_code": {
            "description": "Cancellation reason code",
            "type": "string",
            "default": null,
            "example": "1"
          },
          "cancel_reason_text": {
            "description": "Cancellation reason for Recurring donation Plan",
            "type": "string",
            "default": null,
            "example": "Can no longer afford it"
          },
          "cc_card_exp": {
            "description": "Expiration date for the credit card used",
            "type": "string",
            "example": "201204"
          },
          "cc_last_four": {
            "description": "Last four digits of the credit card used",
            "type": "string",
            "example": "1223"
          },
          "ach_last_four": {
            "description": "If the payment type is ACH, the last 4 digits of the ACH transaction is stored",
            "type": "integer",
            "example": "6789"
          },
          "cc_type": {
            "description": "Type of credit card used",
            "type": "string",
            "example": "Visa"
          },
          "city": {
            "description": "Billing city",
            "type": "string",
            "example": "San Diego"
          },
          "company_name": {
            "description": "Company of recurring donator",
            "type": "string",
            "example": "Test Company"
          },
          "country": {
            "description": "Billing country",
            "type": "string",
            "example": "US"
          },
          "created_at": {
            "description": "Recurring Donation Plan created date",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "currency_code": {
            "description": "Recurring Donation Plan created date",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "designation_id": {
            "description": "ID for the Designation the Transactions created from the recurring Donation Plan will be allocated",
            "type": "number",
            "example": 34672
          },
          "donation_amount": {
            "description": "Recurring Donation amount in the organization's currency",
            "type": "string",
            "example": "1.00",
            "nullable": false
          },
          "failed_at": {
            "description": "Datetime representing the last time the recurring Donation failed",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "fee_on_top": {
            "description": "Flag describing if the recurring donation covers fees (classymode)",
            "type": "boolean",
            "example": true
          },
          "first_name": {
            "description": "Donator's First Name",
            "type": "string",
            "example": "John"
          },
          "frequency": {
            "description": "Rate at which a recurring transaction against this plan is made",
            "type": "string",
            "enum": [
              "bi-weekly",
              "bi-monthly",
              "daily",
              "monthly",
              "one-time",
              "quarterly",
              "semi-annually",
              "weekly",
              "yearly"
            ],
            "example": "bi-weekly",
            "nullable": false
          },
          "fundraising_page_id": {
            "description": "Fundraising Page ID of recurring donator",
            "type": "integer",
            "example": 2173528
          },
          "fundraising_team_id": {
            "description": "Fundraising Team ID of recurring donator",
            "type": "integer",
            "example": 209745
          },
          "id": {
            "description": "ID of Recurring Donation Plan",
            "type": "integer",
            "example": 85456
          },
          "is_anonymous": {
            "description": "Flag determining if the Transactions should be anonymized",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "hide_amount": {
            "description": "Flag determining if the Transactions amount should be anonymized",
            "type": "boolean",
            "example": true
          },
          "is_gift_aid": {
            "description": "Flag whether the Donor opts into gift aid used by the UK or not. Can only be set if the Organization allows it",
            "type": "boolean",
            "example": false
          },
          "is_paused": {
            "description": "Flag which indicates if the recurring donation is paused. Can be set by Admin or the donor",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "last_name": {
            "description": "Last name of recurring Donator",
            "type": "string",
            "example": "Doe"
          },
          "member_id": {
            "description": "Member ID of recurring donatior",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "next_processing_date": {
            "description": "Next recurring charge date for recurring plan",
            "type": "string",
            "format": "date",
            "example": "2016-01-01"
          },
          "organization_id": {
            "description": "ID of Organization receiving the recurring donation",
            "type": "integer",
            "example": 82364
          },
          "pause_until": {
            "description": "This attribute indicates the date till the recurring donation plan is Paused",
            "type": "string",
            "format": "date",
            "example": "2023-04-01",
            "nullable": true
          },
          "plan_paused_on_date": {
            "description": "This attribute holds the date on which the recurring donation plan was Paused",
            "type": "string",
            "format": "date",
            "example": "2023-01-01",
            "nullable": true
          },
          "payment_gateway": {
            "description": "Payment processor. (Underlying payment processor for Classy Pay)",
            "type": "string",
            "example": "PayPal"
          },
          "payment_provider_configuration_name": {
            "description": "The Recurring Donation Plan Payment Provider",
            "type": "string",
            "example": "Classy Pay"
          },
          "payment_type": {
            "description": "Payment type of recurring",
            "type": "string",
            "enum": ["Credit Card", "ACH", "Paypal"],
            "example": "ACH"
          },
          "postal_code": {
            "description": "Billing postal code",
            "type": "string",
            "example": "92101"
          },
          "pp_plan_id": {
            "description": "ID of the Payment provider",
            "type": "integer",
            "example": 7112
          },
          "raw_currency_code": {
            "description": "The currency code of the plan's transactions. Cannot be updated after being set",
            "type": "string",
            "example": "JPY"
          },
          "raw_donation_amount": {
            "description": "The value donated, in the raw currency",
            "type": "number",
            "format": "float",
            "example": 50
          },
          "recur_until": {
            "description": "Recurring plan end date",
            "type": "string",
            "format": "date",
            "example": "2021-01-01",
            "nullable": true
          },
          "schedule": {
            "description": "JSON information specifying schedule for recurring transaction creation",
            "properties": {
              "mmdd": {
                "description": "Two digits for month and two for day",
                "type": "string",
                "example": "0109"
              },
              "month": {
                "description": "Month name",
                "type": "string",
                "example": "January"
              },
              "day": {
                "description": "Day number",
                "type": "integer",
                "example": 9
              }
            },
            "type": "object"
          },
          "started_at": {
            "description": "Start time for recurring donations",
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T12:00:00+0000",
            "nullable": false
          },
          "state": {
            "description": "Billing state",
            "type": "string",
            "example": "CA"
          },
          "status": {
            "description": "Status of Recurring Donation Plan",
            "type": "string",
            "enum": [
              "active",
              "attempted",
              "canceled",
              "draft",
              "failed",
              "failing",
              "ended",
              "paused"
            ],
            "example": "active",
            "nullable": false
          },
          "supporter_id": {
            "description": "ID of the Supporter that associates the Member and the Organization",
            "type": "integer",
            "example": 5827
          },
          "timezone_identifier": {
            "description": "Identifier of timezone against which recurring charges will be made",
            "type": "string",
            "example": "UTC",
            "nullable": false
          },
          "updated_at": {
            "description": "Last modification date",
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T13:00:00+0000"
          },
          "is_donor_covered_fee": {
            "description": "Flag if the rdp is a donor covered fee or not",
            "type": "boolean",
            "example": true
          },
          "raw_initial_gross_amount": {
            "description": "Amount before any fee adjustments where added",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "raw_adjustment_amount": {
            "description": "Total fee amount assessed",
            "type": "number",
            "format": "float",
            "example": 0.25
          },
          "dcf_enabled": {
            "description": "Flag that indicate if the campaign has dcf enable",
            "type": "boolean",
            "default": null,
            "example": true
          },
          "dcf_allowed": {
            "description": "Flag that indicate if the campaign is allowed to have dcf",
            "type": "boolean",
            "default": null,
            "example": true
          },
          "classy_mode_enabled": {
            "description": "Flag that indicate if the campaign has classy mode enable",
            "type": "boolean",
            "default": null,
            "example": true
          },
          "effective_fixed_fot_percent": {
            "description": "Number of fixed fee on top percent",
            "type": "number",
            "default": 0,
            "example": 5
          }
        },
        "type": "object"
      },
      "RecurringDonationPlanFillable": {
        "title": "Recurring Donation Plan Fillable",
        "properties": {
          "address": {
            "description": "Line one of Billing address",
            "type": "string",
            "example": "533 F Street"
          },
          "address2": {
            "description": "Line two of Billing address",
            "type": "string",
            "example": "Unit 26"
          },
          "applied_fot_percent": {
            "description": "The percentage to be added to all fee on top (aka Classy Mode) transactions created for this plan",
            "type": "number",
            "format": "float",
            "example": 4
          },
          "city": {
            "description": "Billing city",
            "type": "string",
            "example": "San Diego"
          },
          "country": {
            "description": "Billing country",
            "type": "string",
            "example": "US"
          },
          "designation_id": {
            "description": "ID for the Designation the Transactions created from the recurring Donation Plan will be allocated",
            "type": "number",
            "example": 34672
          },
          "first_name": {
            "description": "Donator's first name",
            "type": "string",
            "example": "John"
          },
          "frequency": {
            "description": "Rate at which a recurring transaction against this plan is made",
            "type": "string",
            "enum": [
              "bi-weekly",
              "bi-monthly",
              "daily",
              "monthly",
              "one-time",
              "quarterly",
              "semi-annually",
              "weekly",
              "yearly"
            ],
            "example": "bi-weekly",
            "nullable": false
          },
          "is_anonymous": {
            "description": "Flag determining if the Transactions should be anonymized",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "hide_amount": {
            "description": "Flag determining if the Transactions amount should be anonymized",
            "type": "boolean",
            "example": true
          },
          "is_gift_aid": {
            "description": "Flag whether the Donor opts into gift aid used by the UK or not. Can only be set if the Organization allows it",
            "type": "boolean",
            "example": false
          },
          "is_paused": {
            "description": "Flag which indicates if the recurring donation is paused. Can be set by Admin or the donor",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "last_name": {
            "description": "Last name of recurring Donator",
            "type": "string",
            "example": "Doe"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "next_processing_date": {
            "description": "Next recurring charge date for recurring plan",
            "type": "string",
            "format": "date",
            "example": "2016-01-01"
          },
          "pause_until": {
            "description": "This attribute indicates the date till the recurring donation plan is Paused",
            "type": "string",
            "format": "date",
            "example": "2023-04-01",
            "nullable": true
          },
          "plan_paused_on_date": {
            "description": "This attribute holds the date on which the recurring donation plan was Paused",
            "type": "string",
            "format": "date",
            "example": "2023-01-01",
            "nullable": true
          },
          "payment_gateway": {
            "description": "Payment processor. (Underlying payment processor for Classy Pay)",
            "type": "string",
            "example": "PayPal"
          },
          "postal_code": {
            "description": "Billing postal code",
            "type": "string",
            "example": "92101"
          },
          "raw_donation_amount": {
            "description": "The value donated, in the raw currency",
            "type": "number",
            "format": "float",
            "example": 50
          },
          "recur_until": {
            "description": "Recurring plan end date",
            "type": "string",
            "format": "date",
            "example": "2021-01-01",
            "nullable": true
          },
          "schedule": {
            "description": "JSON information specifying schedule for recurring transaction creation",
            "properties": {
              "mmdd": {
                "description": "Two digits for month and two for day",
                "type": "string",
                "example": "0109"
              },
              "month": {
                "description": "Month name",
                "type": "string",
                "example": "January"
              },
              "day": {
                "description": "Day number",
                "type": "integer",
                "example": 9
              }
            },
            "type": "object"
          },
          "started_at": {
            "description": "Start time for recurring donations",
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T12:00:00+0000",
            "nullable": false
          },
          "state": {
            "description": "Billing state",
            "type": "string",
            "example": "CA"
          },
          "status": {
            "description": "Status of Recurring Donation Plan",
            "type": "string",
            "enum": [
              "active",
              "attempted",
              "canceled",
              "draft",
              "failed",
              "failing",
              "ended",
              "paused"
            ],
            "example": "active",
            "nullable": false
          },
          "timezone_identifier": {
            "description": "Identifier of timezone against which recurring charges will be made",
            "type": "string",
            "example": "UTC",
            "nullable": false
          },
          "company_name": {
            "description": "Company of recurring donator",
            "type": "string",
            "example": "Test Company"
          },
          "payment_type": {
            "description": "Payment type of recurring",
            "type": "string",
            "enum": ["Credit Card", "ACH", "Paypal"],
            "example": "ACH"
          },
          "recurring_donatable_id": {
            "description": " The ID of the fundraising entity to associate plan with",
            "type": "integer",
            "example": 72634,
            "nullable": false
          },
          "recurring_donatable_type": {
            "description": "The type of fundraising entity to associate plan with",
            "type": "string",
            "enum": ["campaign", "fundraising_page", "fundraising_team"],
            "example": "campaign"
          },
          "pp_plan_id": {
            "description": "ID of the Payment provider",
            "type": "integer",
            "example": 7112
          }
        },
        "type": "object"
      },
      "RecurringDonationPlanHistoryFillable": {
        "title": "Recurring Donation Plan History Fillable",
        "properties": {
          "error_msg": {
            "description": "Error message for the Recurring Donation Plan History",
            "type": "string",
            "maxLength": 100,
            "example": "There was an error",
            "nullable": true
          },
          "raw_currency_code": {
            "description": "The currency code of the plan's transactions.",
            "type": "string",
            "example": "CAD",
            "nullable": true
          },
          "raw_donation_amount": {
            "description": "The value donated, in the raw currency",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 50,
            "nullable": true
          },
          "type": {
            "description": "Type of Recurring Donation Plan",
            "type": "string",
            "enum": [
              "created",
              "payment_failed",
              "updated_profile",
              "payment",
              "admin_canceled",
              "member_canceled",
              "reprocess_payment_failed",
              "reprocess_payment",
              "member_paused",
              "admin_paused",
              "member_resumed",
              "admin_resumed"
            ],
            "example": "created",
            "nullable": false
          }
        },
        "type": "object"
      },
      "RecurringDonationPlanHistory": {
        "title": "Recurring Donation Plan History",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringDonationPlanHistoryFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Recurring Donation Plan History",
                "type": "integer",
                "example": 559879
              },
              "recurring_id": {
                "description": "Primary identifier of Recurring Donation Plan",
                "type": "integer",
                "example": 85456
              },
              "transaction_id": {
                "description": "Primary identifier of Transaction",
                "type": "integer",
                "example": 1427264
              },
              "currency_code": {
                "description": "The currency code of associated RecurringDonationPlan - fall back to the Organization's default currency",
                "type": "string",
                "example": "USD"
              },
              "donation_amount": {
                "description": "Recurring Donation amount in the Organization's currency",
                "type": "number",
                "format": "float",
                "minimum": 0,
                "example": 50
              },
              "created_at": {
                "description": "Date/time of initial Recurring Donation Plan History creation",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z"
              }
            },
            "type": "object"
          }
        ]
      },
      "RecurringDonationPlanTransferCreate": {
        "title": "Recurring Donation PlanTransfer Create",
        "properties": {
          "to_recurring_donatable_id": {
            "description": "The ID of the new entity to associate with the Recurring Donation Plan. Required when to_recurring_donatable_type present in the request.",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "to_recurring_donatable_type": {
            "description": "The type of the new entity to associate with the Recurring Donation Plan. Required when to_recurring_donatable_id present in the request.",
            "type": "string",
            "enum": ["campaign", "fundraising_page", "fundraising_team"],
            "example": "campaign",
            "nullable": false
          },
          "destination_member_id": {
            "description": "The Member ID of the Member to associate the Recurring Donation Plan with, required if the first two params are not included.",
            "type": "integer",
            "example": 227362,
            "nullable": true
          },
          "note": {
            "description": "Recurring Donation Plan Transfer Note",
            "type": "string",
            "maxLength": 255,
            "example": "This is note.",
            "nullable": true
          }
        },
        "type": "object"
      },
      "RecurringDonationPlanTransfer": {
        "title": "Recurring Donation PlanTransfer",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringDonationPlanTransferCreate"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Recurring Donation Plan transfer.",
                "type": "integer",
                "example": 4092,
                "nullable": false
              },
              "member_id": {
                "description": "ID of the Member who initiated the transfer.",
                "type": "integer",
                "example": 2012,
                "nullable": false
              },
              "source_member_id": {
                "description": "The Member ID of the Member associated with the Recurring Donation Plan before transfer.",
                "type": "integer",
                "example": 2012,
                "nullable": false
              },
              "recurring_donation_plan_id": {
                "description": "ID of the Recurring Donation Plan.",
                "type": "integer",
                "example": 85456,
                "nullable": false
              },
              "from_recurring_donatable_type": {
                "description": "The type of the old entity associated with the Recurring Donation Plan.",
                "type": "string",
                "enum": ["campaign", "fundraising_page", "fundraising_team"],
                "example": "fundraising_page",
                "nullable": false
              },
              "from_recurring_donatable_id": {
                "description": "The ID of the old entity associated with the Recurring Donation Plan.",
                "type": "integer",
                "example": 2173528,
                "nullable": false
              },
              "created_at": {
                "description": "Recurring Donation Plan Transfer created date/time",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              },
              "updated_at": {
                "description": "Recurring Donation Plan Transfer last updated date/time",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "RegistrationCredit": {
        "title": "RegistrationCredit",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": "14339",
            "nullable": false
          },
          "p2p_id": {
            "description": "Peer to Peer Campaign",
            "type": "integer",
            "example": "227362",
            "nullable": false
          },
          "amount": {
            "description": "Amount of the Transaction",
            "type": "integer",
            "format": "double",
            "example": "108.23",
            "nullable": false
          },
          "p2p_type": {
            "description": "Type of P2P Campaign",
            "type": "string",
            "example": "fundraising_page",
            "nullable": false
          },
          "transaction_id": {
            "description": "ID of Campaign Transaction",
            "type": "integer",
            "example": 8734
          },
          "transaction_item_id": {
            "description": "ID of the Item Transaction",
            "type": "integer",
            "example": "17020"
          }
        },
        "type": "object"
      },
      "RegistrationCreditFillable": {
        "title": "RegistrationCreditFillable",
        "properties": {
          "p2p_id": {
            "description": "Peer to Peer Campaign",
            "type": "integer",
            "example": "227362",
            "nullable": false
          },
          "amount": {
            "description": "Amount of the Transaction",
            "type": "integer",
            "format": "double",
            "example": "108.23",
            "nullable": false
          },
          "p2p_type": {
            "description": "Type of P2P Campaign",
            "type": "string",
            "example": "fundraising_page",
            "nullable": false
          },
          "transaction_id": {
            "description": "ID of Campaign Transaction",
            "type": "integer",
            "example": 8734
          },
          "transaction_item_id": {
            "description": "ID of the Item Transaction",
            "type": "integer",
            "example": "17020"
          }
        },
        "type": "object"
      },
      "ReprocessAttemptInfo": {
        "title": "ReprocessAttemptInfo",
        "properties": {
          "created_at": {
            "description": "Date/Time ReprocessAttemptInfo was created",
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T12:00:00+0000"
          },
          "initiated_by_id": {
            "description": "The ID of the member initiating the reprocess",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "original_transaction_id": {
            "description": "ID of the original Transaction",
            "type": "integer",
            "example": 8734,
            "nullable": false
          },
          "reprocess_transaction_id": {
            "description": "ID of Reprocess Transaction",
            "type": "integer",
            "example": 7623371,
            "nullable": false
          },
          "state": {
            "description": "Reprocess status",
            "type": "string",
            "enum": ["completed", "pending", "failed"],
            "example": "completed"
          },
          "updated_at": {
            "description": "Date/Time ReprocessAttemptInfo was updated",
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T12:00:00+0000"
          }
        },
        "type": "object"
      },
      "ReprocessAttemptInfoFillable": {
        "title": "ReprocessAttemptInfoFillable",
        "properties": {
          "original_transaction_id": {
            "description": "ID of the original Transaction",
            "type": "integer",
            "example": 8734,
            "nullable": false
          },
          "reprocess_transaction_id": {
            "description": "ID of Reprocess Transaction",
            "type": "integer",
            "example": 7623371,
            "nullable": false
          },
          "initiated_by_id": {
            "description": "The ID of the member initiating the reprocess",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "pp_transaction_id": {
            "description": "Transaction ID for the payment provider (e.g. Classy Pay)",
            "type": "string",
            "example": "922337203687624342"
          },
          "state": {
            "description": "Reprocess status",
            "type": "string",
            "enum": ["completed", "pending", "failed"],
            "example": "completed"
          }
        },
        "type": "object"
      },
      "SoftCredit": {
        "title": "SoftCredit",
        "properties": {
          "amount": {
            "description": "Amount of the Soft Credit",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "creditable_id": {
            "description": "ID of associated Fundraising entity",
            "type": "integer",
            "example": "72634",
            "nullable": false
          },
          "creditable_type": {
            "description": "Type of associated Fundraising entity",
            "type": "string",
            "example": "fundraising_page",
            "nullable": false
          },
          "id": {
            "description": "ID of the Soft Credit",
            "type": "integer",
            "example": 285
          },
          "memo": {
            "description": "A memo describing the circumstances of the Soft Credit's creation",
            "type": "string",
            "example": "test"
          },
          "metadata": {
            "description": "Arbitrary JSON metadata",
            "type": "string",
            "example": "{'foo':'bar'}"
          },
          "soft_credit_transfer_id": {
            "description": "ID of Soft Credit Transfer in which this Soft Credit was created",
            "type": "integer",
            "example": 6798
          },
          "type": {
            "description": "The Soft Credit's type",
            "type": "string",
            "enum": ["transaction", "refund", "chargeback", "allocation"],
            "example": "allocation"
          },
          "campaign_progress_bar_amount": {
            "description": "Campaign Progress Bar Amount",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": true
          },
          "fundraising_team_progress_bar_amount": {
            "description": "Fundraising Team Progress Bar Amount",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": true
          },
          "fundraising_page_progress_bar_amount": {
            "description": "Fundraising Page Progress Bar Amount",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": true
          }
        },
        "type": "object"
      },
      "SoftCreditFillable": {
        "title": "SoftCredit Fillable",
        "properties": {
          "amount": {
            "description": "Amount of the Soft Credit",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": false
          },
          "memo": {
            "description": "A memo describing the circumstances of the Soft Credit's creation",
            "type": "string",
            "example": "test"
          },
          "metadata": {
            "description": "Arbitrary JSON metadata",
            "type": "string",
            "example": "{'foo':'bar'}"
          },
          "type": {
            "description": "The Soft Credit's type",
            "type": "string",
            "enum": ["transaction", "refund", "chargeback", "allocation"],
            "example": "allocation"
          },
          "campaign_progress_bar_amount": {
            "description": "Campaign Progress Bar Amount",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": true
          },
          "fundraising_team_progress_bar_amount": {
            "description": "Fundraising Team Progress Bar Amount",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": true
          },
          "fundraising_page_progress_bar_amount": {
            "description": "Fundraising Page Progress Bar Amount",
            "type": "number",
            "format": "float",
            "example": "5243.12",
            "nullable": true
          }
        },
        "type": "object"
      },
      "SoftCreditTransfer": {
        "title": "Soft Credit Transfer",
        "properties": {
          "id": {
            "description": "Primary identifier of Soft Credit Transfer",
            "type": "integer",
            "example": 6798,
            "nullable": false
          },
          "to_creditable_id": {
            "description": "ID of creditable item like fundraising_page, fundraising_team or campaign to Soft Credit Transfer",
            "type": "integer",
            "example": 2173528
          },
          "to_creditable_type": {
            "description": "Type of creditable item to Soft Credit Transfer",
            "type": "string",
            "enum": ["campaign", "fundraising_page", "fundraising_team"],
            "example": "fundraising_page"
          },
          "from_creditable_id": {
            "description": "ID of creditable item from which Soft Credit Transfer",
            "type": "integer",
            "example": 209745
          },
          "from_creditable_type": {
            "description": "Type of creditable item from Soft Credit Transfer",
            "type": "string",
            "enum": ["campaign", "fundraising_page", "fundraising_team"],
            "example": "fundraising_team"
          },
          "amount": {
            "description": "The amount of credit to transfer",
            "type": "number",
            "format": "float",
            "minimum": 0.01,
            "example": 100
          },
          "note": {
            "description": "Note attached to transfer",
            "type": "string",
            "example": "Team allocation"
          },
          "created_at": {
            "description": "Date/time of Soft Credit Transfer was created",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of Soft Credit Transfer was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "SoftCreditTransferFillable": {
        "title": "Soft Credit Transfer Fillable",
        "properties": {
          "from": {
            "description": "The type of creditable item (i.e. fundraising entity) to Soft Credit Transfer from",
            "properties": {
              "id": {
                "description": "ID of fundraising entity from Soft Credit Transfer",
                "type": "integer",
                "example": 2173528
              },
              "type": {
                "description": "Type of fundraising entity",
                "type": "string",
                "enum": ["campaign", "fundraising_page", "fundraising_team"],
                "example": "fundraising_page"
              }
            },
            "type": "object"
          },
          "to": {
            "description": "The type of creditable item (i.e. fundraising entity) to Soft Credit Transfer to",
            "properties": {
              "id": {
                "description": "ID of fundraising entity to Soft Credit Transfer",
                "type": "integer",
                "example": 227362
              },
              "type": {
                "description": "Type of fundraising entity",
                "type": "string",
                "enum": ["campaign", "fundraising_page", "fundraising_team"],
                "example": "campaign"
              }
            },
            "type": "object"
          },
          "amount": {
            "description": "The amount of credit to transfer",
            "type": "number",
            "format": "float",
            "minimum": 0.01,
            "example": 100
          },
          "note": {
            "description": "Note attached to transfer",
            "type": "string",
            "maxLength": 255,
            "example": "Note added for credit transfer"
          }
        },
        "type": "object"
      },
      "DonationTransaction": {
        "title": "Donation Transaction",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 1427264,
            "nullable": false
          },
          "status": {
            "description": "Transaction Status",
            "type": "integer",
            "example": 4,
            "nullable": false
          }
        },
        "type": "object"
      },
      "RegistrationTransaction": {
        "title": "Registration Transaction",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 62376,
            "nullable": false
          },
          "status": {
            "description": "Transaction Status",
            "type": "integer",
            "example": 4,
            "nullable": false
          }
        },
        "type": "object"
      },
      "DonationTransactionSuccess": {
        "title": "Donation Transaction Success",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DonationTransaction"
          },
          {
            "properties": {
              "status": {
                "example": 5
              }
            },
            "type": "object"
          }
        ]
      },
      "RegistrationTransactionSuccess": {
        "title": "Registration Transaction Success",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RegistrationTransaction"
          },
          {
            "properties": {
              "status": {
                "example": 5
              }
            },
            "type": "object"
          }
        ]
      },
      "TransactionEstimate": {
        "title": "Transaction Estimate",
        "properties": {
          "charge_summary": {
            "description": "Transaction Estimate Charge Summary",
            "properties": {
              "fee_on_top": {
                "description": "Indicates whether fee on top (classymode) is applied",
                "type": "boolean",
                "example": true
              },
              "fee_on_top_amount": {
                "description": "Amount that is applied as a fee on top",
                "type": "number",
                "format": "float",
                "example": 2
              },
              "total_charge": {
                "description": "Amount charged to card",
                "type": "number",
                "format": "float",
                "example": 30
              }
            },
            "type": "object"
          },
          "gross_adjustment": {
            "description": "Gross Adjustment",
            "properties": {
              "applied_application_fee_percent": {
                "description": "Percent take by Classy",
                "type": "number",
                "format": "float",
                "example": 3
              },
              "applied_raw_processor_fee_flat": {
                "description": "Flat rate take by card processor",
                "type": "number",
                "format": "float",
                "example": 0.2
              },
              "applied_processor_fee_percent": {
                "description": "Percent take by card processor",
                "type": "number",
                "format": "float",
                "example": 2.2
              },
              "applied_flex_rate_percent": {
                "description": "Add on rate set by organization",
                "type": "number",
                "format": "float",
                "example": 3
              },
              "raw_application_fee_amount": {
                "description": "Amount collected by Classy",
                "type": "number",
                "format": "float",
                "example": 1.45
              },
              "application_fee_amount": {
                "description": "Amount collected by Classy (Normalization value)",
                "type": "number",
                "format": "float",
                "example": 1.45
              },
              "raw_processor_fee_amount": {
                "description": "Amount collected by payment processor",
                "type": "number",
                "format": "float",
                "example": 12.1
              },
              "processor_fee_amount": {
                "description": "Amount collected by payment processor (Normalization value)",
                "type": "number",
                "format": "float",
                "example": 12.1
              },
              "raw_flex_rate_amount": {
                "description": "Add on rate (flex rate) amount collected by organization",
                "type": "number",
                "format": "float",
                "example": 2.1
              },
              "flex_rate_amount": {
                "description": "Add on rate (flex rate) amount collected by organization (Normalization value)",
                "type": "number",
                "format": "float",
                "example": 2.1
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "title": "Transaction",
        "properties": {
          "account_number": {
            "description": "For ACH, the last digits of the account funds were drawn from",
            "type": "string",
            "example": "1234",
            "nullable": true
          },
          "account_type": {
            "description": "For ACH, what type of account funds were drawn from (savings, checking)",
            "type": "string",
            "enum": ["savings", "checking"],
            "example": "savings",
            "nullable": true
          },
          "acknowledgements_count": {
            "description": "Number of times Transaction was acknowledged by staff",
            "type": "integer",
            "example": 3
          },
          "adjustment_amount": {
            "description": "The total value the transaction's total_gross_amount has been adjusted",
            "type": "number",
            "format": "float",
            "example": 0.5,
            "nullable": true
          },
          "application_fee_amount": {
            "description": "Flat amount associated with the application fee (normalized value)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 42,
            "nullable": true
          },
          "applied_application_fee_percent": {
            "description": "Percent taken by Classy",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0.01,
            "example": 3,
            "nullable": true
          },
          "applied_flex_rate_percent": {
            "description": "Add on rate set by organization",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0.01,
            "example": 50,
            "nullable": true
          },
          "applied_fot_percent": {
            "description": "Percentage added to Fee on Top (aka Classy Mode) Transactions to cover fees. Null if the Transaction is not fee on top",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0.01,
            "example": 50,
            "nullable": true
          },
          "applied_processor_fee_percent": {
            "description": "Percent taken by card processor",
            "type": "number",
            "format": "float",
            "maximum": 100,
            "minimum": 0.01,
            "example": 2.2,
            "nullable": true
          },
          "applied_raw_processor_fee_flat": {
            "description": "Flat rate taken by card processor",
            "type": "number",
            "format": "float",
            "example": 0.2,
            "nullable": true
          },
          "billing_address1": {
            "description": "Billing address",
            "type": "string",
            "maxLength": 512,
            "example": "533 F Street",
            "nullable": true
          },
          "billing_address2": {
            "description": "Billing address 2",
            "type": "string",
            "maxLength": 25,
            "example": "533 F Street",
            "nullable": true
          },
          "billing_city": {
            "description": "Billing city",
            "type": "string",
            "maxLength": 50,
            "example": "San Diego",
            "nullable": true
          },
          "billing_country": {
            "description": "Billing country. Must be a valid ISO 3166-1 alpha-2 country code",
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "US",
            "nullable": true
          },
          "billing_first_name": {
            "description": " Billing first name",
            "type": "string",
            "maxLength": 50,
            "example": "Classy",
            "nullable": true
          },
          "billing_last_name": {
            "description": "Billing last name",
            "type": "string",
            "maxLength": 50,
            "example": "Member",
            "nullable": true
          },
          "billing_postal_code": {
            "description": "Billing zip/postal code",
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "example": "92101",
            "nullable": true
          },
          "billing_state": {
            "description": "Billing state/province",
            "type": "string",
            "maxLength": 32,
            "example": "CA",
            "nullable": true
          },
          "browser_info": {
            "description": "Browser information",
            "type": "string",
            "example": "information",
            "nullable": true
          },
          "campaign_id": {
            "description": "ID of Campaign Transaction is associated with",
            "type": "integer",
            "example": 227362
          },
          "card_expiration": {
            "description": "The expiration of credit card used (when applicable) in MMYY format",
            "type": "string",
            "example": "1017",
            "nullable": true
          },
          "card_last_four": {
            "description": "The last four digits of the credit card (when applicable)",
            "type": "integer",
            "example": 1234,
            "nullable": true
          },
          "card_type": {
            "description": "Type of credit card used (when applicable)",
            "type": "string",
            "example": "Visa",
            "nullable": true
          },
          "charged_at": {
            "description": "Date and time Transaction was charged",
            "type": "string",
            "format": "date-time",
            "example": "2017-01-01T12:02:01+0000",
            "nullable": true
          },
          "charged_classy_fees_amount": {
            "description": "Total fees applied by Classy",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 0.15,
            "nullable": true
          },
          "charged_currency_code": {
            "description": "Currency code of final charge. Required if charged_pp_fees_amount, charged_total_gross_amount or charged_classy_fees_amount are present.",
            "type": "string",
            "example": "USD",
            "nullable": true
          },
          "charged_fees_amount": {
            "description": "Total fees applied to Transaction (Classy and payment processor)",
            "type": "number",
            "format": "float",
            "example": 0.35,
            "nullable": true
          },
          "charged_pp_fees_amount": {
            "description": "Total fees applied to by payment processor",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 0.15,
            "nullable": true
          },
          "charged_total_gross_amount": {
            "description": "Gross total charged to purchaser",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 1,
            "nullable": true
          },
          "classy_fees_amount": {
            "description": "Amount of fees apply by Classy",
            "type": "number",
            "format": "float",
            "example": 0.34,
            "nullable": true
          },
          "comment": {
            "description": "Organization comment",
            "type": "string",
            "example": "This is a comment",
            "nullable": true
          },
          "company_name": {
            "description": "Name of company this Transaction has ties to",
            "type": "string",
            "example": "Classy",
            "nullable": true
          },
          "context": {
            "$ref": "#/components/schemas/TransactionContext"
          },
          "created_at": {
            "description": "Date Transaction record was created",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "currency_code": {
            "description": "Currency code",
            "type": "string",
            "example": "USD"
          },
          "designation_id": {
            "description": "ID of the Designation this Transaction is allocated to",
            "type": "integer",
            "example": 34672,
            "nullable": true
          },
          "donation_gross_amount": {
            "description": "Gross total applied to purchaser in the raw currency",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "donation_net_amount": {
            "description": "Total gross amount - Overhead net amount - Fees amount",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "fees_amount": {
            "description": "Payment for professional service",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "fee_on_top": {
            "description": "Flag if the transaction is a fee on top (classymode) or not",
            "type": "boolean",
            "example": true
          },
          "flex_rate_amount": {
            "description": "Flat amount associated with the flex rate percent (normalized value)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 42,
            "nullable": true
          },
          "frequency": {
            "description": "Frequency of transaction: one-time or recurring",
            "type": "string",
            "enum": [
              "bi-weekly",
              "bi-monthly",
              "daily",
              "one-time",
              "quarterly",
              "semi-annual",
              "weekly",
              "yearly"
            ],
            "example": "one-time"
          },
          "fundraising_page_id": {
            "description": "ID of the Fundraising Page Transaction is associated with",
            "type": "integer",
            "example": 2173528,
            "nullable": true
          },
          "fundraising_team_id": {
            "description": "ID of Fundraising Team Transaction is associated with",
            "type": "integer",
            "example": 209745,
            "nullable": true
          },
          "hide_amount": {
            "description": "Whether purchaser indicated if Transaction amount should be hidden",
            "type": "boolean",
            "example": false
          },
          "id": {
            "description": "Unique ID of the Transaction",
            "type": "integer",
            "example": 8734
          },
          "initial_gross_amount": {
            "description": "Amount before any fee adjustments where added (Normalization value)",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "institution": {
            "description": "For ACH, the name of the banking institution funds were drawn from",
            "type": "string",
            "maxLength": 255,
            "example": "ABC Bank",
            "nullable": true
          },
          "in_honor_of": {
            "description": "A person this donation is in honor or memory of. Deprecated, this field was replaced for the dedication object. When fetching the transaction, use the with query parameter with the dedication value to include it in the response.",
            "type": "string",
            "example": "Classy Relation",
            "nullable": true
          },
          "is_anonymous": {
            "description": "Whether purchaser indicated if transaction should be anonymous",
            "type": "boolean",
            "example": false
          },
          "is_donor_covered_fee": {
            "description": "Flag if the transaction is a donor covered fee or not",
            "type": "boolean",
            "example": true
          },
          "is_gift_aid": {
            "description": "Flag whether the donor opted into gift aid used by the UK or not. Can only be set if the organization allows it",
            "type": "boolean",
            "example": false
          },
          "is_reprocess": {
            "description": "If it is a reprocessed transaction or not",
            "type": "boolean",
            "example": true
          },
          "member_country": {
            "description": "Country of the Member. Must be a valid ISO 3166-1 alpha-2 country code",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "member_email_address": {
            "description": "Email address of purchaser Classy Member",
            "type": "string",
            "example": "member@classy.org",
            "nullable": true
          },
          "member_id": {
            "description": "Primary ID of the purchaser Classy Member",
            "type": "integer",
            "example": 2012
          },
          "member_name": {
            "description": " Name of purchaser Classy Member",
            "type": "string",
            "example": "Classy Member",
            "nullable": true
          },
          "member_phone": {
            "description": "Phone number of purchaser Classy Member",
            "type": "string",
            "example": "555-555-5555",
            "nullable": true
          },
          "metadata": {
            "description": "An optional set of unstructured metadata to be stored with a Transaction",
            "type": "string",
            "example": "{foo: 'bar'}",
            "nullable": true
          },
          "organization_id": {
            "description": " ID of Organization Transaction is associated with",
            "type": "integer",
            "example": 82364
          },
          "overhead_net_amount": {
            "description": "Amount of event/host fees",
            "type": "number",
            "format": "float",
            "example": 25
          },
          "parent_transaction_id": {
            "description": "Parent Transaction identifier",
            "type": "integer",
            "example": 8734,
            "nullable": true
          },
          "payment_gateway": {
            "description": "Payment processor",
            "type": "string",
            "enum": [
              "StayClassy PayPal",
              "Authorize.net",
              "PayPal",
              "NetworkForGood",
              "WePay",
              "PayPalExternal",
              "BrainTree",
              "Classy Pay",
              "Dwolla",
              "Stripe",
              "PayPalCommerce",
              "Coinbase",
              "Double the Donation Pay",
              "Facebook Pay"
            ],
            "example": "BrainTree",
            "nullable": true
          },
          "payment_method": {
            "description": "Service for processing payment",
            "type": "string",
            "example": "WPP"
          },
          "payment_source": {
            "description": "How payment information was captured",
            "type": "string",
            "enum": [
              "APPLE_PAY",
              "GOOGLE_PAY",
              "STRIPE_LINK",
              "MANUAL",
              "PAYPAL",
              "PLAID",
              "WALLET",
              "VENMO",
              "COINBASE"
            ],
            "example": "WALLET",
            "nullable": true
          },
          "payment_type": {
            "description": "How payment was made",
            "type": "string",
            "enum": ["Credit Card", "ACH", "PayPal", "Venmo", "Crypto"],
            "example": "Credit Card",
            "nullable": true
          },
          "pp_fees_amount": {
            "description": "Total fees applied by payment processor",
            "type": "number",
            "format": "float",
            "example": 0.15
          },
          "pp_reference_id": {
            "description": "Reference ID for underlying transaction processing.",
            "type": "string",
            "example": "12345",
            "nullable": true
          },
          "pp_response": {
            "description": "Paypal response",
            "type": "string",
            "example": "1023",
            "nullable": true
          },
          "pp_transaction_id": {
            "description": "Reference ID for underlying Transaction processing",
            "type": "string",
            "example": "12345",
            "nullable": true
          },
          "processor_decline_code": {
            "description": "Code of processor decline",
            "type": "string",
            "example": "64",
            "nullable": true
          },
          "processor_fee_amount": {
            "description": "Flat amount associated with the processor fee (normalized value)",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 42,
            "nullable": true
          },
          "promo_code_code": {
            "description": "The code of the promo code applied to the Transaction",
            "type": "string",
            "example": "PROMO",
            "nullable": true
          },
          "purchased_at": {
            "description": "Date and time of Transaction",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "raw_adjustment_amount": {
            "description": "Total fee amount assessed",
            "type": "number",
            "format": "float",
            "example": 0.25
          },
          "raw_application_fee_amount": {
            "description": "Raw Flat amount associated with the application fee",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 42,
            "nullable": true
          },
          "raw_currency_code": {
            "description": "Currency Code of the Transaction before normalization",
            "type": "string",
            "example": "JPY"
          },
          "raw_donation_gross_amount": {
            "description": "Gross total applied to purchaser in the raw currency",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "raw_flex_rate_amount": {
            "description": "Raw Flat amount associated with the flex rate percent",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 1.25,
            "nullable": true
          },
          "raw_initial_gross_amount": {
            "description": "Amount before any fee adjustments where added",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "raw_overhead_net_amount": {
            "description": "Net Amount of event/host fees in the raw currency",
            "type": "number",
            "format": "float",
            "example": 0.25
          },
          "raw_processor_fee_amount": {
            "description": "Raw Flat amount associated with the processor fee",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 42,
            "nullable": true
          },
          "raw_total_gross_amount": {
            "description": "Gross amount charged to purchaser if raw currency code is set",
            "type": "number",
            "format": "float",
            "example": 1
          },
          "recurring_donation_plan_id": {
            "description": "ID of recurring Donation plan the Transaction belongs to. If there is no recurring Donation plan then this is null",
            "type": "integer",
            "example": 23847,
            "nullable": true
          },
          "refunded_at": {
            "description": "Date and time of Refund, if applies",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000",
            "nullable": true
          },
          "reprocess_attempts": {
            "description": "Number of reprocess attempts for the transaction",
            "type": "integer",
            "example": 2
          },
          "status": {
            "description": "The status of the Transaction",
            "type": "string",
            "enum": [
              "test",
              "canceled",
              "incomplete",
              "success",
              "refunded",
              "cb_lost",
              "cb_initiated",
              "voided",
              "pending",
              "failed"
            ],
            "example": "canceled"
          },
          "supporter_id": {
            "description": "Supporter ID associated with the Member",
            "type": "integer",
            "example": 5827
          },
          "tax_entity_id": {
            "description": "Tax entity that satisfies tax compliance for the Transaction",
            "type": "integer",
            "example": 331,
            "nullable": true
          },
          "total_gross_amount": {
            "description": "Total value of Transaction",
            "type": "number",
            "format": "float",
            "example": 1.25
          },
          "updated_at": {
            "description": "Date and time of last update",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000",
            "nullable": true
          },
          "opted_into_payment_sync": {
            "description": "Registrant has opted into storing their payment info for future classy live purchases.",
            "type": "boolean",
            "example": false
          }
        },
        "type": "object"
      },
      "TransactionFillable": {
        "title": "Transaction Fillable",
        "properties": {
          "billing_address1": {
            "description": "Line one of Billing address",
            "type": "string",
            "example": "533 F Street",
            "nullable": true
          },
          "billing_address2": {
            "description": "Line two of Billing address",
            "type": "string",
            "example": "533 F Street",
            "nullable": true
          },
          "billing_city": {
            "description": "Billing city",
            "type": "string",
            "example": "San Diego",
            "nullable": true
          },
          "billing_country": {
            "description": "Billing country. Must be a valid ISO 3166-1 alpha-2 country code",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "billing_first_name": {
            "description": " Billing first name",
            "type": "string",
            "example": "Classy",
            "nullable": true
          },
          "billing_last_name": {
            "description": "Billing last name",
            "type": "string",
            "example": "Member",
            "nullable": true
          },
          "billing_postal_code": {
            "description": "Billing zip/postal code",
            "type": "string",
            "example": "92101",
            "nullable": true
          },
          "billing_state": {
            "description": "Billing state/province",
            "type": "string",
            "maxLength": 32,
            "example": "CA",
            "nullable": true
          },
          "browser_info": {
            "description": "Browser information",
            "type": "string",
            "example": "information",
            "nullable": true
          },
          "comment": {
            "description": "Organization comment",
            "type": "string",
            "example": "This is a comment",
            "nullable": true
          },
          "company_name": {
            "description": "Name of company this Transaction has ties to",
            "type": "string",
            "example": "Classy",
            "nullable": true
          },
          "hide_amount": {
            "description": "Whether purchaser indicated if Transaction amount should be hidden",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "is_anonymous": {
            "description": "Whether purchaser indicated if transaction should be anonymous",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "is_gift_aid": {
            "description": "Flag whether the donor opted into gift aid used by the UK or not. Can only be set if the organization allows it",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "is_reprocess": {
            "description": "If it is a reprocessed transaction or not",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "member_country": {
            "description": "Country of the Member",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "member_email_address": {
            "description": "Email address of purchaser Classy Member",
            "type": "string",
            "example": "member@classy.org",
            "nullable": true
          },
          "member_name": {
            "description": " Name of purchaser Classy Member",
            "type": "string",
            "example": "Classy Member",
            "nullable": true
          },
          "member_phone": {
            "description": "Phone number of purchaser Classy Member",
            "type": "string",
            "example": "555-555-5555",
            "nullable": true
          },
          "metadata": {
            "description": "An optional set of unstructured metadata to be stored with a Transaction",
            "type": "string",
            "example": "{foo: 'bar'}",
            "nullable": true
          },
          "raw_currency_code": {
            "description": "Currency Code of the Transaction before normalization",
            "type": "string",
            "example": "JPY",
            "nullable": true
          },
          "status": {
            "description": "The status of the Transaction",
            "type": "string",
            "enum": [
              "test",
              "canceled",
              "incomplete",
              "success",
              "refunded",
              "cb_lost",
              "cb_initiated",
              "voided",
              "pending",
              "failed"
            ],
            "example": "canceled",
            "nullable": true
          },
          "reprocess_attempt_info": {
            "$ref": "#/components/schemas/ReprocessAttemptInfoFillable"
          }
        },
        "type": "object"
      },
      "CampaignTransactionFillable": {
        "title": "Campaign Transaction Fillable",
        "properties": {
          "answers": {
            "description": "Answers for transaction questions",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AnswerFillable"
                },
                {
                  "properties": {
                    "question_id": {
                      "description": "Primary identifier of associated Question",
                      "type": "integer",
                      "example": 45678
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "nullable": true
          },
          "billing_address1": {
            "description": "Line one of Billing address",
            "type": "string",
            "example": "533 F Street",
            "nullable": true
          },
          "billing_address2": {
            "description": "Line two of Billing address",
            "type": "string",
            "example": "533 F Street",
            "nullable": true
          },
          "billing_city": {
            "description": "Billing city",
            "type": "string",
            "example": "San Diego",
            "nullable": true
          },
          "billing_country": {
            "description": "Billing country. Must be a valid ISO 3166-1 alpha-2 country code",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "billing_first_name": {
            "description": "Billing first name",
            "type": "string",
            "example": "Classy",
            "nullable": true
          },
          "billing_last_name": {
            "description": "Billing last name",
            "type": "string",
            "example": "Member",
            "nullable": true
          },
          "billing_postal_code": {
            "description": "Billing zip/postal code",
            "type": "string",
            "example": "92101",
            "nullable": true
          },
          "billing_state": {
            "description": "Billing state/province",
            "type": "string",
            "example": "CA",
            "nullable": true
          },
          "browser_info": {
            "description": "Browser information",
            "type": "string",
            "example": "information",
            "nullable": true
          },
          "comment": {
            "description": "Organization comment",
            "type": "string",
            "example": "This is a comment",
            "nullable": true
          },
          "company_name": {
            "description": "Name of company this Transaction has ties to",
            "type": "string",
            "example": "Classy",
            "nullable": true
          },
          "designation_id": {
            "description": "ID of the Designation this Transaction is allocated to",
            "type": "integer",
            "example": 564856,
            "nullable": true
          },
          "fundraising_page_id": {
            "description": "ID of the fundraising page to associate the transaction with",
            "type": "integer",
            "example": 865125,
            "nullable": true
          },
          "fundraising_team_id": {
            "description": "ID of the fundraising team to associate the transaction with",
            "type": "integer",
            "example": 256489,
            "nullable": true
          },
          "hide_amount": {
            "description": "Whether purchaser indicated if Transaction amount should be hidden",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "is_anonymous": {
            "description": "Whether purchaser indicated if transaction should be anonymous",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "is_gift_aid": {
            "description": "Flag whether the donor opted into gift aid used by the UK or not. Can only be set if the organization allows it",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "is_reprocess": {
            "description": "If it is a reprocessed transaction or not",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "items": {
            "description": "Collection of Transaction Items. Required for a successful transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionItemFillable"
            },
            "nullable": true
          },
          "member_country": {
            "description": "Country of the Member",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "member_email_address": {
            "description": "Email address of purchaser Classy Member",
            "type": "string",
            "example": "member@classy.org",
            "nullable": true
          },
          "member_name": {
            "description": " Name of purchaser Classy Member",
            "type": "string",
            "example": "Classy Member",
            "nullable": true
          },
          "member_phone": {
            "description": "Phone number of purchaser Classy Member",
            "type": "string",
            "example": "555-555-5555",
            "nullable": true
          },
          "metadata": {
            "description": "An optional set of unstructured metadata to be stored with a Transaction",
            "type": "string",
            "example": "{foo: 'bar'}",
            "nullable": true
          },
          "offline_payment_info": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OfflinePaymentInfo"
              }
            ],
            "nullable": true,
            "description": "Offline payment info associated to offline transaction",
            "type": "object"
          },
          "parent_transaction_id": {
            "description": "ID of parent transaction",
            "type": "integer",
            "example": 7133489,
            "nullable": true
          },
          "purchased_at": {
            "description": "Date and time of purchase",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000",
            "nullable": true
          },
          "raw_currency_code": {
            "description": "Currency Code of the Transaction before normalization",
            "type": "string",
            "example": "JPY",
            "nullable": true
          },
          "refunded_at": {
            "description": "Date and time of refund",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000",
            "nullable": true
          },
          "status": {
            "description": "The status of the Transaction",
            "type": "string",
            "enum": [
              "test",
              "canceled",
              "incomplete",
              "success",
              "refunded",
              "cb_lost",
              "cb_initiated",
              "voided",
              "pending",
              "failed"
            ],
            "example": "canceled",
            "nullable": true
          }
        },
        "type": "object"
      },
      "TransactionItemCreate": {
        "title": "Transaction Item Create",
        "properties": {
          "overhead_amount": {
            "description": "Amount of event/host fees",
            "type": "number",
            "format": "double",
            "example": 25,
            "nullable": true
          },
          "price": {
            "description": "Price assigned to item.  Only valid when type is 'donation' or 'offline donation'.",
            "type": "number",
            "format": "double",
            "example": 55
          },
          "product_id": {
            "description": "ID of associated Ticket Type (required for registration types)",
            "type": "integer",
            "example": 9978
          },
          "product_name": {
            "description": "Product name, typically Registration/Ticket name",
            "type": "string",
            "example": "Offline Donation"
          },
          "quantity": {
            "description": "Quantity purchased",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "Type of item",
            "type": "string",
            "enum": ["donation", "registration", "offline_donation"],
            "example": "donation"
          }
        },
        "type": "object"
      },
      "TransactionItemFillable": {
        "title": "Transaction Item Fillable",
        "properties": {
          "product_name": {
            "description": "Name of product",
            "type": "string",
            "maxLength": 64,
            "example": "Tickets"
          },
          "quantity": {
            "description": "Quantity purchased",
            "type": "integer",
            "minimum": 1,
            "example": 1
          },
          "raw_final_price": {
            "description": "Represents the total raw value of a Transaction item - it is either set directly (as with a direct donation) or derived from the Product of `raw_price` (the price of the Transaction item's associated Product) and the specified quantity. All raw amounts are presented in terms of `raw_currency_code`, which is inherited from the Transaction item's Transaction and cannot be set on a per-item basis",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "example": 15,
            "nullable": true
          },
          "raw_overhead_amount": {
            "description": "Which indicates the amount of the `raw_final_price` that is attributed to Campaign overhead.",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "example": 15,
            "nullable": true
          },
          "type": {
            "description": "Type of Transaction Item ledger",
            "type": "string",
            "enum": [
              "donation",
              "registration",
              "offline_donation",
              "chargeback_reversal",
              "custom_product",
              "auction",
              "good"
            ],
            "example": "donation"
          }
        },
        "type": "object"
      },
      "TransactionItemEstimation": {
        "title": "Transaction Item Estimation",
        "properties": {
          "item": {
            "description": "Value of transaction item",
            "type": "number",
            "format": "float",
            "example": "15"
          }
        },
        "type": "object"
      },
      "TransactionItem": {
        "title": "Transaction Item",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionItemFillable"
          },
          {
            "properties": {
              "campaign_id": {
                "description": "ID of Campaign the Transaction Item's Transaction is associated with",
                "type": "integer",
                "example": 227362,
                "nullable": false
              },
              "donation_gross_amount": {
                "description": "Amount charged for item to shown",
                "type": "number",
                "format": "double",
                "example": 0.89,
                "nullable": false
              },
              "donation_net_amount": {
                "description": "Amount charged for item",
                "type": "number",
                "format": "double",
                "example": 0.89,
                "nullable": false
              },
              "fees_amount": {
                "description": "Fees charged for Transaction Item",
                "type": "number",
                "format": "double",
                "example": 0.89,
                "nullable": false
              },
              "final_price": {
                "description": "Reflect a conversion from raw and/or charged attributes into the Transaction Item's `currency_code`, which is the same for all Passport-enabled entities associated with the Transaction item's Organization.",
                "type": "number",
                "format": "double",
                "example": 0.89,
                "nullable": false
              },
              "fundraising_page_id": {
                "description": "ID of Fundraising Page the Transaction Item's Transaction is associated with",
                "type": "integer",
                "example": 2173528,
                "nullable": true
              },
              "fundraising_team_id": {
                "description": "ID of Fundraising Team the Transaction Item's Transaction is associated with",
                "type": "integer",
                "example": 209745,
                "nullable": true
              },
              "id": {
                "description": "Primary identifier of Transaction Item",
                "type": "integer",
                "example": 17020,
                "nullable": false
              },
              "organization_id": {
                "description": "ID of Organization the Transaction Item's Transaction is associated with",
                "type": "integer",
                "example": 82364,
                "nullable": false
              },
              "overhead_amount": {
                "description": "Amount of event/host fees",
                "type": "number",
                "format": "double",
                "example": 25.5,
                "nullable": false
              },
              "price": {
                "description": "Price per unit",
                "type": "number",
                "format": "double",
                "example": 12,
                "nullable": false
              },
              "product_id": {
                "description": "ID of the item's Product",
                "type": "integer",
                "example": 73647,
                "nullable": false
              },
              "product_name": {
                "description": "Name of Product",
                "type": "string",
                "example": "Tickets",
                "nullable": false
              },
              "quantity": {
                "description": "Quantity purchased",
                "type": "integer",
                "example": 2,
                "nullable": false
              },
              "transaction_id": {
                "description": "ID of Transaction the item belongs to",
                "type": "integer",
                "example": 8734,
                "nullable": false
              },
              "commerce_order_item_id": {
                "description": "ID of Commerce Order Item the item belongs to",
                "type": "string",
                "example": "orit_8734",
                "nullable": true
              },
              "designation_id": {
                "description": "ID of the designation/project for the Commerce Order Item that the item belongs to",
                "type": "integer",
                "example": 8734,
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "TransactionItemProgressBarAmount": {
        "title": "Transaction Item Progress Bar Amount",
        "properties": {
          "campaign_amount": {
            "description": "Campaign Amount",
            "type": "integer",
            "format": "float",
            "example": 12.34
          },
          "fundraising_team_amount": {
            "description": "Fundraising Team Amount",
            "type": "integer",
            "format": "float",
            "example": 12.34
          },
          "fundraising_page_amount": {
            "description": "Fundraising Page Amount",
            "type": "integer",
            "format": "float",
            "example": 12.34
          }
        },
        "type": "object"
      },
      "TransactionProgressBarAmount": {
        "title": "Transaction Progress Bar Amount",
        "properties": {
          "campaign_amount": {
            "description": "Campaign Amount",
            "type": "integer",
            "format": "float",
            "example": 12.34
          },
          "fundraising_team_amount": {
            "description": "Fundraising Team Amount",
            "type": "integer",
            "format": "float",
            "example": 12.34
          },
          "fundraising_page_amount": {
            "description": "Fundraising Page Amount",
            "type": "integer",
            "format": "float",
            "example": 12.34
          }
        },
        "type": "object"
      },
      "TransactionReceipt": {
        "title": "Transaction Receipt",
        "properties": {
          "id": {
            "description": "Transaction Receipt ID",
            "type": "integer",
            "example": 995
          },
          "transaction_id": {
            "description": "Transaction ID",
            "type": "integer",
            "example": 8734,
            "nullable": false
          },
          "created_at": {
            "description": "Date transaction record was created",
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T12:00:00+0000"
          },
          "serial_number": {
            "description": "Receipt serial number",
            "type": "string",
            "example": "CLR-2556",
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignSeries": {
        "title": "Campaign Series",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "created_by": {
            "description": "Created By Member Id",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "description": {
            "description": "Description of the campaign series",
            "type": "string",
            "example": "Annual 5k to raise funds for our mission"
          },
          "id": {
            "description": "Primary identifier of the campaign series",
            "type": "integer",
            "readOnly": true,
            "example": 123456,
            "nullable": false
          },
          "name": {
            "description": "Public name for the campaign series",
            "type": "string",
            "example": "Test Campaign Series"
          },
          "updated_at": {
            "description": "Date/time of record last updated",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignCollectionFillable": {
        "title": "Campaign Collection Fillable",
        "properties": {
          "name": {
            "description": "Public name for the campaign series",
            "type": "string",
            "example": "Test Campaign Series"
          },
          "description": {
            "description": "Description of the campaign series",
            "type": "string",
            "example": "Annual 5k to raise funds for our mission"
          }
        },
        "type": "object"
      },
      "CampaignSeriesIterationFillable": {
        "title": "Fillable Campaign Series Iteration",
        "properties": {
          "end_date": {
            "description": "Date on which the Campaign Series Iteration ends",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": true
          },
          "num_donors_goal": {
            "description": "Donors goal for Campaign Series Iteration",
            "type": "integer",
            "format": "integer",
            "example": 1000,
            "nullable": true
          },
          "num_fundraisers_goal": {
            "description": "Fundraiser goal for Campaign Series Iteration",
            "type": "integer",
            "format": "integer",
            "example": 1000,
            "nullable": true
          },
          "num_recurring_donors_goal": {
            "description": "Recurring goal for Campaign Series Iteration",
            "type": "integer",
            "format": "integer",
            "example": 1000,
            "nullable": true
          },
          "num_teams_goal": {
            "description": "Team goal for Campaign Series Iteration",
            "type": "integer",
            "format": "integer",
            "example": 1000,
            "nullable": true
          },
          "total_fundraising_goal": {
            "description": "Total fundraising goal for Campaign Series Iteration",
            "type": "integer",
            "format": "float",
            "example": 1000,
            "nullable": true
          },
          "total_online_fundraising_goal": {
            "description": "Total online fundraising goal for Campaign Series Iteration",
            "type": "integer",
            "format": "float",
            "example": 1000,
            "nullable": true
          },
          "start_date": {
            "description": "Date on which the Campaign Series Iteration starts",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": true
          },
          "previous_iteration_id": {
            "description": "The parent reference iteration representing the 'previous iteration'",
            "type": "integer",
            "format": "integer",
            "example": 145987,
            "nullable": true
          },
          "campaign_template_id": {
            "description": "The template used when creating new campaigns in this iteration",
            "type": "integer",
            "format": "integer",
            "example": 245798,
            "nullable": true
          }
        },
        "type": "object"
      },
      "CampaignSeriesIteration": {
        "title": "Campaign Series Iteration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignSeriesIterationFillable"
          },
          {
            "$ref": "#/components/schemas/CampaignCollectionFillable"
          },
          {
            "properties": {
              "created_by": {
                "description": "Created By Member Id",
                "type": "integer",
                "example": 2012,
                "nullable": true
              },
              "id": {
                "description": "Campaign Series Iteration Entity Id",
                "type": "integer",
                "example": 45621,
                "nullable": true
              },
              "created_at": {
                "description": "Date/time of initial record creation",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of record last updated",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "CampaignSeriesRegionFillable": {
        "title": "Fillable Campaign Series Region",
        "type": "object"
      },
      "CampaignSeriesRegion": {
        "title": "Campaign Series Region",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CampaignSeriesRegionFillable"
          },
          {
            "$ref": "#/components/schemas/CampaignCollectionFillable"
          },
          {
            "properties": {
              "created_by": {
                "description": "Created By Member Id",
                "type": "integer",
                "example": 2012,
                "nullable": true
              },
              "id": {
                "description": "Campaign Series Region Entity Id",
                "type": "integer",
                "example": 45621,
                "nullable": true
              },
              "created_at": {
                "description": "Date/time of initial record creation",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of record last updated",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-04-23T08:23:21Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "Pages": {
        "title": "Studio Campaign Pages",
        "description": "Presentational data of associated Studio Campaign",
        "properties": {
          "_id": {
            "description": "Primary resource identifier",
            "type": "string",
            "readOnly": true,
            "example": "6446d9105ced6997ff682618"
          },
          "theme": {
            "properties": {
              "": {
                "type": "string",
                "example": "rgb(66, 92, 205)",
                "patternProperties": "^--"
              }
            },
            "type": "object"
          },
          "sharedBlocks": {
            "properties": {
              "": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["header", "footer"],
                    "example": "header"
                  },
                  "props": {
                    "type": "object"
                  }
                },
                "type": "object",
                "patternProperties": "^[a-zA-Z0-9_-]+$"
              }
            },
            "type": "object"
          },
          "pages": {
            "properties": {
              "": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["landing", "donation", "thank-you"],
                    "example": "landing"
                  },
                  "blocks": {
                    "properties": {
                      "": {
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "activity-feed",
                              "blockquote",
                              "canvas",
                              "custom-code",
                              "donation",
                              "faq",
                              "footer",
                              "header",
                              "heading",
                              "image",
                              "impact",
                              "layout",
                              "link-button",
                              "paragraph",
                              "progress-metrics",
                              "section",
                              "share-button",
                              "social-links",
                              "title",
                              "transaction-details",
                              "video"
                            ],
                            "example": "canvas"
                          },
                          "props": {
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "patternProperties": "^[a-zA-Z0-9_-]+$"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object",
                "patternProperties": "^[a-zA-Z0-9_-]+$"
              }
            },
            "type": "object"
          },
          "campaign_id": {
            "description": "Reference to Campaign",
            "type": "integer",
            "readOnly": true,
            "example": "1234"
          },
          "studio_campaign_id": {
            "description": "Primary resource identifier of Studio Campaign",
            "type": "string",
            "readOnly": true,
            "example": "642371b9efbe026d272f41e9"
          },
          "created_at": {
            "description": "Timestamp of initial creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z"
          },
          "schema_version": {
            "description": "Document Version",
            "type": "number",
            "format": "float",
            "readOnly": true,
            "example": "3.0"
          },
          "updated_at": {
            "description": "Timestamp of last update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z"
          }
        },
        "type": "object"
      },
      "StudioCampaign": {
        "title": "Studio Campaign",
        "description": "StudioCampaign model",
        "properties": {
          "_id": {
            "description": "Primary resource identifier of Studio Campaign",
            "type": "string",
            "readOnly": true,
            "example": "642371b9efbe026d272f41e9"
          },
          "campaign_data": {
            "$ref": "#/components/schemas/Campaign"
          },
          "campaign_status": {
            "description": "Status of associated legacy campaign",
            "type": "string",
            "enum": ["active", "deactivated", "draft", "unpublished"],
            "example": "active"
          },
          "checkout": {
            "$ref": "#/components/schemas/CheckoutSettings"
          },
          "modules": {
            "description": "Representation of resources related to the associated (legacy) Campaign (e.g., AppealSet, Question)",
            "properties": {
              "analytics_service_settings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnalyticsServiceSettingsModuleItem"
                }
              },
              "campaign_channel": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignChannelModuleItem"
                }
              },
              "donation_matching_plan": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DonationMatchingPlanModuleItem"
                }
              },
              "ecard": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EcardModuleItem"
                }
              }
            },
            "type": "object"
          },
          "version": {
            "description": "The individual version number of the studio campaign. When a new draft studio campaign is created, this value is incremented.",
            "type": "integer",
            "readOnly": true,
            "example": "1"
          },
          "campaign_id": {
            "description": "Primary identifier of associated (legacy) Campaign",
            "type": "integer",
            "readOnly": true,
            "example": "227362"
          },
          "organization_id": {
            "description": "Organization ID",
            "type": "integer",
            "readOnly": true,
            "example": "82364"
          },
          "owner_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "readOnly": true,
            "example": "2012"
          },
          "published_at": {
            "description": "Timestamp of last publish event",
            "type": "string",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z",
            "nullable": true
          },
          "schema_version": {
            "description": "The version number of the schema used to define the structure of the studio campaign",
            "type": "number",
            "format": "float",
            "readOnly": true,
            "example": "1.0"
          }
        },
        "type": "object"
      },
      "CheckoutSettings": {
        "title": "CheckoutSettings",
        "description": "Checkout settings",
        "properties": {
          "cart": {
            "description": "Cart settings",
            "properties": {
              "is_enabled": {
                "description": "Indicates whether cart functionality has been enabled",
                "type": "boolean",
                "example": false
              }
            },
            "type": "object"
          },
          "revenue_location_code": {
            "description": "Revenue location code (RLC) mapping settings",
            "properties": {
              "enabled": {
                "description": "Indicates whether revenue location code (RLC) mapping is enabled, allowing a designation to be automatically assigned based on a donor's ZIP code",
                "type": "boolean",
                "example": false
              }
            },
            "type": "object"
          },
          "recurring_frequencies": {
            "description": "The recurring donation frequencies available for the studio campaign",
            "type": "array",
            "items": {
              "properties": {
                "label": {
                  "type": "string",
                  "example": "monthly"
                },
                "enabled": {
                  "description": "Indicates whether the recurring frequency is enabled",
                  "type": "boolean",
                  "example": true
                },
                "default": {
                  "description": "Indicates whether the recurring frequency is the default",
                  "type": "boolean",
                  "example": true
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "AnalyticsServiceSettingsModuleItem": {
        "$ref": "#/components/schemas/AnalyticsServiceSettings"
      },
      "CampaignChannelModuleItem": {
        "$ref": "#/components/schemas/CampaignChannel"
      },
      "DonationMatchingPlanModuleItem": {
        "title": "DonationMatchingPlanModuleItem",
        "required": [
          "business_name",
          "currency_code",
          "matching_limit_amount",
          "started_at",
          "ended_at"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DonationMatchingPlan"
          },
          {
            "properties": {
              "ended_at": {
                "nullable": true
              },
              "matched_amount": {
                "description": "This field is not included",
                "deprecated": true
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "planId": {
                "description": "Optional identifier for the array item in the module",
                "type": "string",
                "example": "K7KAJuFfOtN247yVV6q0d"
              },
              "business_image_url": {
                "description": "Image URL of the sponsor's logo",
                "type": "string",
                "example": "https://staging-assets.classy-test.org/4448319/67107a00-f122-11ee-b741-06a752ad67eb.jpg",
                "nullable": true
              },
              "matching_multiplier": {
                "description": "The rate at which the sponsor will match a donation (e.g., 1x, 2x, 3x, 4x)",
                "type": "numeric",
                "example": "2"
              },
              "minimum_donation_amount": {
                "description": "The minimum donation amount required for the sponsor to match a donation",
                "type": "numeric",
                "minimum": "1.0",
                "example": "5.0"
              }
            },
            "type": "object"
          }
        ]
      },
      "EcardModuleItem": {
        "title": "EcardModuleItem",
        "properties": {
          "id": {
            "description": "Primary identifier of Ecard",
            "type": "integer",
            "readOnly": true,
            "example": 13116
          },
          "asset_id": {
            "description": "Primary identifier of Asset",
            "type": "integer",
            "example": 458792
          },
          "order": {
            "description": "The display order of the Ecard",
            "type": "integer",
            "example": 0
          },
          "image_url": {
            "description": "Public URL for the Ecard",
            "type": "string",
            "example": "https://staging-assets.classy-test.org/4448319/0b06dd56-5caa-11ee-b69a-063a4cda0afb.jpg"
          }
        },
        "type": "object"
      },
      "Cart": {
        "title": "Cart",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "capabilities": {
            "description": "Array of special capabilities on a Cart. Can only be set on Cart Creation",
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["buy-unavailable-tickets", "skip-custom-questions"],
              "example": "buy-unavailable-tickets"
            }
          },
          "dedication_ecard_id": {
            "description": "Primary identifier of the eCard for the Dedication. Can only be set if a Dedication is present",
            "type": "integer",
            "example": 672
          },
          "dedication_honoree_name": {
            "description": "The name or association of the honoree that they want to use. Has to be set with Dedication type",
            "type": "string",
            "maxLength": 255,
            "example": "Smith"
          },
          "dedication_message": {
            "description": "The message to be displayed in an eCard. Can only be set if a Dedication is present",
            "type": "string",
            "example": "Happy Mothers Day Mom!"
          },
          "dedication_recipient_email": {
            "description": "The email address for the Dedication. Can only be set if a Dedication is present. Has to be set if there is a Dedication eCard",
            "type": "string",
            "maxLength": 255,
            "example": "jane@classy.org"
          },
          "dedication_recipient_name": {
            "description": "The full name associated honoree. Can only be set if a Dedication is present. Has to be set if there is a Dedication eCard",
            "type": "string",
            "maxLength": 255,
            "example": "Susan Smith"
          },
          "dedication_type": {
            "description": "Type of Dedication the Donation is for. Has to be set with Dedication honoree name",
            "type": "string",
            "enum": ["honor", "memory"],
            "example": "honor"
          },
          "donation_amount": {
            "description": "Amount the user is willing to donate (give) on top of what they are purchasing. Must be set if donation_frequency and donation_fee_on_top is set",
            "type": "integer",
            "format": "float",
            "example": null
          },
          "donation_answers": {
            "description": "Answers to Donation custom Questions. Can only be set if a Donation has been added to the Cart",
            "type": "array",
            "items": {}
          },
          "donation_applied_fot_percent": {
            "description": "Fee-on-top percent value that the final Donation should be adjusted by",
            "type": "integer",
            "format": "float",
            "example": null
          },
          "donation_currency_code": {
            "description": "3 char currency code for currency the Donation is in",
            "type": "string",
            "example": null
          },
          "donation_designation_id": {
            "description": "Primary identifier of of the designation the Donation will be allocated to",
            "type": "integer",
            "example": null
          },
          "donation_fee_on_top": {
            "description": "Indicates whether fee-on-top functionality will be applied to the Donation when the Cart is confirmed",
            "type": "boolean",
            "example": null
          },
          "donation_frequency": {
            "description": "Frequency of the Donation",
            "type": "string",
            "enum": ["monthly", "one-time", "quarterly", "yearly"],
            "example": null
          },
          "donation_is_anonymous": {
            "description": "Indicates whether the Donation is anonymous or no",
            "type": "boolean",
            "example": null
          },
          "donation_is_gift_aid": {
            "description": "Indicates whether the donor opts into gift aid used by the UK or not. Can only be set if the Organization allows it",
            "type": "boolean",
            "example": null
          },
          "donation_transaction_id": {
            "description": "Primary identifier of of the Transaction the Donation is allocated to",
            "type": "integer",
            "example": null
          },
          "email_address": {
            "description": "Email Address",
            "type": "string",
            "maxLength": 255,
            "example": "hello@world.com"
          },
          "expires_at": {
            "description": "Date/time of expiration",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 343127,
            "nullable": false
          },
          "page_id": {
            "description": "Primary identifier of the Fundraising Page the Donation is credited to",
            "type": "integer",
            "example": 2173528
          },
          "promo_code_id": {
            "description": "Primary identifier of the Promo Code applied to the Cart",
            "type": "integer",
            "example": 234
          },
          "registrant_opted_into_payment_sync": {
            "description": "Registrant has opted into storing their payment info for future classy live purchases.",
            "type": "boolean",
            "example": null
          },
          "registration_applied_fot_percent": {
            "description": "Fee-on-top percent value that the registrations contained within should be adjusted by",
            "type": "integer",
            "format": "float",
            "example": null
          },
          "registration_fee_on_top": {
            "description": "Indicates whether fee-on-top functionality will be applied on the registrants contained within",
            "type": "boolean",
            "example": null
          },
          "registration_transaction_id": {
            "description": "Primary identifier of of the Transaction the Registration is allocated to",
            "type": "integer",
            "example": null
          },
          "team_answers": {
            "description": "Answers to Donation custom Questions. Can only be set if a Donation has been added to the Cart",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Example answer"
            }
          },
          "team_description": {
            "description": "Description of the new team the Cart will create. Cannot be set when team_id is set and has to be set if team_name and team_goal is set",
            "type": "string",
            "example": "We walk to be awesome"
          },
          "team_goal": {
            "description": "Fundraising goal of the new team the Cart will create. Cannot be set when team_id is set and has to be set if team_name and team_description is set",
            "type": "integer",
            "example": 1000
          },
          "team_id": {
            "description": "Primary identifier of an existing fundraising team that includes the registrants that are joining. Has to belong to same Campaign as the Cart",
            "type": "integer",
            "example": 209745
          },
          "team_lead_id": {
            "description": "The id of the Cart Registrant what will be the Team Lead on the new Team. Can only be set if a new Team is being created. If no team_lead_id is set then the new Team's Team Lead will the Member who is purchasing the tickets",
            "type": "integer",
            "example": 765807
          },
          "team_lead_supporter_id": {
            "description": "Primary identifier of the Supporter record of the Team Lead",
            "type": "integer",
            "example": 346
          },
          "team_name": {
            "description": "Name of new Team Cart will create",
            "type": "string",
            "example": "Example Team"
          },
          "items": {
            "description": "Cart Items",
            "type": "array",
            "items": {}
          }
        },
        "type": "object"
      },
      "CartFillable": {
        "title": "Cart Fillable",
        "properties": {
          "dedication_honoree_name": {
            "description": "The name or association of the honoree that they want to use. Has to be set with Dedication type",
            "type": "string",
            "maxLength": 255,
            "example": "Smith"
          },
          "dedication_message": {
            "description": "The message to be displayed in an eCard. Can only be set if a Dedication is present",
            "type": "string",
            "example": "Happy Mothers Day Mom!"
          },
          "dedication_recipient_email": {
            "description": "The email address for the Dedication. Can only be set if a Dedication is present. Has to be set if there is a Dedication eCard",
            "type": "string",
            "maxLength": 255,
            "example": "mom@classy.org"
          },
          "dedication_recipient_name": {
            "description": "The full name associated honoree. Can only be set if a Dedication is present. Has to be set if there is a Dedication eCard",
            "type": "string",
            "maxLength": 255,
            "example": "Susan Smith"
          },
          "dedication_type": {
            "description": "type of Dedication the Donation is for. Has to be set with Dedication honoree name",
            "type": "string",
            "enum": ["honor", "memory"],
            "example": "honor"
          },
          "donation_amount": {
            "description": "Amount the user is willing to Donate (give) on top of what they are purchasing. Must be set if donation_frequency and donation_fee_on_top is set",
            "type": "integer",
            "format": "float",
            "example": 50.5
          },
          "donation_answers": {
            "description": "Answers to Donation custom Questions. Can only be set if a Donation has been added to the Cart",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Example answer"
            }
          },
          "donation_applied_fot_percent": {
            "description": "Fee-on-top percent value that the final Donation should be adjusted by",
            "type": "integer",
            "format": "float",
            "example": 7.5
          },
          "donation_currency_code": {
            "description": "3 char currency code for currency the Donation is in",
            "type": "string",
            "example": "USD"
          },
          "donation_designation_id": {
            "description": "Primary identifier of of the Designation the Donation will be allocated to",
            "type": "integer",
            "example": 34672
          },
          "donation_frequency": {
            "description": "Frequency of the Donation",
            "type": "string",
            "enum": ["monthly", "one-time", "quarterly", "yearly"],
            "example": "monthly"
          },
          "donation_is_anonymous": {
            "description": "Indicates whether the Donation is anonymous or no",
            "type": "boolean",
            "example": false
          },
          "donation_is_gift_aid": {
            "description": "Indicates whether the donor opts into gift aid used by the UK or not. Can only be set if the Organization allows it",
            "type": "boolean",
            "example": false
          },
          "registrant_opted_into_payment_sync": {
            "description": "Registrant has opted into storing their payment info for future classy live purchases.",
            "type": "boolean",
            "example": null
          },
          "email_address": {
            "description": "Email Address",
            "type": "string",
            "maxLength": 255,
            "example": "hello@world.com"
          },
          "registration_applied_fot_percent": {
            "description": "Fee-on-top percent value that the registrations contained within should be adjusted by",
            "type": "integer",
            "format": "float",
            "example": 5.5
          },
          "team_answers": {
            "description": "Answers to Donation custom Questions. Can only be set if a Donation has been added to the Cart",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Example answer"
            }
          },
          "team_description": {
            "description": "Description of the new Team the Cart will create. Cannot be set when team_id is set and has to be set if team_name and team_goal is set",
            "type": "string",
            "example": "We walk to be awesome"
          },
          "team_goal": {
            "description": "Fundraising goal of the new Team the Cart will create. Cannot be set when team_id is set and has to be set if team_name and team_description is set",
            "type": "integer",
            "example": 1000
          },
          "team_name": {
            "description": "Name of new Team Cart will create",
            "type": "string",
            "example": "Example Team"
          }
        },
        "type": "object"
      },
      "CartUnconfirmed": {
        "title": "Cart Unconfirmed",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Cart"
          },
          {
            "properties": {
              "donation_amount": {
                "type": "integer",
                "format": "float",
                "example": 50.5
              },
              "donation_answers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "Example answer"
                }
              },
              "donation_applied_fot_percent": {
                "type": "integer",
                "format": "float",
                "example": 7.5
              },
              "donation_currency_code": {
                "type": "string",
                "example": "USD"
              },
              "donation_designation_id": {
                "type": "integer",
                "example": 34672
              },
              "donation_fee_on_top": {
                "type": "boolean",
                "example": true
              },
              "donation_frequency": {
                "type": "string",
                "example": "monthly"
              },
              "donation_is_anonymous": {
                "type": "boolean",
                "example": false
              },
              "donation_is_gift_aid": {
                "type": "boolean",
                "example": false
              },
              "registration_applied_fot_percent": {
                "type": "integer",
                "format": "float",
                "example": 5.5
              },
              "registration_fee_on_top": {
                "type": "boolean",
                "example": true
              }
            },
            "type": "object"
          }
        ]
      },
      "CartConfirmed": {
        "title": "Cart Confirmed",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CartUnconfirmed"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "donation_transaction_id": {
                "type": "integer",
                "example": 1427264
              },
              "registration_transaction_id": {
                "type": "integer",
                "example": 62376
              },
              "registration_transaction": {
                "$ref": "#/components/schemas/RegistrationTransaction"
              },
              "donation_transaction": {
                "$ref": "#/components/schemas/DonationTransaction"
              }
            },
            "type": "object"
          }
        ]
      },
      "CartCompleted": {
        "title": "Cart Completed",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CartConfirmed"
          },
          {
            "properties": {
              "registration_transaction": {
                "$ref": "#/components/schemas/RegistrationTransactionSuccess"
              },
              "donation_transaction": {
                "$ref": "#/components/schemas/DonationTransactionSuccess"
              },
              "expires_at": {
                "type": "string",
                "example": null
              }
            },
            "type": "object"
          }
        ]
      },
      "CartItem": {
        "title": "Cart Item",
        "properties": {
          "adjustment_amount": {
            "description": "Adjustment amount",
            "type": "integer",
            "example": 23
          },
          "cart_id": {
            "description": "Primary identifier of associated Cart",
            "type": "integer",
            "example": 343127,
            "nullable": false
          },
          "entries": {
            "description": "Amount of entries",
            "type": "integer",
            "example": 5,
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 84384,
            "nullable": false
          },
          "overhead_amount": {
            "description": "Flat dollar amount of overhead fees",
            "type": "integer",
            "example": 5,
            "nullable": false
          },
          "price": {
            "description": "Price of the Product at the time it became a CartItem",
            "type": "integer",
            "example": 50,
            "nullable": false
          },
          "product_id": {
            "description": "Primary identifier of associated Product",
            "type": "integer",
            "example": 73647,
            "nullable": false
          },
          "promo_code_id": {
            "description": "Primary identifier of associated Promo Code",
            "type": "integer",
            "example": 234,
            "nullable": false
          },
          "registrants": {
            "description": "Array of Cart Registrants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartRegistrant"
            }
          },
          "transaction_item_id": {
            "description": "Primary identifier of associated Transaction Item",
            "type": "integer",
            "example": 62736
          }
        },
        "type": "object"
      },
      "CartRegistrant": {
        "title": "Cart Registrant",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 765807,
            "nullable": false
          },
          "cart_item_id": {
            "description": "Primary identifier of associated Cart",
            "type": "integer",
            "example": 84384,
            "nullable": false
          },
          "first_name": {
            "description": "Registrant first name",
            "type": "string",
            "maxLength": 255,
            "example": "John"
          },
          "last_name": {
            "description": "Registrant last name",
            "type": "string",
            "maxLength": 255,
            "example": "Doe"
          },
          "email_address": {
            "description": "Registrant email address",
            "type": "string",
            "example": "hello@classy.com"
          },
          "answers": {
            "description": "Answers to Registration custom Questions",
            "type": "array",
            "items": {
              "properties": {
                "answer": {
                  "description": "Answer to the Question",
                  "type": "string",
                  "example": "yes"
                },
                "question_id": {
                  "description": "Primary Identifier of Question being answered",
                  "type": "integer",
                  "example": 45678
                }
              },
              "type": "object"
            }
          },
          "registration_id": {
            "description": "Primary identifier of associated Registration",
            "type": "integer",
            "example": 87349,
            "nullable": false
          },
          "donation_share": {
            "description": "The number of shares the Cart Registrant's fundraising page will receive from the additional Donation",
            "type": "integer",
            "example": 100
          }
        },
        "type": "object"
      },
      "CartRegistrantFillable": {
        "title": "Cart Registrant Fillable",
        "properties": {
          "first_name": {
            "description": "Registrant first name",
            "type": "string",
            "maxLength": 255,
            "example": "John"
          },
          "last_name": {
            "description": "Registrant last name",
            "type": "string",
            "maxLength": 255,
            "example": "Doe"
          },
          "email_address": {
            "description": "Registrant email address",
            "type": "string",
            "example": "hello@classy.com"
          },
          "answers": {
            "description": "Answers to registration custom Questions",
            "type": "array",
            "items": {
              "properties": {
                "answer": {
                  "description": "Answer to the Question",
                  "type": "string",
                  "example": "yes"
                },
                "question_id": {
                  "description": "Primary Identifier of Question being answered",
                  "type": "integer",
                  "example": 45678
                }
              },
              "type": "object"
            }
          },
          "donation_share": {
            "description": "The number of shares the CartRegistrant's Fundraising Page will receive from the additional Donation",
            "type": "integer",
            "example": 100
          }
        },
        "type": "object"
      },
      "CampaignChannel": {
        "title": "Campaign Channel",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "readOnly": true,
            "example": 423,
            "nullable": false
          },
          "channel_name": {
            "description": "Name of Integration Channel",
            "type": "string",
            "enum": ["Facebook", "Instagram", "DoubletheDonation"],
            "example": "Facebook",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "readOnly": true,
            "example": 73625,
            "nullable": false
          },
          "status": {
            "description": "Status of Campaign Channel",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "metadata": {
            "description": "Additional Campaign settings data in JSON format",
            "properties": {
              "employer_match_on_donation_page": {
                "description": "Indicates whether there is an employer match on donation page",
                "type": "boolean",
                "example": true
              },
              "employer_match_on_thankyou_page": {
                "description": "Indicates whether there is an employer match on thankyou page",
                "type": "boolean",
                "example": true
              },
              "employer_match_preselect": {
                "description": "Indicates whether there is an employer match preselect",
                "type": "boolean",
                "example": true
              }
            },
            "type": "object"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "ChannelEvent": {
        "title": "Channel Event",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 73625,
            "nullable": false
          },
          "eventable_id": {
            "description": "Primary identifier of associated entity",
            "type": "integer",
            "example": 423,
            "nullable": false
          },
          "eventable_type": {
            "description": "Object name of the associated entity (campaign or organization)",
            "type": "string",
            "example": "campaign",
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 423,
            "nullable": false
          },
          "event": {
            "description": "Event data in JSON format, fields included with vary based on event",
            "properties": {
              "action_source": {
                "description": "Source of the event action",
                "type": "string",
                "enum": ["website"],
                "example": "website"
              },
              "client_ip_address": {
                "description": "IP address of the client from which the event was sent",
                "type": "string",
                "example": "191.255.255.255"
              },
              "client_user_agent": {
                "description": "User agent of the client from which the event was sent",
                "type": "string",
                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
              },
              "content_category": {
                "description": "Field sent to Meta to distinguish between one time and recurring donations",
                "type": "string",
                "enum": ["recurring", "one-time"],
                "example": "recurring"
              },
              "content_name": {
                "description": "Name of content being purchased or added to cart",
                "type": "string",
                "example": "ticket to see Joan of Arc play the intro riff to Under Pressure for over a half hour"
              },
              "content_url": {
                "description": "Url of a ViewContent event",
                "type": "string",
                "example": "https://www.classy.loc/give/5/#!/donation/checkout"
              },
              "currency": {
                "description": "Currency code for a purchase",
                "type": "string",
                "example": "USD"
              },
              "donation_frequency": {
                "description": "Frequency of a donation",
                "type": "string",
                "example": "Recurring"
              },
              "event_id": {
                "description": "Id generated in browser used to match client and server events",
                "type": "string",
                "example": "123456789.987645321"
              },
              "event_name": {
                "description": "Event name before it is mapped to Meta specific event name",
                "type": "string",
                "example": "donation/create/complete"
              },
              "event_source_url": {
                "description": "Url where the event takes place",
                "type": "string",
                "example": "https://www.classy.loc/give/5/#!/donation/checkout"
              },
              "event_time": {
                "description": "A Unix timestamp in seconds indicating when the actual event occurred",
                "type": "integer",
                "example": 1656347595
              },
              "facebook_browser_id": {
                "description": "Facebook browser id cookie",
                "type": "string",
                "example": "fb.1.1596403881668.1116446470"
              },
              "facebook_click_id": {
                "description": "Facebook click id cookie",
                "type": "string",
                "example": "fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890"
              },
              "items": {
                "description": "Number of items in a cart",
                "type": "integer",
                "example": 3
              },
              "meta_event_name": {
                "description": "The name of the meta event we will send",
                "type": "string",
                "enum": [
                  "AddToCart",
                  "CompleteRegistration",
                  "InitiateCheckout",
                  "Purchase",
                  "ViewContent"
                ],
                "example": "AddToCart"
              },
              "value": {
                "description": "Value of an item",
                "type": "integer",
                "example": 3
              }
            },
            "type": "object"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "ChannelEventFillable": {
        "title": "Channel Event Fillable",
        "properties": {
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 423,
            "nullable": true
          },
          "event": {
            "description": "Event data in JSON format, fields included will vary based on event",
            "properties": {
              "action_source": {
                "description": "Source of the event action",
                "type": "string",
                "enum": ["website"],
                "example": "website"
              },
              "client_ip_address": {
                "description": "IP address of the client from which the event was sent",
                "type": "string",
                "example": "191.255.255.255"
              },
              "client_user_agent": {
                "description": "User agent of the client from which the event was sent",
                "type": "string",
                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
              },
              "content_category": {
                "description": "Field sent to Meta to distinguish between one time and recurring donations",
                "type": "string",
                "enum": ["recurring", "one-time"],
                "example": "recurring"
              },
              "content_name": {
                "description": "Name of content being purchased or added to cart",
                "type": "string",
                "example": "ticket to see Joan of Arc play the intro riff to Under Pressure for over a half hour"
              },
              "content_url": {
                "description": "Url of a ViewContent event",
                "type": "string",
                "example": "https://www.classy.loc/give/5/#!/donation/checkout"
              },
              "currency": {
                "description": "Currency code for a purchase",
                "type": "string",
                "example": "USD"
              },
              "donation_frequency": {
                "description": "Frequency of a donation",
                "type": "string",
                "example": "Recurring"
              },
              "event_id": {
                "description": "Id generated in browser used to match client and server events",
                "type": "string",
                "example": "123456789.987645321"
              },
              "event_name": {
                "description": "Event name before it is mapped to Meta specific event name",
                "type": "string",
                "example": "donation/create/complete"
              },
              "event_source_url": {
                "description": "Url where the event takes place",
                "type": "string",
                "example": "https://www.classy.loc/give/5/#!/donation/checkout"
              },
              "event_time": {
                "description": "A Unix timestamp in seconds indicating when the actual event occurred",
                "type": "integer",
                "example": 1656347595
              },
              "facebook_browser_id": {
                "description": "Facebook browser id cookie",
                "type": "string",
                "example": "fb.1.1596403881668.1116446470"
              },
              "facebook_click_id": {
                "description": "Facebook click id cookie",
                "type": "string",
                "example": "fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890"
              },
              "items": {
                "description": "Number of items in a cart",
                "type": "integer",
                "example": 3
              },
              "meta_event_name": {
                "description": "The name of the meta event we will send",
                "type": "string",
                "enum": [
                  "AddToCart",
                  "CompleteRegistration",
                  "InitiateCheckout",
                  "Purchase",
                  "ViewContent"
                ],
                "example": "AddToCart"
              },
              "value": {
                "description": "Value of an item",
                "type": "integer",
                "example": 3
              },
              "meta_test_event_code": {
                "description": "Event code attached to request we will pass through to meta for test events",
                "type": "string",
                "example": "TEST12345"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ChannelFundraisingEntity": {
        "title": "Channel Fundraising Entity",
        "properties": {
          "channel_name": {
            "description": "The name of Integration Channel",
            "type": "string",
            "maxLength": 30,
            "enum": ["Facebook", "Instagram", "DoubletheDonation"],
            "example": "Facebook",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "deleted_at": {
            "description": "Date/time of deletion",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "external_fundraising_page_id": {
            "description": "Channel provided Fundraising Page ID",
            "type": "string",
            "maxLength": 35,
            "example": "186503750172710"
          },
          "fundraising_entity_id": {
            "description": "Classy Fundraising Entity ID",
            "type": "integer",
            "example": 72634,
            "nullable": false
          },
          "fundraising_entity_type": {
            "description": "Classy Fundraising Entity type",
            "type": "integer",
            "enum": ["campaign", "fundraising page"],
            "example": "campaign",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 23742,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "ChannelFundraisingEntityFillable": {
        "title": "Channel Fundraising Entity Fillable",
        "properties": {
          "channel_name": {
            "description": "The name of Integration Channel",
            "type": "string",
            "maxLength": 30,
            "enum": ["Facebook", "Instagram", "DoubletheDonation"],
            "example": "Facebook",
            "nullable": false
          },
          "external_fundraising_page_id": {
            "description": "Channel provided Fundraising Page ID",
            "type": "string",
            "maxLength": 35,
            "example": "186503750172710"
          }
        },
        "type": "object"
      },
      "ChannelIntegrationDetails": {
        "title": "Channel Integration Details",
        "properties": {
          "accessible_metadata": {
            "description": "Primary identifier of associated Member",
            "properties": {
              "fb_campaign_id": {
                "description": "Campaign ID to associate Facebook transactions",
                "type": "string",
                "example": "579025"
              },
              "ig_campaign_id": {
                "description": "Campaign ID to associate Instagram transactions",
                "type": "string",
                "example": "515574"
              },
              "public_key": {
                "description": "Encrypted public key for Organization's DTD integration",
                "type": "string",
                "example": "LUWSuZ8ww4a8YGyu"
              },
              "show_classy_reporting": {
                "description": "Indicates whether reporting for DTD is enabled",
                "type": "string",
                "example": true
              }
            },
            "type": "object",
            "nullable": false
          },
          "app_id": {
            "description": "Primary identifier of Organization's Channel App",
            "type": "string",
            "example": "2316320761803798",
            "nullable": false
          },
          "app_secret_key": {
            "description": "Last 4 characters of App Secret Key for Organization's Channel App",
            "type": "string",
            "example": "fd2f4",
            "nullable": false
          },
          "external_organization_page_id": {
            "description": "Primary identifier of Page created on Channel by Organization",
            "type": "string",
            "example": "35697977991",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 101,
            "nullable": false
          },
          "organization_channel_id": {
            "description": "Primary identifier of associated Organization Channel",
            "type": "integer",
            "example": 8799,
            "nullable": false
          },
          "api_app_id": {
            "description": "Primary identifier of associated ApiApps record",
            "type": "integer",
            "example": 8799,
            "nullable": true
          }
        },
        "type": "object"
      },
      "ChannelIntegrationDetailsFillable": {
        "title": "Channel Integration Details Fillable",
        "properties": {
          "app_id": {
            "description": "Primary identifier of Organization's Channel App",
            "type": "string",
            "example": "2316320761803798",
            "nullable": false
          },
          "app_secret_key": {
            "description": "Last 4 characters of App Secret Key for Organization's Channel App",
            "type": "string",
            "example": "fd2f4",
            "nullable": false
          },
          "external_organization_page_id": {
            "description": "Primary identifier of page created on Channel by Organization",
            "type": "string",
            "example": "35697977991",
            "nullable": false
          }
        },
        "type": "object"
      },
      "OrganizationChannel": {
        "title": "Organization Channel",
        "properties": {
          "additional_configurations": {
            "description": "",
            "type": "string",
            "enum": ["DoubleTheDonation", "Facebook"],
            "example": "Facebook"
          },
          "channel_name": {
            "description": "The name of Integration Channel",
            "type": "string",
            "example": "Facebook",
            "nullable": false
          },
          "channel_integration_details_id": {
            "description": "Primary identifier of associated Channel Integration details",
            "type": "integer",
            "example": 101
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 2437,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          },
          "status": {
            "description": "Status of Organization Channel",
            "type": "string",
            "enum": ["enabled", "disabled"],
            "example": "disabled"
          },
          "step_statuses": {
            "description": "Status of all steps of Integration Channel",
            "properties": {
              "authorize_granted": {
                "type": "boolean",
                "example": true
              },
              "granted_fundraiser_permission": {
                "type": "boolean",
                "example": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "OrganizationChannelFillable": {
        "title": "Organization Channel Fillable",
        "properties": {
          "channel_name": {
            "description": "The name of Integration Channel",
            "type": "string",
            "example": "Facebook",
            "nullable": false
          }
        },
        "type": "object"
      },
      "Comment": {
        "title": "Comment",
        "properties": {
          "body": {
            "description": "The content of the Comment",
            "type": "string",
            "example": "Example Comment",
            "nullable": false
          },
          "commentable_id": {
            "description": "Primary identifier of associated Commentable Entity",
            "type": "integer",
            "example": 876,
            "nullable": false
          },
          "commentable_type": {
            "description": "Type of associated Commentable Entity",
            "type": "string",
            "enum": ["feed_item", "update", "story"],
            "example": "feed_item",
            "nullable": false
          },
          "commenter_name": {
            "description": "The full name of the creator of the Comment",
            "type": "string",
            "example": "Classy Commenter",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 47281,
            "nullable": false
          },
          "likes_count": {
            "description": "Amount of likes a Comment has received",
            "type": "integer",
            "example": 5
          },
          "member_id": {
            "description": "The ID of the Member that created of the Comment",
            "type": "integer",
            "example": 2012
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "CommentFillable": {
        "title": "Comment Fillable",
        "properties": {
          "body": {
            "description": "The content of the Comment",
            "type": "string",
            "example": "Example Comment",
            "nullable": false
          }
        },
        "type": "object"
      },
      "StoryComment": {
        "title": "Comment (Story)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Comment"
          },
          {
            "properties": {
              "commentable_id": {
                "type": "integer",
                "example": 72552
              },
              "commentable_type": {
                "type": "string",
                "example": "story"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateComment": {
        "title": "Comment (Update)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Comment"
          },
          {
            "properties": {
              "commentable_id": {
                "type": "integer",
                "example": 736
              },
              "commentable_type": {
                "type": "string",
                "example": "update"
              }
            },
            "type": "object"
          }
        ]
      },
      "ConsentDecision": {
        "title": "Consent Decision",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 9753,
            "nullable": false
          },
          "supporter_id": {
            "description": "Primary identifier of associated Supporter",
            "type": "integer",
            "example": 5827,
            "nullable": false
          },
          "initiator_id": {
            "description": "Primary identifier of the Member that created this record",
            "type": "integer",
            "example": 2012
          },
          "opted_in": {
            "description": "Indicates whether the Supported opted in to communication or not",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          },
          "language": {
            "description": "Consent language displayed",
            "type": "string",
            "maxLength": 255,
            "example": "I consent to emails"
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "ConsentDecisionFillable": {
        "title": "Consent Decision Fillable",
        "properties": {
          "opted_in": {
            "description": "Indicates whether the Supported opted in to communication or not",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "language": {
            "description": "Consent language displayed",
            "type": "string",
            "maxLength": 255,
            "example": "I consent to emails"
          }
        },
        "type": "object"
      },
      "RestrictedCountry": {
        "title": "Restricted Country",
        "properties": {
          "country": {
            "description": "ISO-31066-1 country code",
            "type": "string",
            "maxLength": 3,
            "example": "US",
            "nullable": false
          },
          "country_restriction_id": {
            "description": "Primary identifier of associated Country Restriction",
            "type": "integer",
            "example": 135,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "RestrictedCountryFillable": {
        "title": "Restricted Country Fillable",
        "properties": {
          "countries": {
            "description": "List of Restricted Countries",
            "type": "array",
            "items": {
              "type": "string",
              "example": "US"
            },
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignCredentialSet": {
        "title": "Campaign Credential Set",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 927483,
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          }
        },
        "type": "object"
      },
      "OrganizationCredentialSet": {
        "title": "Organization Credential Set",
        "properties": {
          "activity_wall": {
            "description": "Indicates whether or not the Member has activity_wall access",
            "type": "boolean",
            "example": true
          },
          "campaign_manager": {
            "description": "Indicates whether or not the Member has campaign_manager access",
            "type": "boolean",
            "example": true
          },
          "global_admin": {
            "description": "Indicates whether or not the Member has global_admin access",
            "type": "boolean",
            "example": true
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 82374,
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          },
          "reporting_access": {
            "description": "Indicates whether or not the Member has reporting_access",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object"
      },
      "OrganizationCredentialSetFillable": {
        "title": "Organization Credential Set Fillable",
        "properties": {
          "activity_wall": {
            "description": "Indicates whether or not the Member has activity_wall access",
            "type": "boolean",
            "example": true
          },
          "campaign_manager": {
            "description": "Indicates whether or not the Member has campaign_manager access",
            "type": "boolean",
            "example": true
          },
          "global_admin": {
            "description": "Indicates whether or not the Member has global_admin access",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object"
      },
      "DomainSlug": {
        "title": "Domain Slug",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "deleted_at": {
            "description": "Date/time that record was deleted",
            "type": "string",
            "format": "date-time",
            "example": null,
            "nullable": false
          },
          "domain_id": {
            "description": "Primary identifier of associated Domain",
            "type": "integer",
            "example": 1,
            "nullable": false
          },
          "fundraising_entity_id": {
            "description": "Primary identifier of associated Fundraising Entity",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "fundraising_entity_type": {
            "description": "Type of associated Fundraising Entity",
            "type": "string",
            "enum": [
              "organization",
              "campaign",
              "fundraising_page",
              "fundraising_team"
            ],
            "example": "campaign",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 235,
            "nullable": false
          },
          "links_to_donation_page": {
            "description": "Indicates whether the slug should reference the Donation Page for the DomainSlug's Fundraising Entity",
            "type": "boolean",
            "example": false
          },
          "domain_masking_url": {
            "description": "The domain masking url of the organization",
            "type": "string",
            "example": "subdomain.domain.tld"
          },
          "updated_at": {
            "description": "Date/time when record was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "value": {
            "description": "Value of the Domain Slug",
            "type": "string",
            "maxLength": 255,
            "example": "15thbowlathon",
            "nullable": false
          }
        },
        "type": "object"
      },
      "DomainSlugFillable": {
        "title": "Domain Slug Fillable",
        "properties": {
          "links_to_donation_page": {
            "description": "Indicates whether the slug should reference the Donation Page for the DomainSlug's Fundraising Entity",
            "type": "boolean",
            "example": false
          },
          "value": {
            "description": "Value of the Domain Slug",
            "type": "string",
            "maxLength": 255,
            "example": "15thbowlathon",
            "nullable": false
          }
        },
        "type": "object"
      },
      "DomainSlugOrganization": {
        "title": "Domain Slug Organization",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainSlug"
          },
          {
            "properties": {
              "fundraising_entity_id": {
                "type": "integer",
                "example": 82364
              },
              "fundraising_entity_type": {
                "type": "string",
                "example": "organization"
              },
              "domain_masking_url": {
                "type": "string",
                "example": "subdomain.domain.tld"
              }
            },
            "type": "object"
          }
        ]
      },
      "DomainSlugPage": {
        "title": "Domain Slug Page",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainSlug"
          },
          {
            "properties": {
              "fundraising_entity_id": {
                "type": "integer",
                "example": 2173528
              },
              "fundraising_entity_type": {
                "type": "string",
                "example": "fundraising_page"
              },
              "domain_masking_url": {
                "type": "string",
                "example": "subdomain.domain.tld"
              }
            },
            "type": "object"
          }
        ]
      },
      "DomainSlugTeam": {
        "title": "Domain Slug Team",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainSlug"
          },
          {
            "properties": {
              "fundraising_entity_id": {
                "type": "integer",
                "example": 209745
              },
              "fundraising_entity_type": {
                "type": "string",
                "example": "fundraising_team"
              },
              "domain_masking_url": {
                "type": "string",
                "example": "subdomain.domain.tld"
              }
            },
            "type": "object"
          }
        ]
      },
      "EmbeddedComponents": {
        "title": "Embedded Components",
        "description": "Presentational Data of associated EmbeddedStudioComponent",
        "properties": {
          "_id": {
            "description": "Primary resource identifier",
            "type": "string",
            "readOnly": true,
            "example": "643ee442ab12f043df23dhe7"
          },
          "campaign_id": {
            "description": "Reference to Campaign",
            "type": "integer",
            "readOnly": true,
            "example": "55127"
          },
          "created_at": {
            "description": "Timestamp of initial creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2023-02-13T08:23:21Z"
          },
          "components": {
            "properties": {
              "": {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["donation-form", "buttons", "forms", "links"],
                    "example": "buttons"
                  },
                  "props": {
                    "type": "object",
                    "example": {
                      "hideRecurringEndDate": true,
                      "cssStyles": {
                        "backgroundColor": "#fcfcfc",
                        "backgroundColorOpacity": 0.5,
                        "alignXPreset": "center"
                      },
                      "donationAmounts": [
                        {
                          "name": "preset1",
                          "amount": 15,
                          "isVisible": true,
                          "isDefault": false
                        },
                        {
                          "name": "preset2",
                          "amount": 30,
                          "isVisible": true,
                          "isDefault": true
                        },
                        {
                          "name": "preset3",
                          "amount": 50,
                          "isVisible": true,
                          "isDefault": false
                        },
                        {
                          "name": "preset4",
                          "amount": 100,
                          "isVisible": true,
                          "isDefault": false
                        }
                      ],
                      "faqs": [
                        {
                          "faqId": "default_faq_0",
                          "question": "Is my donation secure?",
                          "answer": "Yes. Your security and privacy is our highest priority. We use industry-standard SSL technology to keep your information safe and secure."
                        },
                        {
                          "faqId": "default_faq_1",
                          "question": "Do I get a receipt?",
                          "answer": "Yes, we’ll send a receipt to the email address you provide when donating. The receipt will include your donation details, such as the date, amount, and any beneficiary information."
                        },
                        {
                          "faqId": "default_faq_2",
                          "question": "Do you sell or share my contact information?",
                          "answer": "No. We do not sell, trade, or share your personal information with anyone. We also do not send mailings on behalf of other organizations. We will only share personal information if you give us specific permission to do so."
                        }
                      ]
                    }
                  }
                },
                "type": "object",
                "pattern": "^[a-zA-Z0-9_-]+$"
              }
            },
            "type": "object"
          },
          "schema_version": {
            "description": "Document Version",
            "type": "number",
            "format": "float",
            "readOnly": true,
            "example": "1.0"
          },
          "studio_campaign_id": {
            "description": "Primary resource identifier of Studio Campaign",
            "type": "string",
            "readOnly": true,
            "example": "642371b9efbe026d279iwed7"
          },
          "theme": {
            "properties": {
              "": {
                "type": "string",
                "pattern": "^--",
                "example": "rgb(66, 92, 205)"
              }
            },
            "type": "object"
          },
          "updated_at": {
            "description": "Timestamp of last update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2023-02-13T08:23:21Z"
          },
          "url_params": {
            "description": "Key-Value pair for pre-populating the data",
            "type": "array",
            "items": {
              "example": {
                "currency": "USD",
                "amount": 150,
                "recurring": 12,
                "frequency": "monthly",
                "c_src": "facebook",
                "c_src2": "email",
                "campaign": 51237,
                "first": "Firstname",
                "last": "Lastname",
                "email": "firstlast@classy.org",
                "street": "101 Milkyway Dr",
                "city": "SanDiego",
                "state": "CA",
                "zip": "91911",
                "phone": "1001000000",
                "designation": 123
              }
            }
          }
        },
        "type": "object"
      },
      "Attachment": {
        "title": "Attachment",
        "properties": {
          "id": {
            "description": "Primary identifier of Attachment",
            "type": "string",
            "example": "5a60e42d8d7ff9ebd51a0e46",
            "nullable": false
          },
          "name": {
            "description": "Name of Attachment",
            "type": "string",
            "example": "donation-receipt"
          },
          "type": {
            "description": "Type of Attachment",
            "type": "string",
            "enum": ["uploaded", "generated"],
            "example": "uploaded"
          },
          "properties": {
            "description": "Customized properties for generated Attachment. These properties can have type, description and value",
            "type": "object",
            "example": {
              "type": "image_url",
              "description": "The url for the charity/campaign logo.",
              "value": "https://classy-test.org/1/6f071424-fbb2-11e7-8703-0eef75994dc5.png"
            }
          },
          "markup": {
            "description": "HTML markup for the Attachment",
            "type": "string",
            "example": "<html><head>Annual Recurring Giving Summary</head><body><div></div></body></html>"
          },
          "version": {
            "description": "document version",
            "type": "integer",
            "example": "1"
          }
        },
        "type": "object"
      },
      "AttachmentHistory": {
        "title": "Attachment History",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of AttachmentHistory",
                "type": "string",
                "example": "5a60e42d8d7ff9ebd51a0e46",
                "nullable": false
              },
              "version": {
                "description": "Attachment history. Primary identified for AttachmentHistory",
                "type": "integer",
                "example": "1"
              },
              "name": {
                "description": "Name of Attachment",
                "type": "string",
                "example": "donation-receipt"
              },
              "type": {
                "description": "Type of Attachment",
                "type": "string",
                "enum": ["uploaded", "generated"],
                "example": "uploaded"
              },
              "properties": {
                "description": "Customized properties for generated Attachment. These properties can have type, description and value",
                "type": "object",
                "example": {
                  "type": "image_url",
                  "description": "The url for the charity/campaign logo.",
                  "value": "https://classy-test.org/1/6f071424-fbb2-11e7-8703-0eef75994dc5.png"
                }
              },
              "markup": {
                "description": "HTML markup for the Attachment",
                "type": "string",
                "example": "<html><head>Annual Recurring Giving Summary</head><body><div></div></body></html>"
              }
            },
            "type": "object"
          }
        ]
      },
      "EmbeddedAttachmentFillable": {
        "title": "Embedded Attachment Fillable",
        "properties": {
          "asset_id": {
            "description": "An Asset ID would only be used for Uploaded Attachments",
            "type": "integer",
            "example": 1145
          },
          "name": {
            "description": "The file name used to attach to the image",
            "type": "string",
            "example": "my_file.pdf"
          },
          "properties": {
            "description": "The customized properties for Generated Attachments",
            "type": "object",
            "example": {
              "preheaderText": "Let’s start fundraising."
            }
          },
          "enabled": {
            "description": "Is Message Attachment enabled?",
            "type": "boolean",
            "default": true,
            "example": true
          }
        },
        "type": "object"
      },
      "EmbeddedAttachment": {
        "title": "Embedded Attachment",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmbeddedAttachmentFillable"
          },
          {
            "properties": {
              "attachment_type": {
                "description": "The source of Embedded Message Attachment",
                "type": "string",
                "default": "generated",
                "enum": ["generated", "uploaded"],
                "example": "uploaded"
              },
              "id": {
                "description": "The Embedded Message Attachment ID i.e. primary identifier of Embedded Message Attachment",
                "type": "string",
                "example": "56c225672798716f048g67fe",
                "nullable": false
              },
              "created_at": {
                "description": "Date/time of Embedded Message Attachment created",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Embedded Message Attachment last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "version": {
                "description": "document version",
                "type": "integer",
                "example": "1"
              }
            },
            "type": "object"
          }
        ]
      },
      "MessageFillable": {
        "title": "Message Fillable",
        "properties": {
          "transactional": {
            "description": "Whether the email is Transactional",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "name": {
            "description": "A friendly name for the Message",
            "type": "string",
            "example": "Welcome Email",
            "nullable": false
          },
          "message_type": {
            "description": "The type of Message that was sent",
            "type": "string",
            "default": "email",
            "enum": ["email", "sms"],
            "example": "email",
            "nullable": false
          },
          "message_context": {
            "description": "The context of the Message",
            "type": "string",
            "example": "Welcome email",
            "nullable": true
          },
          "from": {
            "description": "The name the Message should be sent from - as an alphanumeric",
            "type": "string",
            "example": "John Doe",
            "nullable": false
          },
          "template_name": {
            "description": "The name of the Template",
            "type": "string",
            "enum": [
              "admin_invite",
              "amount_goal_milestone",
              "appeal",
              "approved_join_fundraiser",
              "blank",
              "campaign_scoped_role_invite",
              "chargeback",
              "comment_notification",
              "comment_notification_fundraiser",
              "crowdfunding_receipt",
              "donation_notification_fundraiser",
              "ecard",
              "fundraising_commitment_achieved",
              "fundraising_commitment_canceled",
              "fundraising_commitment_charge_remaining",
              "fundraising_commitment_charge_specific",
              "fundraising_commitment_donation_notification_fundraiser",
              "fundraising_commitment_rwf_claim_account_primary",
              "fundraising_commitment_rwf_claim_account_secondary",
              "fundraising_commitment_updated",
              "fundraising_commitment_waived",
              "generic",
              "goal_milestone",
              "goal_reached_fundraiser",
              "member_join_request_captain",
              "member_joined_team_captain",
              "org_admin_invite",
              "org_scoped_role_invite",
              "organization_facebook_invalid_token_notification",
              "organization_facebook_whitelist_request",
              "p2p_receipt",
              "page_created_fundraiser",
              "post_creation",
              "reconciliation_report_download",
              "reconciliation_report_range_download",
              "annual_receipt",
              "recurring_annual_receipt_2018",
              "recurring_annual_receipt_2019",
              "recurring_annual_receipt_2020",
              "recurring_annual_receipt_2021",
              "recurring_donation_ended",
              "recurring_donation_failed",
              "recurring_donation_receipt",
              "recurring_profile_canceled",
              "recurring_profile_created",
              "recurring_profile_creation",
              "recurring_profile_updated",
              "registration_receipt",
              "rejected_join_fundraiser",
              "report_exported",
              "rwf_claim_account_primary",
              "rwf_claim_account_secondary",
              "rwf_receipt",
              "saved_report_completed",
              "saved_report_failed",
              "sso_claim_account",
              "sso_password_recovery",
              "sso_password_reset_link",
              "sso_reset_password_code",
              "sso_reset_password_link",
              "staff_chargeback",
              "staff_chargeback_stripe",
              "staff_fundraiser_sign_up",
              "staff_recurring_donation_ended",
              "staff_recurring_donation_failed",
              "staff_recurring_donation_receipt",
              "staff_recurring_donor",
              "staff_recurring_profile_canceled",
              "staff_recurring_profile_updated",
              "staff_registration",
              "staff_team_sign_up",
              "staff_transaction_pending",
              "staff_transaction_success",
              "team_comment_notification_captain",
              "team_donation_notification_captain",
              "team_goal_reached_captain",
              "team_invite",
              "text"
            ],
            "example": "p2p_receipt",
            "nullable": false
          },
          "template_properties": {
            "description": "Customized properties for the Template",
            "type": "array",
            "items": {
              "properties": {
                "subject": {
                  "description": "Details of Email subject",
                  "properties": {
                    "value": {
                      "description": "Email subject",
                      "type": "string",
                      "example": "Welcome to {%campaign.name|%}!"
                    },
                    "type": {
                      "description": "Email subject type",
                      "type": "string",
                      "example": "string"
                    },
                    "description": {
                      "description": "Description of the property e.g. subject",
                      "type": "string",
                      "example": "The subject of the message, which can contain merge tags."
                    }
                  },
                  "type": "object"
                },
                "bodyBackgroundColor": {
                  "description": "Details of Email body background",
                  "properties": {
                    "value": {
                      "description": "Body background color",
                      "type": "string",
                      "example": "#f8f8f8"
                    },
                    "type": {
                      "description": "Email subject type",
                      "type": "string",
                      "example": "color"
                    },
                    "description": {
                      "description": "Description of the property e.g. body background color",
                      "type": "string",
                      "example": "The background color of the body part of the email"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "blocks": {
            "description": "Array of Message Blocks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddedBlock"
            }
          },
          "attachments": {
            "description": "Array of Message Attachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddedAttachment"
            }
          },
          "reply_to": {
            "description": "The people who should be notified of replies",
            "type": "array",
            "items": {
              "type": "string",
              "example": "classy@classy.org"
            }
          },
          "delivery_date": {
            "description": "The date and time the email should be delivered",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "sent_at": {
            "description": "The date and time the email sent",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000"
          },
          "enabled": {
            "description": "Indicates whether the Message is enabled or not",
            "type": "boolean",
            "default": true,
            "example": true
          },
          "filters": {
            "description": "Valid filters for Message",
            "type": "string",
            "enum": [
              "all",
              "donors",
              "fundraisers",
              "team_captains",
              "attendees",
              "facebook_fundraisers",
              "non_facebook_fundraisers"
            ],
            "example": "donors",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Message": {
        "title": "Message",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of the Message",
                "type": "string",
                "example": "61c998020f81f070151b9f10",
                "nullable": false
              },
              "status": {
                "description": "The state of the message",
                "type": "string",
                "default": "draft",
                "enum": [
                  "queued",
                  "draft",
                  "scheduled",
                  "processing",
                  "disabled",
                  "delivered",
                  "canceled",
                  "failed"
                ],
                "example": "queued"
              },
              "read_only": {
                "description": "Once a Message has been delivered it becomes read only and cannot be removed or edited",
                "type": "boolean",
                "default": false,
                "example": true
              },
              "stats": {
                "description": "Message status statistics",
                "properties": {
                  "sent": {
                    "description": "Number of times Message sent",
                    "type": "integer",
                    "default": 0,
                    "example": 1500
                  },
                  "delivered": {
                    "description": "Number of times Message delivered",
                    "type": "integer",
                    "default": 0,
                    "example": 1482
                  },
                  "opened": {
                    "description": "Number of times Message opened",
                    "type": "integer",
                    "default": 0,
                    "example": 570
                  },
                  "clicked": {
                    "description": "Number of times Message clicked",
                    "type": "integer",
                    "default": 0,
                    "example": 69
                  },
                  "unsubscribed": {
                    "description": "Number of times Message unsubscribed",
                    "type": "integer",
                    "default": 0,
                    "example": 12
                  },
                  "bounced": {
                    "description": "Number of times Message bounced",
                    "type": "integer",
                    "default": 0,
                    "example": 16
                  },
                  "failed": {
                    "description": "Failed Message count",
                    "type": "integer",
                    "default": 0,
                    "example": 2
                  },
                  "dropped": {
                    "description": "Message dropped count",
                    "type": "integer",
                    "default": 0,
                    "example": 2
                  },
                  "complained": {
                    "description": "Number of times Message complained",
                    "type": "integer",
                    "default": 0,
                    "example": 2
                  },
                  "recipients": {
                    "description": "Number of Message Recipients",
                    "type": "integer",
                    "default": 0,
                    "example": 2
                  }
                },
                "type": "object"
              },
              "created_at": {
                "description": "Indicates when this Message was created",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              },
              "updated_at": {
                "description": "Indicates when this Message was last updated",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              },
              "campaign_id": {
                "description": "Primary identifier of the Campaign",
                "type": "integer",
                "example": 227362,
                "nullable": true
              },
              "organization_id": {
                "description": "Primary identifier of the Organization",
                "type": "integer",
                "example": 82364,
                "nullable": true
              },
              "tags": {
                "description": "Valid tags Message can have",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "*",
                    "account",
                    "post_create",
                    "registration",
                    "reports",
                    "scoped_invite",
                    "organization",
                    "feed_item_comment",
                    "comment",
                    "transactional",
                    "receipt",
                    "commitment",
                    "campaign",
                    "donation",
                    "donor",
                    "staff",
                    "series",
                    "system",
                    "marketing",
                    "percent_goal_reached",
                    "amount_goal_reached",
                    ""
                  ],
                  "example": "percent_goal_reached"
                }
              },
              "version": {
                "description": "document version",
                "type": "integer",
                "example": "1"
              }
            },
            "type": "object"
          }
        ]
      },
      "MessageConditionFillable": {
        "title": "Message Condition Fillable",
        "properties": {
          "send_to": {
            "description": "Members to send the Message to if the condition is true.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "fundraising_page.member"
            }
          },
          "statement": {
            "description": "Raw JSON representing the expression.",
            "type": "object",
            "example": {
              "type": "expr",
              "operand1": {
                "type": "variable",
                "entity_type": "fundraising_page",
                "property": "progress_bar_amount"
              },
              "operator": "total_raised_surpassed",
              "operand2": {
                "type": "expr",
                "operand1": {
                  "type": "variable",
                  "entity_type": "fundraising_page",
                  "property": "goal"
                },
                "operator": "*",
                "operand2": {
                  "type": "constant",
                  "value": 0.25
                }
              }
            }
          },
          "value": {
            "description": "Value to be used in expression, if value not given in the expression",
            "type": "number",
            "format": "double",
            "example": 0.25,
            "nullable": false
          },
          "metadata": {
            "description": "An optional set of unstructured metadata",
            "type": "array",
            "items": {
              "type": "string",
              "example": "fundraising_page_aggregates"
            }
          }
        },
        "type": "object"
      },
      "MessageCondition": {
        "title": "Message Condition",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageConditionFillable"
          },
          {
            "properties": {
              "message_id": {
                "description": "Primary identifier of Message ID",
                "type": "string",
                "example": "61c998020f81f070151b9f10",
                "nullable": true
              },
              "campaign_id": {
                "description": "Primary identifier of Campaign",
                "type": "integer",
                "example": 227362,
                "nullable": true
              },
              "organization_id": {
                "description": "Primary identifier of Organization",
                "type": "integer",
                "example": 82364,
                "nullable": true
              },
              "id": {
                "description": "Primary identifier of Message Condition",
                "type": "string",
                "example": "507729de86f191e810c190ea",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "MessageEventFillable": {
        "title": "Message Event Fillable",
        "properties": {
          "recipient_id": {
            "description": "Primary identifier of Recipient",
            "type": "string",
            "example": "65d53aba5ceeb42e6e201a80",
            "nullable": false
          },
          "message_id": {
            "description": "Primary identifier of Message",
            "type": "string",
            "example": "61c998020f81f070151b9f10",
            "nullable": false
          },
          "batch_id": {
            "description": "Primary identifier of Message Batch",
            "type": "string",
            "example": "452395ceeb33d6e201a6a388",
            "nullable": true
          },
          "tags": {
            "description": "A tag is an arbitrary piece of meta data to classify and identify common models based on simple characteristics.",
            "type": "array",
            "items": {
              "description": "Tags added to the Message",
              "type": "string",
              "enum": [
                "account",
                "transactional",
                "receipt",
                "campaign",
                "commitment",
                "donation",
                "donor",
                "staff",
                "series",
                "system",
                "marketing",
                "page",
                "team",
                "percent_goal_reached",
                "amount_goal_reached",
                "organization",
                "comment",
                "feed_item_comment",
                "post_create",
                "scoped_invite",
                "registration",
                "reports"
              ],
              "example": "transactional"
            },
            "nullable": true
          },
          "campaign_id": {
            "description": "Primary identifier of Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": true
          },
          "organization_id": {
            "description": "Primary identifier of Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "type": {
            "description": "Type of Message Event",
            "type": "string",
            "enum": ["email", "sms"],
            "example": "email",
            "nullable": false
          },
          "event": {
            "description": "Action of Message Event",
            "type": "string",
            "enum": [
              "sent",
              "delivered",
              "opened",
              "clicked",
              "resend",
              "unsubscribed",
              "failed",
              "bounced"
            ],
            "example": "sent",
            "nullable": false
          },
          "date": {
            "description": "Date/time of Message Event created",
            "type": "string",
            "format": "date-time",
            "example": "2021-12-30 22:59:51.000Z",
            "nullable": false
          },
          "email_address": {
            "description": "Recipient email address",
            "type": "string",
            "example": "classy@classy.org",
            "nullable": true
          }
        },
        "type": "object"
      },
      "MessageEvent": {
        "title": "Message Event",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageEventFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Message Event",
                "type": "string",
                "example": "5cee48239ab33d6e201a6387",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "MessageSeriesFillable": {
        "title": "MessageSeriesFillable",
        "properties": {
          "name": {
            "description": "Name of the Message Series",
            "type": "string",
            "example": "Percentage of Goal Reached",
            "nullable": false
          },
          "type": {
            "description": "Message Series type",
            "type": "string",
            "enum": ["milestone"],
            "example": "milestone",
            "nullable": false
          },
          "enabled": {
            "description": "Is Message Series enabled or not?",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "id": {
            "description": "Primary identifier for Message Series",
            "type": "string",
            "example": "61d8c95667515cb3e451470a",
            "nullable": false
          }
        },
        "type": "object"
      },
      "MessageSeries": {
        "title": "Message Series",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageSeriesFillable"
          },
          {
            "properties": {
              "campaign_id": {
                "description": "The ID of the Campaign the Message Series belongs to",
                "type": "integer",
                "example": 227362,
                "nullable": true
              },
              "organization_id": {
                "description": "The ID of the Organization the Message Series belongs to",
                "type": "integer",
                "example": 82364,
                "nullable": true
              },
              "created_at": {
                "description": "Timestamp from when Message Series was created",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000"
              },
              "updated_at": {
                "description": "Timestamp from when Message Series was last updated",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000"
              }
            },
            "type": "object"
          }
        ]
      },
      "RecipientBasic": {
        "title": "Recipient Basic",
        "type": "array",
        "items": {
          "properties": {
            "supporter_id": {
              "description": "Primary identifier of Supporter",
              "type": "integer",
              "example": 5827,
              "nullable": false
            },
            "source": {
              "description": "An optional set of unstructured data to be stored with a Recipient",
              "type": "object",
              "example": {
                "previous_email": "classy@classy.org",
                "campaign": 227362
              }
            }
          },
          "type": "object"
        }
      },
      "RecipientFillable": {
        "title": "Recipient Fillable",
        "properties": {
          "member_id": {
            "description": "Primary identifier of Member",
            "type": "integer",
            "example": 2012,
            "nullable": true
          },
          "supporter_id": {
            "description": "Primary identifier of Supporter",
            "type": "integer",
            "example": 5827,
            "nullable": true
          },
          "message_id": {
            "description": "The Message that the Recipient is attached to",
            "type": "string",
            "example": "61c998020f81f070151b9f10",
            "nullable": false
          },
          "message_batch_id": {
            "description": "Primary identifier of Message Batch",
            "type": "string",
            "example": "452395ceeb33d6e201a6a388",
            "nullable": true
          },
          "campaign_id": {
            "description": "Primary identifier of Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": true
          },
          "organization_id": {
            "description": "Primary identifier of Organization",
            "type": "integer",
            "example": 82354,
            "nullable": true
          },
          "recurring_profile_id": {
            "description": "Primary identifier of Recurring Donation Plan",
            "type": "integer",
            "example": 85456,
            "nullable": true
          },
          "tax_entity_id": {
            "description": "Primary identifier of Tax Entity",
            "type": "integer",
            "example": 331,
            "nullable": true
          },
          "registration_id": {
            "description": "Primary identifier of Registration",
            "type": "integer",
            "example": 78345,
            "nullable": true
          },
          "full_name": {
            "description": "The Recipient's full name",
            "type": "string",
            "example": "John Doe",
            "nullable": true
          },
          "email_address": {
            "description": "The Recipient's email address",
            "type": "string",
            "example": "Classy@classy.org",
            "nullable": false
          },
          "properties": {
            "description": "Properties used for merge Tag replacement in email templates - derived from Merge Tags included in the Message.",
            "properties": {
              "supporter.first_name": {
                "description": "The Recipient's first name.",
                "type": "string",
                "example": "John",
                "nullable": true
              },
              "supporter.last_name": {
                "description": "The Recipient's last name.",
                "type": "string",
                "example": "Doe",
                "nullable": true
              },
              "fundraiser.goal": {
                "description": "The fundraiser's fundraising goal.",
                "type": "integer",
                "example": 1000,
                "nullable": true
              }
            },
            "type": "object",
            "nullable": true
          },
          "events": {
            "description": "Recipient's Message statuses",
            "properties": {
              "sent": {
                "description": "Indicates when the Message was sent, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "delivered": {
                "description": "Indicates when the Message was delivered, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "opened": {
                "description": "Indicates when the Message was opened, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "clicked": {
                "description": "Indicates when links in the Message was clicked, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "unsubscribed": {
                "description": "Indicates when the Message was unsubscribed, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "bounced": {
                "description": "Indicates when the Message bounced, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "failed": {
                "description": "Indicates when the Message was failed, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "dropped": {
                "description": "Indicates when the Message was dropped, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "complained": {
                "description": "Indicates when the Message was complained, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              },
              "resend": {
                "description": "Indicates when the Message was resend, if at all.",
                "type": "string",
                "format": "date-time",
                "default": null,
                "example": "2019-04-23T10:25:03Z",
                "nullable": true
              }
            },
            "type": "object",
            "nullable": true
          },
          "first_name": {
            "description": "The Recipient's first name",
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "last_name": {
            "description": "The Recipient's last name",
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "address1": {
            "description": "First line of Recipient's address",
            "type": "string",
            "example": "533 F Street",
            "nullable": true
          },
          "address2": {
            "description": "Second line of Recipient's address",
            "type": "string",
            "example": "533 F Street",
            "nullable": true
          },
          "city": {
            "description": "The Recipient's city",
            "type": "string",
            "example": "San Diego",
            "nullable": true
          },
          "state": {
            "description": "The Recipient's state",
            "type": "string",
            "example": "CA",
            "nullable": true
          },
          "postal_code": {
            "description": "The Recipient's posal code",
            "type": "string",
            "example": "92101",
            "nullable": true
          },
          "country": {
            "description": "The Recipient's country",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "phone": {
            "description": "The Recipient's phone number",
            "type": "string",
            "example": "555-555-5555",
            "nullable": true
          },
          "gender": {
            "description": "The Recipient's gender",
            "type": "string",
            "enum": ["M", "F", null],
            "example": "M",
            "nullable": true
          },
          "uniqueId": {
            "description": "UniqueId for recipient",
            "type": "string",
            "example": "1235-USD",
            "nullable": true
          },
          "currency": {
            "description": "currency for recipient",
            "type": "string",
            "example": "USD",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Recipient": {
        "title": "Recipient",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecipientFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Recipient",
                "type": "string",
                "example": "65d53aba5ceeb42e6e201a80",
                "nullable": false
              },
              "created_at": {
                "description": "Date/time of Recipient created",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Recipient last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "NotificationPreferencesFillable": {
        "title": "NotificationPreferences Fillable",
        "properties": {
          "unsubscribe_tags": {
            "description": "Array of allowed tags from the defined tags. The defined tags are as mentioned in enum option.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "team.comment",
                "team.donation",
                "team.series",
                "page.comment",
                "page.donation",
                "page.series",
                "post_create",
                "team.team",
                "campaign"
              ],
              "example": "team.comment"
            },
            "nullable": true
          }
        },
        "type": "object"
      },
      "NotificationPreferences": {
        "title": "Notification Preferences",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "campaign_id": {
                "description": "Primary identifier of Campaign",
                "type": "integer",
                "example": 227362
              },
              "organization_id": {
                "description": "ID of the Organization for which Campaign belongs to",
                "type": "integer",
                "example": 82374
              },
              "supporter_id": {
                "description": "Supporter ID for the Member with respect to the Organization",
                "type": "integer",
                "example": 5827
              },
              "updated_at": {
                "description": "Date/time of Notification Preferences last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/NotificationPreferencesFillable"
          }
        ]
      },
      "EngagementSettings": {
        "title": "Engagement Settings",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Engagement Settings",
                "type": "string",
                "example": "5ceeb33d6e201a648239a387",
                "nullable": false
              },
              "organization_id": {
                "description": "ID of the Organization for which Engagement settings belongs",
                "type": "integer",
                "example": 82374
              },
              "created_at": {
                "description": "Date/time of initial Engagement Settings creation",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Engagement Settings last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/EngagementSettingsFillable"
          }
        ]
      },
      "EngagementSettingsFillable": {
        "title": "Engagement Settings Fillable",
        "properties": {
          "email_subdomain": {
            "description": "Email subdomain",
            "type": "string",
            "example": "test12-org-2018102512405088"
          },
          "sms": {
            "description": "Details of Engagement Settings for SMS",
            "properties": {
              "enabled": {
                "description": "Indicates whether SMS is enabled or not in Engagement Settings",
                "type": "boolean",
                "example": true
              },
              "phone_numbers": {
                "description": "Phone numbers for sending SMS",
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "1-555-555-555"
                }
              },
              "custom_caller_id": {
                "description": "Custom Caller ID name for sending SMS",
                "type": "string",
                "example": "John Doe"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "Details of Engagement Settings for email",
            "properties": {
              "custom_domain": {
                "description": "Indicates whether custom domain for email is true or false",
                "type": "boolean",
                "example": false
              },
              "domain_prefix": {
                "description": "Domain prefix name for email",
                "type": "string",
                "example": "test-org-2018102512405088"
              },
              "email_domain": {
                "description": "Domain name for email",
                "type": "string",
                "example": "classy-mail.org"
              },
              "enabled": {
                "description": "Indicates whether email is enabled or not",
                "type": "boolean",
                "example": true
              },
              "throttling": {
                "description": "Details of throttling:The amount of email messages sent to one ISP or remote server at one tim",
                "properties": {
                  "emails_per_day": {
                    "description": "Number of emails sent per day",
                    "type": "integer",
                    "example": 1000
                  },
                  "emails_per_month": {
                    "description": "Number of emails sent per month",
                    "type": "integer",
                    "example": 10000
                  }
                },
                "type": "object"
              },
              "dns": {
                "description": "Details of DNS settings",
                "properties": {
                  "is_valid": {
                    "description": "Indicates whether DNS is valid or not",
                    "type": "boolean",
                    "example": true
                  },
                  "spf": {
                    "description": "A type of DNS record that identifies which mail servers are permitted to send an email on behalf of your domain",
                    "properties": {
                      "txt_record": {
                        "description": "Name of SPF records to be included",
                        "type": "string",
                        "example": "v=spf1 include:classy.org ~all"
                      },
                      "valid": {
                        "description": "Indicates whether SPF is valid or not",
                        "type": "boolean",
                        "example": true
                      }
                    },
                    "type": "object"
                  },
                  "dkim": {
                    "description": "DKIM Records include a signature in each email header sent",
                    "properties": {
                      "txt_record": {
                        "description": "Signature in each email header sent",
                        "type": "string",
                        "example": "k=rsa; p=MIGfMA0GCSqGSIb3DQ..."
                      },
                      "valid": {
                        "description": "Indicates if DKIM is valid or not",
                        "type": "boolean",
                        "example": true
                      }
                    },
                    "type": "object"
                  },
                  "tracking": {
                    "description": "Details of Tracking",
                    "properties": {
                      "cname": {
                        "description": "Cname allow for tracking of opens and clicks",
                        "type": "string",
                        "example": "email.domain.com"
                      },
                      "value": {
                        "description": "Value for tracking",
                        "type": "string",
                        "example": "mailgun.org"
                      },
                      "valid": {
                        "description": "Indicates whether tracking is valid or not",
                        "type": "boolean",
                        "example": true
                      }
                    },
                    "type": "object"
                  },
                  "incoming": {
                    "description": "Details of Incoming",
                    "properties": {
                      "mx_records": {
                        "description": "The MX-record contains the host name of the computer(s) that handle the emails for a domain and a prioritization code",
                        "type": "array",
                        "items": {
                          "properties": {
                            "priority": {
                              "description": "Each MX record has a priority, or a number to designate the order in which your domain name's incoming mail servers receive your email messages",
                              "type": "number",
                              "example": 10
                            },
                            "value": {
                              "description": "A mail exchanger record (MX record) specifies the mail server responsible for accepting email messages on behalf of a domain name",
                              "type": "string",
                              "example": "mxa.mailgun.org"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "valid": {
                        "description": "Indicates whether incoming is valid or not",
                        "type": "boolean",
                        "example": true
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MessageBlock": {
        "title": "Message Block",
        "properties": {
          "name": {
            "description": "The name of the Block",
            "type": "string",
            "example": "transactional-header"
          },
          "properties": {
            "description": "The customized properties for the Message Block",
            "type": "object",
            "example": {
              "backgroundColor": {
                "value": "",
                "type": "color",
                "description": "an override of this block's background color"
              },
              "textAlign": {
                "value": "left",
                "type": "string",
                "description": "left right or center, dealers choice."
              },
              "textBlock": {
                "value": "<p>The Headline</p><p>Your text can go here. It can be as long or short as you want it to be.</p>",
                "type": "string",
                "description": "The subheading on the receipt email"
              },
              "textColor": {
                "value": "rgb(57, 57, 57)",
                "type": "color",
                "description": "an override of this block's text color"
              }
            }
          },
          "markup": {
            "description": "HTML markup for Message Block",
            "type": "string",
            "example": "<html><head>Annual Recurring Giving Summary</head><body><div></div></body></html>"
          },
          "version": {
            "description": "document version",
            "type": "integer",
            "example": "1"
          }
        },
        "type": "object"
      },
      "BlockHistory": {
        "title": "BlockHistory",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageBlock"
          },
          {
            "properties": {
              "name": {
                "description": "The name of the Block. Primary identified for BlockHistory.",
                "type": "string",
                "example": "transactional-header"
              },
              "version": {
                "description": "Block version. Primary identified for BlockHistory",
                "type": "integer",
                "example": "1"
              },
              "properties": {
                "description": "The customized properties for the Message Block",
                "type": "object",
                "example": {
                  "backgroundColor": {
                    "value": "",
                    "type": "color",
                    "description": "an override of this block's background color"
                  },
                  "textAlign": {
                    "value": "left",
                    "type": "string",
                    "description": "left right or center, dealers choice."
                  },
                  "textBlock": {
                    "value": "<p>The Headline</p><p>Your text can go here. It can be as long or short as you want it to be.</p>",
                    "type": "string",
                    "description": "The subheading on the receipt email"
                  },
                  "textColor": {
                    "value": "rgb(57, 57, 57)",
                    "type": "color",
                    "description": "an override of this block's text color"
                  }
                }
              },
              "markup": {
                "description": "HTML markup for Message Block",
                "type": "string",
                "example": "<html><head>Annual Recurring Giving Summary</head><body><div></div></body></html>"
              }
            },
            "type": "object"
          }
        ]
      },
      "EmailTheme": {
        "title": "EmailTheme",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "string",
            "example": "581b7b9e6c7e61137a8b4568",
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "type": {
            "description": "Type of associated Entity type",
            "type": "string",
            "enum": ["organization", "campaign"],
            "example": "campaign",
            "nullable": false
          },
          "blocks": {
            "description": "Blocks that make up the Email Theme",
            "properties": {
              "header": {
                "description": "Header",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "logo_img_src": {
                        "description": "Source URL of header logo image",
                        "type": "string",
                        "example": "https://www.classy.org/logo.png"
                      },
                      "header_color": {
                        "description": "Color of header in rgb",
                        "type": "string",
                        "example": "rgb(255,0,0)"
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              },
              "button_group": {
                "description": "Button Group",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "primary_button_color": {
                        "description": "Color of primary button",
                        "type": "string",
                        "example": "rgb(255,0,0)",
                        "nullable": true
                      },
                      "primary_button_text_color": {
                        "description": "Color of primary button text",
                        "type": "string",
                        "example": "rgb(255,255,255)",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              },
              "footer": {
                "description": "Footer",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "background_color": {
                        "description": "Background color of footer",
                        "type": "string",
                        "example": "rgb(255,0,0)"
                      },
                      "text_color": {
                        "description": "Color of primary footer text",
                        "type": "string",
                        "example": "rgb(255,255,255)"
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              },
              "template": {
                "description": "Template",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "template_background_color": {
                        "description": "Background color of email",
                        "type": "string",
                        "example": "rgb(255,0,0)"
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              }
            },
            "type": "object",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "EmailThemeFillable": {
        "title": "EmailTheme Fillable",
        "properties": {
          "type": {
            "description": "Type of associated Entity type",
            "type": "string",
            "enum": ["organization", "campaign"],
            "example": "campaign",
            "nullable": false
          },
          "blocks": {
            "description": "Blocks that make up the Email Theme",
            "properties": {
              "header": {
                "description": "Header",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "logo_img_src": {
                        "description": "Source URL of header logo image",
                        "type": "string",
                        "example": "https://www.classy.org/logo.png",
                        "nullable": true
                      },
                      "header_color": {
                        "description": "Color of header in rgb",
                        "type": "string",
                        "example": "rgb(255,0,0)",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              },
              "button_group": {
                "description": "Button Group",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "primary_button_color": {
                        "description": "Color of primary button",
                        "type": "string",
                        "example": "rgb(255,0,0)"
                      },
                      "primary_button_text_color": {
                        "description": "Color of primary button text",
                        "type": "string",
                        "example": "rgb(255,255,255)"
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              },
              "footer": {
                "description": "Footer",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "background_color": {
                        "description": "Background color of footer",
                        "type": "string",
                        "example": "rgb(255,0,0)",
                        "nullable": true
                      },
                      "text_color": {
                        "description": "Color of primary footer text",
                        "type": "string",
                        "example": "rgb(255,255,255)",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              },
              "template": {
                "description": "Template",
                "properties": {
                  "properties": {
                    "description": "Properties",
                    "properties": {
                      "template_background_color": {
                        "description": "Background color of email",
                        "type": "string",
                        "example": "rgb(255,0,0)",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  },
                  "global_apply": {
                    "description": "Indicates whether to overwrite messages with email theme block properties",
                    "type": "boolean",
                    "example": true
                  }
                },
                "type": "object"
              }
            },
            "type": "object",
            "nullable": false
          },
          "markup": {
            "description": "Markup",
            "type": "string",
            "example": null
          }
        },
        "type": "object"
      },
      "EmbeddedBlockFillable": {
        "title": "Embedded Block Fillable",
        "properties": {
          "name": {
            "description": "The name of the Block",
            "type": "string",
            "example": "preheader"
          },
          "weight": {
            "description": "The ordering weight for the Message Block",
            "type": "integer",
            "example": 1
          },
          "properties": {
            "description": "The customized properties for the Message Block",
            "type": "object",
            "example": {
              "preheaderText": "Let’s start fundraising."
            }
          }
        },
        "type": "object"
      },
      "EmbeddedBlock": {
        "title": "Embedded Block",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmbeddedBlockFillable"
          },
          {
            "properties": {
              "id": {
                "description": "The Embedded Message Block ID i.e. primary identifier of Block",
                "type": "string",
                "example": "61c998020f81f070151b9ee7",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "MergeTagFillable": {
        "title": "Merge Tag Fillable",
        "properties": {
          "description": {
            "description": "Description for the Merge Tag",
            "type": "string",
            "example": "The Fundraising Page's Progress Toward its Goal (Percentage)",
            "nullable": false
          },
          "value": {
            "description": "Value for the Merge Tag",
            "type": "string",
            "example": "fundraiser.percent_to_goal",
            "nullable": false
          },
          "type": {
            "description": "Type of Merge Tag which should be any one from fundraising_team, supporter, fundraiser, attendee, dedicatee, transaction.",
            "type": "string",
            "enum": [
              "fundraising_team",
              "supporter",
              "fundraiser",
              "attendee",
              "dedicatee",
              "transaction"
            ],
            "example": "fundraising_team",
            "nullable": false
          },
          "suggested_values": {
            "description": "Array of suggested values",
            "type": "array",
            "items": {
              "type": "string",
              "example": "not very close"
            },
            "nullable": true
          }
        },
        "type": "object"
      },
      "MergeTag": {
        "title": "Merge Tag",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Merge Tag",
                "type": "string",
                "example": "56e841f8a9e2eacb708b4575",
                "nullable": false
              },
              "created_at": {
                "description": "Date/time of initial Merge Tag creation",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Marge Tag last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/MergeTagFillable"
          }
        ]
      },
      "MessageTemplate": {
        "title": "Message Template",
        "properties": {
          "id": {
            "description": "Primary identifier of Message",
            "type": "string",
            "example": "56d9db56b3341c28e963e9f6",
            "nullable": false
          },
          "name": {
            "description": "The unique name of the Template",
            "type": "string",
            "example": "crowdfunding_receipt",
            "nullable": false
          },
          "layout": {
            "description": "Layout type",
            "type": "string",
            "example": "basic",
            "nullable": false
          },
          "blocks": {
            "description": "The Blocks used in the Template",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "button-group",
                "footer",
                "image",
                "marketing-header",
                "preheader",
                "text",
                "signature",
                "contact-support",
                "donation-receipt",
                "heading",
                "manage-donation",
                "transactional-header",
                "chargeback",
                "ecard",
                "recurring-donation-failed",
                "new-recurring-profile",
                "p2p-body",
                "reset-code",
                "transactional-text",
                "claim-account",
                "comment",
                "post-excerpt",
                "admin-invite",
                "classy-footer",
                "classy-support",
                "event",
                "rwf-claim",
                "rwf-custom-questions",
                "rwf-receipt",
                "notification",
                "org-admin-invite",
                "staff-recurring-donation-receipt",
                "staff-recurring-donation-failed",
                "annual-receipt",
                "recurring-donation-info",
                "recurring-donation-updates",
                "recurring-plan-canceled",
                "manage-recurring-plans",
                "staff-recurring-plan-canceled",
                "recurring-annual-receipt",
                "download-body",
                "organization-header",
                "saved-report-body",
                "download-reconciliation-body",
                "download-reconciliation-range-body",
                "staff-chargeback",
                "staff-chargeback-stripe",
                "facebook-whitelist",
                "org-scoped-role-invite",
                "campaign-scoped-role-invite",
                "fundraising-commitment",
                "fundraising-commitment-waived",
                "commitment-achieved",
                "commitment-updated",
                "fundraising-commitment-charge-remaining",
                "fundraising-commitment-charge-specific",
                "staff-transaction-pending",
                "facebook-invalid-token",
                "footer-alt",
                "reset-link",
                "section-support",
                "recurring-donation-ended",
                "staff-recurring-donation-ended",
                "staff-recurring-donation-info",
                "staff-recurring-donation-updates"
              ],
              "example": "preheader"
            },
            "nullable": false
          },
          "attachments": {
            "description": "The Generated Attachments used in the Template",
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["donation-receipt", "recurring-annual-receipt"],
              "example": "donation-receipt"
            },
            "nullable": false
          },
          "properties": {
            "description": "The default Attachment Properties",
            "type": "array",
            "items": {
              "properties": {
                "type": {
                  "description": "The type of Property",
                  "example": "color"
                },
                "value": {
                  "description": "A default value for the Property",
                  "example": "#f0f0f0"
                },
                "description": {
                  "description": "A description of what the Property does",
                  "example": "The hex value of the background of the email."
                }
              },
              "type": "object"
            },
            "nullable": false
          },
          "markup": {
            "description": "The markup for the Template",
            "type": "string",
            "example": "<html></html>",
            "nullable": false
          },
          "created_at": {
            "description": "Date/Time when Message Template was created",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/Time when Message Template was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000",
            "nullable": false
          },
          "version": {
            "description": "document version",
            "type": "integer",
            "example": "1"
          }
        },
        "type": "object"
      },
      "TemplateHistory": {
        "title": "TemplateHistory",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageTemplate"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Message",
                "type": "string",
                "example": "56d9db56b3341c28e963e9f6",
                "nullable": false
              },
              "name": {
                "description": "The unique name of the Template",
                "type": "string",
                "example": "crowdfunding_receipt",
                "nullable": false
              },
              "layout": {
                "description": "Layout type",
                "type": "string",
                "example": "basic",
                "nullable": false
              },
              "blocks": {
                "description": "The Blocks used in the Template",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "button-group",
                    "footer",
                    "image",
                    "marketing-header",
                    "preheader",
                    "text",
                    "signature",
                    "contact-support",
                    "donation-receipt",
                    "heading",
                    "manage-donation",
                    "transactional-header",
                    "chargeback",
                    "ecard",
                    "recurring-donation-failed",
                    "new-recurring-profile",
                    "p2p-body",
                    "reset-code",
                    "transactional-text",
                    "claim-account",
                    "comment",
                    "post-excerpt",
                    "admin-invite",
                    "classy-footer",
                    "classy-support",
                    "event",
                    "rwf-claim",
                    "rwf-custom-questions",
                    "rwf-receipt",
                    "notification",
                    "org-admin-invite",
                    "staff-recurring-donation-receipt",
                    "staff-recurring-donation-failed",
                    "annual-receipt",
                    "recurring-donation-info",
                    "recurring-donation-updates",
                    "recurring-plan-canceled",
                    "manage-recurring-plans",
                    "staff-recurring-plan-canceled",
                    "recurring-annual-receipt",
                    "download-body",
                    "organization-header",
                    "saved-report-body",
                    "download-reconciliation-body",
                    "download-reconciliation-range-body",
                    "staff-chargeback",
                    "staff-chargeback-stripe",
                    "facebook-whitelist",
                    "org-scoped-role-invite",
                    "campaign-scoped-role-invite",
                    "fundraising-commitment",
                    "fundraising-commitment-waived",
                    "commitment-achieved",
                    "commitment-updated",
                    "fundraising-commitment-charge-remaining",
                    "fundraising-commitment-charge-specific",
                    "staff-transaction-pending",
                    "facebook-invalid-token",
                    "footer-alt",
                    "reset-link",
                    "section-support",
                    "recurring-donation-ended",
                    "staff-recurring-donation-ended",
                    "staff-recurring-donation-info",
                    "staff-recurring-donation-updates"
                  ],
                  "example": "preheader"
                },
                "nullable": false
              },
              "attachments": {
                "description": "The Generated Attachments used in the Template",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["donation-receipt", "recurring-annual-receipt"],
                  "example": "donation-receipt"
                },
                "nullable": false
              },
              "properties": {
                "description": "The default Attachment Properties",
                "type": "array",
                "items": {
                  "properties": {
                    "type": {
                      "description": "The type of Property",
                      "example": "color"
                    },
                    "value": {
                      "description": "A default value for the Property",
                      "example": "#f0f0f0"
                    },
                    "description": {
                      "description": "A description of what the Property does",
                      "example": "The hex value of the background of the email."
                    }
                  },
                  "type": "object"
                },
                "nullable": false
              },
              "markup": {
                "description": "The markup for the Template",
                "type": "string",
                "example": "<html></html>",
                "nullable": false
              },
              "created_at": {
                "description": "Date/Time when Message Template was created",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/Time when Message Template was last updated",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              },
              "version": {
                "description": "document version",
                "type": "integer",
                "example": "1"
              }
            },
            "type": "object"
          }
        ]
      },
      "FeeSchedule": {
        "title": "Fee Schedule",
        "properties": {
          "campaign_category": {
            "description": "Campaign group that variable rate applies to",
            "type": "string",
            "format": "string",
            "enum": [
              "main_donate_button",
              "recurring_migration",
              "high_value",
              "major_giving",
              "virtual"
            ],
            "example": "high_value",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "fee_flat": {
            "description": "Flat fee to be charged",
            "type": "number",
            "format": "float",
            "example": "0.3",
            "nullable": true
          },
          "fee_percent": {
            "description": "Percent fee to be charged",
            "type": "number",
            "format": "float",
            "example": "5",
            "nullable": true
          },
          "fee_cap": {
            "description": "Cap fee",
            "type": "number",
            "format": "float",
            "example": "5123.23",
            "nullable": true
          },
          "type": {
            "description": "Fee type",
            "type": "string",
            "format": "string",
            "enum": [
              "classy",
              "stripe_ach",
              "stripe_amex",
              "stripe_cc",
              "authorize_net",
              "braintree"
            ],
            "example": "stripe_ach",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 395,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "FeeScheduleFillable": {
        "title": "Fee Schedule (Fillable)",
        "properties": {
          "fee_flat": {
            "description": "Flat fee to be charged",
            "type": "number",
            "format": "float",
            "example": "0.3",
            "nullable": true
          },
          "fee_percent": {
            "description": "Percent fee to be charged",
            "type": "number",
            "format": "float",
            "example": "5",
            "nullable": true
          },
          "fee_cap": {
            "description": "Cap fee",
            "type": "number",
            "format": "float",
            "example": "5123.23",
            "nullable": true
          }
        },
        "type": "object"
      },
      "FeeScheduleAssignment": {
        "title": "Fee Schedule Assignment",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "fee_schedule_id": {
            "description": "Primary identifier of associated FeeSchedule",
            "type": "integer",
            "example": 338473,
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 122,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "FeedItem": {
        "title": "Feed Item",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 987,
            "nullable": false
          },
          "agent_id": {
            "description": "Primary identifier of the Agent that performed interaction associated with Feed Item",
            "type": "integer",
            "example": 438475,
            "nullable": true
          },
          "agent_type": {
            "description": "Type of Agent that performed interaction associated with Feed Item",
            "type": "string",
            "enum": ["member", "business"],
            "example": "member",
            "nullable": true
          },
          "agent_name": {
            "description": "Name of Agent that performed interaction associated with Feed Item",
            "type": "string",
            "example": "John Doe",
            "nullable": true
          },
          "feedable_id": {
            "description": "Primary identifier of Fundraising Entity associated with Feed Item’s described interaction",
            "type": "integer",
            "example": 4857,
            "nullable": false
          },
          "feedable_type": {
            "description": "Type of the Item",
            "type": "string",
            "example": "campaign",
            "nullable": false
          },
          "feedable_value": {
            "description": "Name or title of the Item",
            "type": "string",
            "example": "Classy fundraising campaign",
            "nullable": true
          },
          "linkable_id": {
            "description": "Primary identifier of Entity whose creation, update, or association is described by Feed Item",
            "type": "integer",
            "example": 4832,
            "nullable": true
          },
          "linkable_type": {
            "description": "Type of Entity whose creation, update, or association is described by Feed Item",
            "type": "string",
            "example": "fundraising_page",
            "nullable": true
          },
          "linkable_value": {
            "description": "Name or title of the Entity whose creation, update, or association is described by Feed Item",
            "type": "string",
            "example": "How to keep donors engaged",
            "nullable": true
          },
          "linkable_effective_at": {
            "description": "Date/time when Linkable is effective",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "type": {
            "description": "Type of the Item",
            "type": "string",
            "enum": [
              "comment",
              "onboarding",
              "creation",
              "update",
              "association"
            ],
            "example": "creation",
            "nullable": false
          },
          "comment": {
            "description": "Comment",
            "type": "string",
            "example": "This is a comment.",
            "nullable": true
          },
          "comments_count": {
            "description": "Amount of Comments that the Feed Item has",
            "type": "integer",
            "example": 78,
            "nullable": true
          },
          "likes_count": {
            "description": "Amount of Likes that the Feed has",
            "type": "integer",
            "example": 8,
            "nullable": true
          },
          "created_at": {
            "description": "Date/time when object was created",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time when object was updated",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "visibility": {
            "description": "Visibility status of the Item",
            "type": "string",
            "enum": ["public", "admin"],
            "example": "public",
            "nullable": false
          },
          "latest_comments": {
            "description": "Array of latest Comments made in response to Item (limit 3 items)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": false
          }
        },
        "type": "object"
      },
      "FeedItemAssociation": {
        "title": "Feed Item (Association)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FeedItem"
          },
          {
            "properties": {
              "feedable_type": {
                "description": "Type of the Fundraising Entity associated with Feed Item’s described interaction",
                "type": "string",
                "enum": ["fundraising_team"],
                "example": "fundraising_team",
                "nullable": false
              },
              "linkable_type": {
                "description": "Type of the Entity whose creation, update, or association is described by Feed Item",
                "type": "string",
                "enum": ["fundraising_page"],
                "example": "fundraising_page",
                "nullable": true
              },
              "comment": {
                "description": "Comment",
                "type": "string",
                "enum": [null],
                "example": "This is a comment.",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "FeedItemComment": {
        "title": "Feed Item (Comment)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FeedItem"
          },
          {
            "properties": {
              "feedable_type": {
                "description": "Type of the Fundraising Entity associated with Feed Item’s described interaction",
                "type": "string",
                "enum": ["comment"],
                "example": "comment",
                "nullable": false
              },
              "linkable_type": {
                "description": "Type of the Entity whose creation, update, or association is described by Feed Item",
                "type": "string",
                "enum": ["null"],
                "example": "null",
                "nullable": true
              },
              "comment": {
                "description": "Comment",
                "type": "string",
                "example": "I just want to say that I think you all are doing a great job. Keep up the good work!",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "FeedItemCreation": {
        "title": "Feed Item (Creation)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FeedItem"
          },
          {
            "properties": {
              "feedable_type": {
                "description": "Type of the Fundraising Entity associated with Feed Item’s described interaction, same as linkable_type",
                "type": "string",
                "example": "fundraising_page",
                "nullable": false
              },
              "linkable_type": {
                "description": "Type of the Entity whose creation, update, or association is described by Feed Item same as feedable_type",
                "type": "string",
                "example": "fundraising_page",
                "nullable": true
              },
              "comment": {
                "description": "Comment",
                "type": "string",
                "enum": ["null"],
                "example": "null",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "FeedItemUpdate": {
        "title": "Feed Item (Update)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FeedItem"
          },
          {
            "properties": {
              "feedable_type": {
                "description": "Type of the Fundraising Entity associated with Feed Item’s described interaction, same as linkable_type",
                "type": "string",
                "example": "fundraising_page",
                "nullable": false
              },
              "linkable_type": {
                "description": "Type of the Entity whose creation, update, or association is described by Feed Item same as feedable_type",
                "type": "string",
                "example": "fundraising_page",
                "nullable": true
              },
              "comment": {
                "description": "Comment",
                "type": "string",
                "enum": ["null"],
                "example": "null",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "FeedItemOnboarding": {
        "title": "Feed Item (Onboarding)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FeedItem"
          },
          {
            "properties": {
              "feedable_type": {
                "description": "Type of the Fundraising Entity associated with Feed Item’s described interaction",
                "type": "string",
                "enum": ["organization"],
                "example": "organization",
                "nullable": false
              },
              "linkable_type": {
                "description": "Type of the Entity whose creation, update, or association is described by Feed Item",
                "type": "string",
                "enum": ["null"],
                "example": "null",
                "nullable": true
              },
              "comment": {
                "description": "Comment",
                "type": "string",
                "enum": ["Welcome to Classy!"],
                "example": "Welcome to Classy!",
                "nullable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "Answer": {
        "title": "Answer",
        "properties": {
          "answer": {
            "description": "Answer content",
            "type": "string",
            "maxLength": 255,
            "example": "Example answer test",
            "nullable": false
          },
          "answerable_id": {
            "description": "Primary identifier of associated Fundraising Entity object. Required with answerable_type",
            "type": "integer",
            "example": 3245,
            "nullable": true
          },
          "answerable_type": {
            "description": "Type of associated Fundraising Entity. Required with answerable_id",
            "type": "string",
            "enum": [
              "fundraising_team",
              "fundraising_page",
              "transaction",
              "campaign_registration"
            ],
            "example": "fundraising_team",
            "nullable": true
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 32459,
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "question_id": {
            "description": "Primary identifier of associated Question",
            "type": "integer",
            "example": 45678,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": true
          }
        },
        "type": "object"
      },
      "AnswerFillable": {
        "title": "Answer Fillable",
        "properties": {
          "answer": {
            "description": "Answer content",
            "type": "string",
            "example": "Example answer test",
            "nullable": false
          }
        },
        "type": "object"
      },
      "AppealSet": {
        "title": "Appeal Set",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 9082,
            "nullable": false
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "facebook_asset_id": {
            "description": "Primary identifier of associated facebook Asset",
            "type": "integer",
            "example": 56792,
            "nullable": true
          },
          "facebook_image_url": {
            "description": "Facebook image URL",
            "type": "string",
            "example": "https://cdn.classy.org/asset.jpg",
            "nullable": true
          },
          "facebook_video_url": {
            "description": "Facebook video URL",
            "type": "string",
            "example": "https://www.youtube.com/watch?v=LpInp3kEzdk",
            "nullable": true
          },
          "facebook_text": {
            "description": "Facebook body text",
            "type": "string",
            "example": "Share this campaign",
            "nullable": true
          },
          "twitter_text": {
            "description": "Twitter body text",
            "type": "string",
            "maxLength": 280,
            "example": "Tweet this campaign to your friends!",
            "nullable": true
          },
          "sms_text": {
            "description": "SMS body text",
            "type": "string",
            "maxLength": 255,
            "example": "Example SMS text",
            "nullable": true
          },
          "email_subject": {
            "description": "Email subject",
            "type": "string",
            "maxLength": 255,
            "example": "Check out this campaign!",
            "nullable": true
          },
          "email_body": {
            "description": "Email body",
            "type": "string",
            "example": "Please donate to our campaign.",
            "nullable": true
          }
        },
        "type": "object"
      },
      "AppealSetFillable": {
        "title": "Appeal Set Fillable",
        "properties": {
          "facebook_video_url": {
            "description": "Facebook video URL",
            "type": "string",
            "example": "https://www.youtube.com/watch?v=LpInp3kEzdk",
            "nullable": true
          },
          "facebook_text": {
            "description": "Facebook body text",
            "type": "string",
            "example": "Share this campaign",
            "nullable": true
          },
          "twitter_text": {
            "description": "Twitter body text",
            "type": "string",
            "maxLength": 280,
            "example": "Tweet this campaign to your friends!",
            "nullable": true
          },
          "sms_text": {
            "description": "SMS body text",
            "type": "string",
            "maxLength": 255,
            "example": "Example SMS text",
            "nullable": true
          },
          "email_subject": {
            "description": "Email subject",
            "type": "string",
            "maxLength": 255,
            "example": "Check out this campaign!",
            "nullable": true
          },
          "email_body": {
            "description": "Email body",
            "type": "string",
            "example": "Please donate to our campaign.",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Branding": {
        "title": "Branding",
        "properties": {
          "background_color": {
            "description": "Color of main background",
            "type": "string",
            "example": "#FFFFFF"
          },
          "background_image": {
            "description": "URL of background image; deprecated/replaced by background_image_asset_url",
            "type": "string",
            "example": "https://www.image-url.com/background.png"
          },
          "background_image_asset_id": {
            "description": "Primary identifier of associated Asset representing background image",
            "type": "integer",
            "example": 1145
          },
          "background_image_asset_url": {
            "description": "URL of background image derived from associated Asset",
            "type": "string",
            "example": "https://www.image-url.com/background.png"
          },
          "background_image_style": {
            "description": "CSS for rendering background image",
            "type": "string",
            "example": "repeat"
          },
          "custom_script": {
            "description": "Raw javascript to be stored",
            "type": "string",
            "example": "script"
          },
          "header_background_image": {
            "description": "URL of header background image; deprecated/replaced by header_background_image_asset_id",
            "type": "string",
            "example": "https://www.image-url.com/header_background.png"
          },
          "header_background_image_asset_id": {
            "description": "Primary identifier of associated Asset representing the header background image",
            "type": "integer",
            "example": 1145
          },
          "header_background_image_asset_url": {
            "description": "URL of header background image derived from associated Asset",
            "type": "string",
            "example": "https://www.image-url.com/background.png"
          },
          "header_color": {
            "description": "Color of header",
            "type": "string",
            "example": "#ABABAB"
          },
          "header_footer_color": {
            "description": "Color of footer portion of header",
            "type": "string",
            "example": "#CCCCCC"
          },
          "header_image": {
            "description": "URL of header image; deprecated/replaced by header_image_asset_url",
            "type": "string",
            "example": "https://www.image-url.com/header.png"
          },
          "header_image_asset_id": {
            "description": "Primary identifier of associated Asset representing header image",
            "type": "integer",
            "example": 1145
          },
          "header_image_asset_url": {
            "description": "URL of header image derived from associated Asset",
            "type": "string",
            "example": "https://www.image-url.com/header.png"
          },
          "header_image_height": {
            "description": "Height of header image in pixels",
            "type": "integer",
            "example": 200
          },
          "header_image_style": {
            "description": "CSS for rendering header image",
            "type": "string",
            "example": "repeat"
          },
          "header_url": {
            "description": "URL of location to which header image links",
            "type": "string",
            "example": "https://www.my-url.com/donate"
          },
          "hero_image_asset_id": {
            "description": "Primary identifier of associated Asset representing hero image",
            "type": "integer",
            "example": 1145
          },
          "hero_image_asset_url": {
            "description": "URL of hero image derived from associated Asset",
            "type": "string",
            "example": "https://www.image-url.com/hero.png"
          },
          "hide_classy_logo": {
            "description": "Indicator dictating whether or not Classy logo is displayed",
            "type": "boolean",
            "example": "false"
          },
          "primary_color": {
            "description": "Primary color",
            "type": "string",
            "example": "#F0F0F0"
          },
          "secondary_color": {
            "description": "Secondary color",
            "type": "string",
            "example": "#000000"
          }
        },
        "type": "object"
      },
      "BrandingFillable": {
        "title": "Branding Fillable",
        "properties": {
          "background_color": {
            "description": "Color of main background",
            "type": "string",
            "example": "#FFFFFF"
          },
          "background_image_style": {
            "description": "CSS for rendering background image",
            "type": "string",
            "example": "repeat"
          },
          "header_color": {
            "description": "Color of header",
            "type": "string",
            "example": "#ABABAB"
          },
          "header_footer_color": {
            "description": "Color of footer portion of header",
            "type": "string",
            "example": "#CCCCCC"
          },
          "header_image_height": {
            "description": "Height of header image in pixels",
            "type": "integer",
            "example": 200
          },
          "header_image_style": {
            "description": "CSS for rendering header image",
            "type": "string",
            "example": "repeat"
          },
          "header_url": {
            "description": "URL of location to which header image links",
            "type": "string",
            "example": "https://www.my-url.com/donate"
          },
          "primary_color": {
            "description": "Primary color",
            "type": "string",
            "example": "#F0F0F0"
          },
          "secondary_color": {
            "description": "Secondary color",
            "type": "string",
            "example": "#000000"
          }
        },
        "type": "object"
      },
      "Campaign": {
        "title": "Campaign",
        "properties": {
          "address1": {
            "description": "First line of address",
            "type": "string",
            "maxLength": 250,
            "example": "533 F Street",
            "nullable": true
          },
          "campaign_template_id": {
            "description": "Primary identifier of the Campaign Template this Campaign was created from",
            "type": "integer",
            "readOnly": true,
            "example": 413,
            "nullable": true
          },
          "canonical_url": {
            "description": "Canonical url of the Campaign",
            "type": "string",
            "readOnly": true,
            "example": "/campaign/c0",
            "nullable": true
          },
          "category_id": {
            "description": "Category designation for Campaign",
            "type": "integer",
            "example": 1,
            "nullable": true
          },
          "channel_id": {
            "description": "Channel designation for Campaign",
            "type": "integer",
            "example": 2,
            "nullable": true
          },
          "channel_keywords": {
            "description": "List of keywords Campaign is tagged with",
            "type": "string",
            "example": "some_keyword",
            "nullable": true
          },
          "city": {
            "description": "City name",
            "type": "string",
            "maxLength": 50,
            "example": "San Diego",
            "nullable": true
          },
          "contact_email": {
            "description": "Email address for the Campaign Contact. Set to the Organization Email by default if none is specified",
            "type": "string",
            "example": "test@classy.org",
            "nullable": true
          },
          "contact_phone": {
            "description": "Phone number for the Campaign Contact",
            "type": "string",
            "maxLength": 32,
            "example": "619-555-1212"
          },
          "country": {
            "description": "Country name",
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "US",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "created_with": {
            "description": "Indicates which application created the Campaign",
            "type": "string",
            "enum": ["api", "classyapp"],
            "readOnly": true,
            "example": "classyapp"
          },
          "currency_code": {
            "description": "ISO code of the currency against which this Campaign is normalized. Inherited from Organization's currency code.",
            "type": "string",
            "readOnly": true,
            "example": "USD"
          },
          "default_page_appeal_email": {
            "description": "Default appeal text displayed on Fundraising Pages",
            "type": "string",
            "example": "Please donate to my fundraising page",
            "nullable": true
          },
          "default_page_goal": {
            "description": "Default goal for the Campaign's Fundraising Pages. Presented in units of the Campaign's currency_code",
            "type": "integer",
            "format": "double",
            "minimum": 1,
            "example": 500
          },
          "default_page_thank_you_email": {
            "description": "Default thank you email text for the Campaign's Fundraising Pages",
            "type": "string",
            "example": "Thank you",
            "nullable": true
          },
          "default_team_appeal_email": {
            "description": "Default appeal email text for Fundraising Teams",
            "type": "string",
            "example": "Please donate to my fundraising team",
            "nullable": true
          },
          "default_team_goal": {
            "description": "Default goal for the Campaign's Fundraising Teams. Presented in units of the Campaign's currency_code.",
            "type": "integer",
            "format": "double",
            "minimum": 1,
            "example": 500
          },
          "default_team_thank_you_email": {
            "description": "Default thank you email text for the Campaign's Fundraising Teams",
            "type": "string",
            "example": "Thank you",
            "nullable": true
          },
          "designation_id": {
            "description": "ID of Designation the Campaign Transactions will be allocated to",
            "type": "integer",
            "example": 10,
            "nullable": true
          },
          "display_group_name": {
            "description": "Flag to determine if Designation Group Names should be shown",
            "type": "boolean",
            "example": false
          },
          "ended_at": {
            "description": "Date/time of when the campaign ends",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": true
          },
          "effective_fixed_fot_percent": {
            "description": "Percentage to be added to fee on top (aka Classy Mode) Transactions for the Campaign to cover fees. If fixed fot percent is null falls back on the Organization's fixed fot percent",
            "type": "string",
            "format": "double",
            "readOnly": true,
            "example": "4.00",
            "nullable": true
          },
          "effective_flex_rate_percent": {
            "description": "Percentage Campaign elects to be added to donor covered fees calculation to cover any additional costs other than fees. If flex rate percent is null falls back on the Organization's flex rate percent",
            "type": "number",
            "format": "double",
            "readOnly": true,
            "example": 4.2,
            "nullable": true
          },
          "effective_recaptcha_settings": {
            "description": "Indicates whether or not captcha should be displayed on checkout pages. If false at Org level, will not display on campaigns.",
            "type": "string",
            "enum": ["ENABLED", "DISABLED"],
            "readOnly": true,
            "example": "ENABLED",
            "nullable": false
          },
          "external_url": {
            "description": "When set on a Campaign, classy.org will push all requests for this Campaign to the specified URL via HTTP redirect. Commonly used to redirect traffic from ended Campaign to another Site/Campaign",
            "type": "string",
            "example": "https://classy.org",
            "nullable": true
          },
          "goal": {
            "description": "Fundraising goal for this Campaign normalized against currency_code",
            "type": "integer",
            "format": "double",
            "readOnly": true,
            "example": 108.23,
            "nullable": true
          },
          "hide_from_profile": {
            "description": "Indicates whether the Campaign will be hidden on the profile",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "readOnly": true,
            "example": 227362,
            "nullable": false
          },
          "internal_name": {
            "description": "Internal name for Campaign. Can differ from name attribute",
            "type": "string",
            "maxLength": 255,
            "example": "Event #F230DD",
            "nullable": true
          },
          "is_fees_free": {
            "description": "Indicates whether the Campaign has Fees associated with it or not",
            "type": "boolean",
            "readOnly": true,
            "example": false,
            "nullable": true
          },
          "is_general": {
            "description": "Indicates whether the Campaign is general or not. Boolean returned as 0 or 1 accordingly.",
            "type": "number",
            "readOnly": true,
            "example": 1,
            "nullable": true
          },
          "location_details": {
            "description": "Additional information about the location of the event (e.g. directions, clarifications)",
            "type": "string",
            "maxLength": 255,
            "example": "Heading north on I-5..."
          },
          "minimum_donation_amount": {
            "description": "Determines the minimum donation amount allowed.",
            "type": "number",
            "example": 5
          },
          "name": {
            "description": "Campaign name",
            "type": "string",
            "example": "My Campaign"
          },
          "organization_id": {
            "description": "Primary identifier for the associated Organization",
            "type": "integer",
            "readOnly": true,
            "example": 82364
          },
          "postal_code": {
            "description": "Zip Code",
            "type": "integer",
            "example": 92101,
            "nullable": true
          },
          "raw_currency_code": {
            "description": "ISO code of the currency in which this Campaign should be presented. Defaults to currency_code if not specified",
            "type": "string",
            "example": "EUR"
          },
          "raw_goal": {
            "description": "Raw Fundraising Goal for this Campaign",
            "type": "string",
            "example": "100"
          },
          "sort_designation_by": {
            "description": "How to sort within Designation Groups",
            "type": "string",
            "enum": ["A-Z", "NEW-OLD", "OLD-NEW"],
            "example": "A-Z"
          },
          "started_at": {
            "description": "Date/time the campaign begins",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "state": {
            "description": "State/province name",
            "type": "string",
            "maxLength": 20,
            "example": "CA",
            "nullable": true
          },
          "status": {
            "description": "Status of Campaign",
            "type": "string",
            "enum": ["active", "deactivated", "draft", "unpublished"],
            "readOnly": true,
            "example": "active"
          },
          "timezone_identifier": {
            "description": "Timezone Identifier",
            "type": "string",
            "example": "America/Los\\_Angeles"
          },
          "type": {
            "description": "Campaign Type",
            "type": "string",
            "enum": [
              "ticketed",
              "registration",
              "fund_for_entry",
              "peer_to_peer",
              "donation",
              "reg_w_fund",
              "crowdfunding",
              "dynamic"
            ],
            "example": "ticketed"
          },
          "updated_at": {
            "description": "Date/time of last alteration",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z"
          },
          "venue": {
            "description": "Free text representing a location",
            "type": "string",
            "maxLength": 500,
            "example": "City Townhall",
            "nullable": true
          },
          "add_registration_fee": {
            "description": "Indicates whether a registration fee is added or not",
            "type": "boolean",
            "example": false
          },
          "allow_duplicate_fundraisers": {
            "description": "Indicates whether a Campaign allows a single User to own several Fundraising Pages",
            "type": "boolean",
            "example": false
          },
          "allow_fundraising_pages": {
            "description": "Specifies whether a Campaign allows for the creation of new Fundraising Pages. Only relevant for Campaigns with types that allow for Fundraising Pages in general",
            "type": "boolean",
            "example": false
          },
          "allow_team_fundraising": {
            "description": "Specifies whether a Campaign allows for Team Fundraising",
            "type": "boolean",
            "example": false
          },
          "default_page_appeal": {
            "description": "Default appeal text displayed on Fundraising Pages",
            "type": "string",
            "example": "Please donate to my fundraising page",
            "nullable": true
          },
          "default_page_post_asset_id": {
            "description": "Default Asset ID of page story post",
            "type": "integer",
            "example": 1,
            "nullable": true
          },
          "default_page_post_body": {
            "description": "Default body of page story post",
            "type": "string",
            "example": "Lorem ipsum",
            "nullable": true
          },
          "default_page_post_title": {
            "description": "Default title of page story post",
            "type": "string",
            "example": "Welcome to our team page!",
            "nullable": true
          },
          "default_team_appeal": {
            "description": "Default appeal text displayed on Fundraising Teams",
            "type": "string",
            "example": "Please donate to my fundraising team",
            "nullable": true
          },
          "default_team_post_asset_id": {
            "description": "Default Asset ID of team story post",
            "type": "integer",
            "example": 1,
            "nullable": true
          },
          "default_team_post_body": {
            "description": "Default body of team story post",
            "type": "string",
            "example": "Lorem ipsum",
            "nullable": true
          },
          "default_team_post_title": {
            "description": "Default title of team story post",
            "type": "string",
            "example": "Welcome to our team page!",
            "nullable": true
          },
          "default_thank_you_text": {
            "description": "Default thank you text on the thank you page",
            "type": "string",
            "example": "Thank you so much!",
            "nullable": true
          },
          "fixed_fot_percent": {
            "description": "Percentage Campaign elects to be added to Fee on top (aka Classy Mode) Transactions to cover Fees",
            "type": "string",
            "format": "double",
            "example": "4.00",
            "nullable": true
          },
          "flex_rate_percent": {
            "description": "Percentage Campaign elects to be added to donor covered fees calculation to cover any additional costs other than fees.",
            "type": "number",
            "format": "double",
            "example": 4,
            "nullable": true
          },
          "is_billing_address_required": {
            "description": "If true, a billing address must be provided when creating Transactions against the Campaign",
            "type": "boolean",
            "example": false
          },
          "is_ended_at_hidden": {
            "description": "If true, Campaign end date is not shown",
            "type": "boolean",
            "example": false
          },
          "is_started_at_hidden": {
            "description": "If true, Campaign start date is not shown",
            "type": "boolean",
            "example": false
          },
          "pages_can_set_appeal": {
            "description": "Indicates whether Fundraising Pages can set the appeal",
            "type": "boolean",
            "example": false
          },
          "pages_can_set_goal": {
            "description": "Indicates whether Fundraising Pages can set the goal",
            "type": "boolean",
            "example": false
          },
          "team_membership_policy": {
            "description": "Configuration indicating whether team membership for this Campaign's Fundraising Pages is optional, required, or prohibited",
            "type": "string",
            "enum": ["optional", "required", "prohibited"],
            "example": "optional"
          },
          "teams_can_set_appeal": {
            "description": "Indicates whether Fundraising Teams can set the appeal",
            "type": "boolean",
            "example": false
          },
          "teams_can_set_goal": {
            "description": "Indicates whether Fundraising Teams can set the goal",
            "type": "boolean",
            "example": false
          },
          "ticket_pass_on_fees": {
            "description": "Indicates whether a Campaign passes Fees from tickets to the user or not (fee on top for tickets)",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "allow_ecards": {
            "description": "Whether Ecard Dedications are available for this Campaign",
            "type": "boolean",
            "example": false
          },
          "classy_mode_appeal": {
            "description": "Classy mode appeal text",
            "type": "string",
            "example": "Example appeal text",
            "nullable": true
          },
          "classy_mode_checked_by_default": {
            "description": "Classy mode checked by default",
            "type": "boolean",
            "example": false
          },
          "classy_mode_enabled": {
            "description": "If true, give the donor the option to cover the Transaction Fee via ClassyMode calculation",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "corporate_donation_enabled": {
            "description": "If true, give the donor the option to donate on the behalf of a corporation",
            "type": "boolean",
            "example": false
          },
          "custom_url": {
            "description": "Custom URL",
            "type": "string",
            "example": "https://test.org/custom",
            "nullable": true
          },
          "dcf_enabled": {
            "description": "If true, give the donor the option to cover the Transaction Fee via Donor Covered Fees calculation",
            "type": "boolean",
            "example": false
          },
          "dcf_allowed": {
            "description": "If true, this means the campaign must be treated as a dcf campaign",
            "type": "boolean",
            "readOnly": true,
            "example": false
          },
          "disable_donation_attribution": {
            "description": "Flag to allow/disallow donors to select a Fundraising Page or Team to attribute their Donation to. If true, Donation Attribution is disabled. Set to false to enable Donation Attribution",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "hide_anonymous_donations": {
            "description": "If true, Donation forms will not display the anonymous Donation field",
            "type": "boolean",
            "example": false
          },
          "hide_recurring_end_date": {
            "description": "Indicates whether the end date for recurring donations will be hidden in the donation page",
            "type": "boolean",
            "example": false
          },
          "hide_contact_opt_in": {
            "description": "If true, Donation forms will not display the contact opt in field",
            "type": "boolean",
            "example": false
          },
          "hide_donation_amounts": {
            "description": "If true, donors will not be able to hide their donation amounts",
            "type": "boolean",
            "example": false
          },
          "hide_dedications": {
            "description": "If true, donation dedications will not be offered",
            "type": "boolean",
            "example": false
          },
          "hide_donation_comments": {
            "description": "If true, donation forms will not display the donation comments field",
            "type": "boolean",
            "example": false
          },
          "offer_dedication_postal_notifications": {
            "description": "If true, offer to collect mailing information for postal notifications for dedications",
            "type": "boolean",
            "example": false
          },
          "opt_in_checked_by_default": {
            "description": "If true, and if the hide_contact_opt_in option is false, this will check the opt-in selection by default on donation forms",
            "type": "boolean",
            "example": false
          },
          "return_url": {
            "description": "Return URL",
            "type": "string",
            "example": "https://test.org/return",
            "nullable": true
          },
          "send_dedication_emails": {
            "description": "If true, send dedication email for donation",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "logo_id": {
            "description": "Primary identifier of Asset used as the main Campaign Logo. Interpreted from associated Campaign Theme",
            "type": "integer",
            "readOnly": true,
            "example": 1002,
            "nullable": true
          },
          "logo_url": {
            "description": "URL for logo image. Either hardcoded URL for legacy Campaigns or interpreted from logo Asset specified by logo ID",
            "type": "string",
            "readOnly": true,
            "example": "https://www.classy-cdn-url.com/your-logo.png",
            "nullable": true
          },
          "team_cover_photo_id": {
            "description": "ID of the associated Asset that serves as the default cover photo for this Campaign's Teams (inherited from associated Theme)",
            "type": "integer",
            "readOnly": true,
            "example": 2345,
            "nullable": true
          },
          "team_cover_photo_url": {
            "description": "URL for Campaign's default team cover photo image. Interpreted from team cover photo Asset specified by team cover photo ID",
            "type": "string",
            "readOnly": true,
            "example": "https://www.classy-cdn-url.com/your-team-cover-photo.png",
            "nullable": true
          },
          "crypto_giving": {
            "description": "Indicates if Crypto Giving is Enabled, Disabled or Exclusive",
            "type": "string",
            "enum": ["enabled", "disabled", "exclusive"],
            "example": "enabled"
          },
          "embedded_giving": {
            "description": "Indicates if Embedded Giving is Disabled, Modal or Inline",
            "type": "string",
            "enum": ["disabled", "modal", "inline"],
            "example": "disabled"
          },
          "exit_modal": {
            "description": "Indicates if Exit Modal is toggle on/off for a certain Campaign",
            "type": "boolean",
            "example": false
          },
          "use_intelligent_ask_onetime": {
            "description": "Toggle Intelligent Ask Amount suggestion engine for One-time donations",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "use_intelligent_ask_recurring": {
            "description": "Toggle Intelligent Ask Amount suggestion engine for Recurring donations",
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "whitelist_url": {
            "description": "Used to bypass security blocking conditions in the donor iframe, based on X-FRAME-OPTIONS ALLOW-FROM",
            "type": "string",
            "example": "https://www.myawesomecharity.org",
            "nullable": true
          }
        },
        "type": "object"
      },
      "CampaignChannelOverview": {
        "title": "Campaign Channel Overview",
        "properties": {
          "unique_fundraisers_with_facebook": {
            "description": "The number of Facebook fundraisers (only present for Campaign types that support Fundraising Pages)",
            "type": "integer",
            "example": 2
          }
        },
        "type": "object"
      },
      "Roles": {
        "title": "Roles",
        "properties": {
          "id": {
            "description": "Primary identifier of Role",
            "type": "integer",
            "example": 508
          },
          "custom_id": {
            "description": "Internal name for Role",
            "type": "string",
            "example": "campaign_refund_manager"
          },
          "description": {
            "description": "Description of the Role",
            "type": "string",
            "example": "View transaction details and issue refunds for specific Campaigns. Refunds can be issued from the Transaction History page in your Organization's account."
          },
          "name": {
            "description": "Name of the Role",
            "type": "string",
            "example": "Campaign Administrator"
          },
          "is_assignable": {
            "description": "Indicates if the Role is assignable or not.",
            "type": "boolean",
            "default": true,
            "example": "true"
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of record last updated",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "classy_live_event_id": {
            "description": "ID of associated classy live event id",
            "type": "integer",
            "example": 10
          }
        },
        "type": "object"
      },
      "CampaignRoles": {
        "title": "Campaign Roles",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "scope_type": {
                "description": "Type of Scope",
                "type": "string",
                "example": "campaign"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/Roles"
          }
        ]
      },
      "CampaignBatchCommitmentFillable": {
        "title": "Campaign Batch Commitment Fillable",
        "properties": {
          "action": {
            "description": "Bulk action type",
            "type": "string",
            "enum": ["cancel", "charge", "update", "waive"],
            "example": "charge"
          },
          "entities": {
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "description": "Primary identifier of batch entity",
                  "type": "integer",
                  "example": 2173528
                },
                "type": {
                  "description": "The type of batch entity",
                  "type": "string",
                  "enum": ["fundraising_page"],
                  "example": "fundraising_page"
                },
                "amount": {
                  "description": "Commitment amount",
                  "type": "integer",
                  "example": 10
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "CampaignBatchCommitment": {
        "title": "Campaign Batch Commitment",
        "properties": {
          "data": {
            "description": "Status of entities added in the queue.",
            "type": "object",
            "example": {
              "882736": "Successfully added in the queue.",
              "882816": "Successfully added in the queue."
            }
          }
        },
        "type": "object"
      },
      "CampaignAggregates": {
        "title": "Campaign Aggregate",
        "properties": {
          "average_donation_amount": {
            "description": "Average Donation Amount",
            "type": "integer",
            "format": "float",
            "example": 100.5
          },
          "donations_count": {
            "description": "Total donations for the campaign",
            "type": "integer",
            "example": 1000
          },
          "donors_count": {
            "description": "Total donors for the campaign",
            "type": "integer",
            "example": 1000
          },
          "fees_amount": {
            "description": "Total amount of fees for the campaign",
            "type": "number",
            "format": "float",
            "example": 10
          },
          "fundraising_teams_count": {
            "description": "Total teams for the campaign",
            "type": "integer",
            "example": 1000
          },
          "fundraising_pages_count": {
            "description": "Total pages for the campaign",
            "type": "integer",
            "example": 1000
          },
          "hard_credits_amount": {
            "description": "Sum of all the direct donations.",
            "type": "integer",
            "format": "float",
            "example": 200
          },
          "largest_donation_amount": {
            "description": "Amount of the largest donation made to the campaign",
            "type": "integer",
            "format": "float",
            "example": 1475.99
          },
          "net_amount": {
            "description": "Total amount raised, minus fees and costs, for the campaign",
            "type": "number",
            "format": "float",
            "example": 987
          },
          "raised_amount": {
            "description": "Total raised by the campaign",
            "type": "integer",
            "format": "float",
            "example": 10000
          },
          "soft_credits_amount": {
            "description": "Sum of the soft credits the campaign has",
            "type": "integer",
            "format": "float",
            "example": 16.5
          },
          "progress_bar_amount": {
            "description": "Dollar amount towards progress bar goal stored in campaign's currency",
            "type": "integer",
            "format": "float",
            "example": 500.5
          }
        },
        "type": "object"
      },
      "CampaignDesignation": {
        "title": "Campaign Designation",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 423,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "deleted_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "designation_group_id": {
            "description": "Primary identifier of associated Designation Group",
            "type": "integer",
            "example": 98234,
            "nullable": false
          },
          "designation_id": {
            "description": "Primary identifier of associated Designation",
            "type": "integer",
            "example": 34672,
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 427,
            "nullable": false
          },
          "is_display_default": {
            "description": "Indicates whether the default display is used",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignDesignationFillable": {
        "title": "Campaign Designation Fillable",
        "properties": {
          "is_display_default": {
            "description": "Indicates whether the default display is used",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "designation_group_id": {
            "description": "Primary identifier of associated Designation Group",
            "type": "integer",
            "example": 98234,
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignModule": {
        "title": "Campaign Module",
        "properties": {
          "name": {
            "description": "Module name",
            "type": "string",
            "example": "promo_codes"
          }
        },
        "type": "object"
      },
      "Commitment": {
        "title": "Commitment",
        "properties": {
          "agreed_at": {
            "description": "Timestamp when Commitment was agreed",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "billing_address_id": {
            "description": "Billing Address of Commitment",
            "type": "integer",
            "example": 6754
          },
          "canceled_at": {
            "description": "Date time of canceled Commitment",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "cc_expiry": {
            "description": "Expiration date for the Credit Card used",
            "type": "string",
            "example": "202101"
          },
          "cc_last_four": {
            "description": "Last four digits of the Credit Card used",
            "type": "string",
            "example": "1212"
          },
          "cc_type": {
            "description": "Type of Credit Card used",
            "type": "string",
            "example": "Visa"
          },
          "created_at": {
            "description": "Timestamp when Commitment was created",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "deadline": {
            "description": "Timestamp when Commitment value must be met",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "The ID of the Commitment",
            "type": "integer",
            "example": 98374
          },
          "status": {
            "description": "Status of Commitment",
            "type": "string",
            "enum": [
              "achieved",
              "canceled",
              "processing",
              "not_achieved",
              "payment_error",
              "pending_agreement",
              "waived"
            ],
            "example": "achieved"
          },
          "updated_at": {
            "description": "Timestamp when Commitment was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "value": {
            "description": "Amount that must be raised by the Commitment deadline",
            "type": "number",
            "format": "float",
            "example": "100.00",
            "nullable": false
          },
          "waived_at": {
            "description": "Timestamp when Commitment was waived",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          }
        },
        "type": "object"
      },
      "CommitmentFillable": {
        "title": "Commitment Fillable",
        "properties": {
          "agreed_at": {
            "description": "Timestamp when Commitment was agreed",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "canceled_at": {
            "description": "Date time of canceled Commitment",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "deadline": {
            "description": "Timestamp when Commitment value must be met",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "value": {
            "description": "mount that must be raised by the Commitment deadline",
            "type": "number",
            "format": "float",
            "example": "100.00",
            "nullable": false
          },
          "waived_at": {
            "description": "Timestamp when Commitment was waived",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          }
        },
        "type": "object"
      },
      "Designation": {
        "title": "Designation",
        "properties": {
          "city": {
            "description": "The name of the city associated with the Designation",
            "type": "string",
            "maxLength": 100,
            "example": "San Diego",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "description": {
            "description": "A brief description of the Designation",
            "type": "string",
            "maxLength": 4095,
            "example": "My Designation Description",
            "nullable": true
          },
          "end_time": {
            "description": "Date/time that record ends",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "external_reference_id": {
            "description": "Primary identifier of associated Member",
            "type": "string",
            "maxLength": 100,
            "example": "my_unique_identifier",
            "nullable": true
          },
          "goal": {
            "description": "The fundraising goal for the Designation",
            "type": "string",
            "format": "float",
            "minimum": 1,
            "example": "1000.0",
            "nullable": true
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 34672,
            "nullable": false
          },
          "is_active": {
            "description": "Indicates whether Designation is active",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "is_complete": {
            "description": "Indicates whether Designation is complete",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "is_default": {
            "description": "Indicates whether this is the default Designation for the organization. Only one Designation per Organization can have this be true",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "name": {
            "description": "Name of the Designation, unique to this Organization",
            "type": "string",
            "maxLength": 127,
            "example": "My Designation Name",
            "nullable": true
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "postal_code": {
            "description": "Postal code associated with the Designation",
            "type": "string",
            "maxLength": 10,
            "example": "90210",
            "nullable": true
          },
          "start_time": {
            "description": "Date/time that record starts",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "state": {
            "description": "Two-letter abbreviation of the state associated with the Designation",
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "CA",
            "nullable": true
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "DesignationFillable": {
        "title": "Designation Fillable",
        "properties": {
          "city": {
            "description": "The name of the city associated with the Designation",
            "type": "string",
            "maxLength": 100,
            "example": "San Diego",
            "nullable": true
          },
          "description": {
            "description": "A brief description of the Designation",
            "type": "string",
            "example": "My Designation Description",
            "nullable": true
          },
          "end_date": {
            "description": "Date that record ends",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": true
          },
          "end_time": {
            "description": "Time that record ends",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": true
          },
          "external_reference_id": {
            "description": "Primary identifier of associated Member",
            "type": "string",
            "maxLength": 100,
            "example": "my_unique_identifier",
            "nullable": true
          },
          "goal": {
            "description": "The Fundraising Goal for the Designation",
            "type": "string",
            "format": "float",
            "minimum": 1,
            "example": "1000.0",
            "nullable": true
          },
          "is_active": {
            "description": "Indicates whether Designation is active",
            "type": "boolean",
            "default": false,
            "example": true,
            "nullable": false
          },
          "is_complete": {
            "description": "Indicates whether Designation is complete",
            "type": "boolean",
            "default": false,
            "example": false,
            "nullable": false
          },
          "is_default": {
            "description": "Indicates whether this is the default Designation for the Organization. Only one Designation per Organization can have this be true",
            "type": "boolean",
            "default": false,
            "example": false,
            "nullable": false
          },
          "name": {
            "description": "Name of the Designation, unique to this Organization",
            "type": "string",
            "maxLength": 127,
            "example": "My Designation Name"
          },
          "postal_code": {
            "description": "Postal code associated with the Designation",
            "type": "string",
            "maxLength": 50,
            "example": "90210",
            "nullable": true
          },
          "start_date": {
            "description": "Date that record starts",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "start_time": {
            "description": "Time that record starts",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "state": {
            "description": "Two-letter abbreviation of the state associated with the Designation",
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "CA",
            "nullable": true
          }
        },
        "type": "object"
      },
      "CampaignGroupDesignation": {
        "title": "Designation (Campaign/Group)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Designation"
          },
          {
            "properties": {
              "associated_at": {
                "description": "Date/time that record was associated to the Campaign",
                "type": "string",
                "format": "date-time",
                "example": "2021-04-23T08:23:21Z"
              },
              "campaign_designation_is_active": {
                "description": "Indicates whether Campaign Designation is active",
                "type": "boolean",
                "example": false
              },
              "campaign_designation_is_display_default": {
                "description": "Indicates whether Campaign Designation is the default",
                "type": "boolean",
                "example": false
              },
              "designation_group_id": {
                "description": "Primary identifier of record",
                "type": "integer",
                "example": 98234,
                "nullable": false
              },
              "is_display_default": {
                "description": "This is the displayed default Designation for the specified Campaign. Only one Designation per Campaign can have this be true",
                "type": "boolean",
                "example": true
              },
              "is_display_default_updated_at": {
                "description": "Date/time that is_display_default was updated",
                "type": "string",
                "format": "date-time",
                "example": "2021-04-23T08:23:21Z"
              }
            },
            "type": "object"
          }
        ]
      },
      "DesignationGroup": {
        "title": "Designation Group",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 98234,
            "nullable": false
          },
          "name": {
            "description": "The name of the Designation Group, unique to this Campaign",
            "type": "string",
            "example": "My Designation Group Name"
          },
          "sequence": {
            "description": "Determines the order in which Groups will be displayed in the UI",
            "type": "integer",
            "example": 123,
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "DesignationGroupFillable": {
        "title": "Designation Group Fillable",
        "properties": {
          "name": {
            "description": "The name of the Designation Group, unique to this Campaign",
            "type": "string",
            "example": "My Designation Group Name"
          },
          "sequence": {
            "description": "Determines the order in which Groups will be displayed in the UI",
            "type": "integer",
            "example": 123,
            "nullable": true
          }
        },
        "type": "object"
      },
      "DonationMatchingPlan": {
        "title": "Donation Matching Plan",
        "required": ["business_name", "started_at", "timezone_identifier"],
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "readOnly": true,
            "example": 23847,
            "nullable": false
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "readOnly": true,
            "example": 227362
          },
          "currency_code": {
            "description": "Currency in which the Donation Matching Plan matches donations. The currency cannot be modified after the DonationMatchingPlan is created.",
            "type": "string",
            "example": "USD",
            "nullable": false
          },
          "matching_limit_amount": {
            "description": "Total amount in the Donation Matching Plan currency the sponsor is willing to match. 0 means unlimited.",
            "type": "number",
            "minimum": 0,
            "example": 5000
          },
          "started_at": {
            "description": "Date/time of the beginning of the sponsor's matching period",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "ended_at": {
            "description": "Date/time of the end of the sponsor's matching period. The value must be after the `started_at` value.",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-24T10:25:03Z"
          },
          "business_name": {
            "description": "Name of the sponsor. Will be displayed in feed items when matching donations",
            "type": "string",
            "example": "Sponsor Name"
          },
          "timezone_identifier": {
            "description": "Sponsor timezone",
            "type": "string",
            "example": "Europe/Paris"
          },
          "matched_amount": {
            "description": "Total amount the sponsor has currently matched, in the currency of the Donation Matching Plan",
            "type": "integer",
            "minimum": 0,
            "readOnly": true,
            "example": 4200
          },
          "asset_id": {
            "description": "Primary identifier of sponsor thumbnail Asset which will be displayed in Feed Items",
            "type": "integer",
            "example": 1145,
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-04-23T10:25:03Z"
          }
        },
        "type": "object"
      },
      "Ecard": {
        "title": "Ecard",
        "properties": {
          "asset_id": {
            "description": "Primary identifier of associated image file Asset",
            "type": "integer",
            "example": 1145,
            "nullable": true
          },
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "readOnly": true,
            "example": 227362,
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "readOnly": true,
            "example": 4377,
            "nullable": false
          },
          "image_url": {
            "description": "Public URL for the Ecard image",
            "type": "string",
            "example": "https://classy-assets.classy.org/1-54asdfa34.png"
          },
          "is_deleted": {
            "description": "Indicates whether Ecard has been deleted",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "order": {
            "description": "Display order for listings. Impacts display in Classy.org",
            "type": "integer",
            "example": 1
          }
        },
        "type": "object"
      },
      "FAQ": {
        "title": "Frequently Asked Questions",
        "properties": {
          "answer": {
            "description": "FAQ Answer Body",
            "type": "string",
            "format": "string",
            "maxLength": 500,
            "example": "The answer to this question is 42",
            "nullable": false
          },
          "campaign_id": {
            "description": "Primary identifier of the associated Campaign",
            "type": "integer",
            "example": "227362",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 9384,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "question": {
            "description": "FAQ Body",
            "type": "string",
            "format": "string",
            "maxLength": 100,
            "example": "What is a question?",
            "nullable": false
          },
          "tag": {
            "description": "Tags assigned to the FAQ",
            "type": "string",
            "enum": ["tax", "other"],
            "example": "other",
            "nullable": true
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "weight": {
            "description": "Identify the importance of this Question when sorting",
            "type": "integer",
            "maximum": 255,
            "minimum": 0,
            "example": 10,
            "nullable": false
          }
        },
        "type": "object"
      },
      "FAQFillable": {
        "title": "Fillable Frequently Asked Questions",
        "properties": {
          "answer": {
            "description": "FAQ Answer Body",
            "type": "string",
            "format": "string",
            "maxLength": 500,
            "example": "The answer to this question is 42",
            "nullable": false
          },
          "question": {
            "description": "FAQ Body",
            "type": "string",
            "format": "string",
            "maxLength": 100,
            "example": "What is a question?",
            "nullable": false
          },
          "tag": {
            "description": "Tags assigned to the FAQ",
            "type": "string",
            "enum": ["tax", "other"],
            "example": "other",
            "nullable": true
          },
          "weight": {
            "description": "Identify the importance of this Question when sorting",
            "type": "integer",
            "maximum": 255,
            "minimum": 0,
            "example": 10,
            "nullable": false
          }
        },
        "type": "object"
      },
      "FundraisingPage": {
        "title": "FundraisingPage",
        "properties": {
          "id": {
            "description": "ID of Fundraising Page",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "alias": {
            "description": "Alias of the Fundraising Page",
            "type": "string",
            "example": "My Super Awesome page",
            "nullable": false
          },
          "campaign_id": {
            "description": "Parent Campaign ID",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "commitment_id": {
            "description": "Commitment ID",
            "type": "integer",
            "example": 98374,
            "nullable": true
          },
          "cover_photo_id": {
            "description": "Fundraising Page cover photo",
            "type": "integer",
            "example": 98374,
            "nullable": true
          },
          "created_at": {
            "description": "Datetime at which the Fundraising Page was created",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "currency_code": {
            "description": "ISO code of the currency against which this Fundraising Page is normalized.",
            "type": "string",
            "example": "USD",
            "nullable": true
          },
          "designation_id": {
            "description": "Designation ID for this Fundraising Page",
            "type": "integer",
            "example": 34672,
            "nullable": true
          },
          "ended_at": {
            "description": "Page end date",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": true
          },
          "fundraising_team_id": {
            "description": "Fundraising Team ID to whom this Fundraising Page is associated",
            "type": "integer",
            "example": 209745,
            "nullable": true
          },
          "goal": {
            "description": "Fundraising goal for this Fundraising Page normalized against 'currency_code'",
            "type": "number",
            "format": "float",
            "example": "123.23",
            "nullable": true
          },
          "intro_text": {
            "description": "HTML Formatted string for intro text",
            "type": "string",
            "example": "Thanks for visiting my fundraising page!<br>",
            "nullable": false
          },
          "is_primary": {
            "description": "Flag denoting primary Fundraising Page for child Fundraising Pages",
            "type": "boolean",
            "example": true
          },
          "is_tribute": {
            "description": "Flag denoting whether Fundraising Page is a tribute to someone",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "logo_id": {
            "description": "ID of Asset used as the Fundraising Page logo",
            "type": "integer",
            "example": 1002,
            "nullable": true
          },
          "logo_url": {
            "description": "URL for logo image",
            "type": "string",
            "example": "https://www.classy-cdn-url.com/your-logo.png",
            "nullable": true
          },
          "member_email_text": {
            "description": "HTML formatted string for member email body",
            "type": "string",
            "example": "<p>My email body</p>",
            "nullable": true
          },
          "member_id": {
            "description": "Member ID associated with this Page",
            "type": "integer",
            "example": 2012
          },
          "raw_currency_code": {
            "description": "ISO code of the default currency in which this Fundraising Page should be presented",
            "type": "string",
            "example": "EUR"
          },
          "raw_goal": {
            "description": "Raw fundraising goal for this Fundraising Page",
            "type": "number",
            "format": "float",
            "example": "100.00"
          },
          "organization_id": {
            "description": "Organization ID",
            "type": "integer",
            "example": 82364
          },
          "parent_id": {
            "description": "Parent Fundraising Page ID",
            "type": "integer",
            "example": 1
          },
          "questions": {
            "description": "Collection of Questions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            }
          },
          "status": {
            "description": "Status for this Fundraising Page",
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "deleted",
              "pending_questions",
              "pending_approval",
              "pending_more_info"
            ],
            "example": "active"
          },
          "supporter_id": {
            "description": "Supporter ID associated with the Fundraising Page",
            "type": "integer",
            "example": 5827
          },
          "team_role": {
            "description": "If Fundraising Page is for a Team Member, it will contain the role of the Team Member",
            "type": "string",
            "enum": ["primary-captain", "co-captain"],
            "example": "primary-captain",
            "nullable": true
          },
          "thankyou_email_text": {
            "description": "HTML formatted string for thank you email body",
            "type": "string",
            "example": "<p>My email body</p>"
          },
          "thank_you_text": {
            "description": "Default thank you text on the thank you page",
            "type": "string",
            "example": "Thank You!"
          },
          "title": {
            "description": "Page title",
            "type": "string",
            "example": "My Page Title"
          },
          "updated_at": {
            "description": "Date the Fundraising Page was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": true
          },
          "canonical_url": {
            "description": "The canonical url of the Fundraising Page",
            "type": "string",
            "example": "/fundraising-page/2173528"
          }
        },
        "type": "object"
      },
      "FundraisingPageFillableCreate": {
        "title": "FundraisingPage (Fillable Create)",
        "properties": {
          "alias": {
            "description": "Alias of the Fundraising Page",
            "type": "string",
            "example": "My Super Awesome page",
            "nullable": false
          },
          "cover_photo_id": {
            "description": "Fundraising Page cover photo",
            "type": "integer",
            "example": 98374,
            "nullable": true
          },
          "designation_id": {
            "description": "Designation ID for this Fundraising Page",
            "type": "integer",
            "example": 34672,
            "nullable": true
          },
          "ended_at": {
            "description": "Page end date",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": true
          },
          "intro_text": {
            "description": "HTML Formatted string for intro text",
            "type": "string",
            "example": "Thanks for visiting my fundraising page!<br>",
            "nullable": false
          },
          "is_tribute": {
            "description": "Flag denoting whether Fundraising Page is a tribute to someone",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "logo_id": {
            "description": "ID of Asset used as the Fundraising Page logo",
            "type": "integer",
            "example": 1002,
            "nullable": true
          },
          "member_email_text": {
            "description": "HTML formatted string for member email body",
            "type": "string",
            "example": "<p>My email body</p>",
            "nullable": true
          },
          "member_id": {
            "description": "Member ID associated with this Fundraising Page",
            "type": "integer",
            "example": 2012
          },
          "raw_currency_code": {
            "description": "ISO code of the default currency in which this Fundraising Page should be presented",
            "type": "string",
            "example": "EUR"
          },
          "raw_goal": {
            "description": "Raw fundraising goal for this Fundraising Page",
            "type": "number",
            "format": "float",
            "example": "100.00"
          },
          "thankyou_email_text": {
            "description": "HTML formatted string for thank you email body",
            "type": "string",
            "example": "<p>My email body</p>"
          },
          "thank_you_text": {
            "description": "Default thank you text on the thank you page",
            "type": "string",
            "example": "Thank You!"
          },
          "title": {
            "description": "Page title",
            "type": "string",
            "example": "My Page Title"
          }
        },
        "type": "object"
      },
      "FundraisingPageFillableUpdate": {
        "title": "FundraisingPage (Fillable Update)",
        "properties": {
          "alias": {
            "description": "Alias of the Fundraising Page",
            "type": "string",
            "example": "My Super Awesome page",
            "nullable": false
          },
          "cover_photo_id": {
            "description": "Fundraising Page cover photo",
            "type": "integer",
            "example": 98374,
            "nullable": true
          },
          "designation_id": {
            "description": "Designation ID for this Fundraising Page",
            "type": "integer",
            "example": 34672,
            "nullable": true
          },
          "ended_at": {
            "description": "Page end date",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": true
          },
          "intro_text": {
            "description": "HTML Formatted string for intro text",
            "type": "string",
            "example": "Thanks for visiting my fundraising page!<br>",
            "nullable": false
          },
          "logo_id": {
            "description": "ID of asset used as the Fundraising Page logo",
            "type": "integer",
            "example": 1002,
            "nullable": true
          },
          "member_email_text": {
            "description": "HTML formatted string for member email body",
            "type": "string",
            "example": "<p>My email body</p>",
            "nullable": true
          },
          "member_id": {
            "description": "Member ID associated with this Fundraising Page",
            "type": "integer",
            "example": 2012
          },
          "currency_code": {
            "description": "ISO code of the currency against which this Fundraising Page is normalized.",
            "type": "string",
            "example": "USD",
            "nullable": true
          },
          "goal": {
            "description": "Fundraising goal for this Fundraising Page",
            "type": "number",
            "format": "float",
            "example": "123.23"
          },
          "is_tribute": {
            "description": "Flag denoting whether Fundraising Page is a tribute to someone",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "thankyou_email_text": {
            "description": "HTML formatted string for thank you email body",
            "type": "string",
            "example": "<p>My email body</p>"
          },
          "thank_you_text": {
            "description": "Default thank you text on the thank you page",
            "type": "string",
            "example": "Thank You!"
          },
          "title": {
            "description": "Page title",
            "type": "string",
            "example": "My Page Title"
          }
        },
        "type": "object"
      },
      "FundraisingPageAggregate": {
        "title": "FundraisingPageAggregate",
        "properties": {
          "average_donation_amount": {
            "description": "Average Donation Amount",
            "type": "number",
            "format": "double",
            "example": 100.5,
            "nullable": true
          },
          "donations_count": {
            "description": "Total donations for the fundraising page",
            "type": "integer",
            "example": 1000
          },
          "donors_count": {
            "description": "Total donors for the fundraising page",
            "type": "integer",
            "example": 1000
          },
          "hard_credits_amount": {
            "description": "Hard Credits amount",
            "type": "number",
            "format": "double",
            "example": 200
          },
          "largest_donation_amount": {
            "description": "Largest Donation Amount",
            "type": "number",
            "format": "double",
            "example": 1475.99
          },
          "raised_amount": {
            "description": "Raised Amount",
            "type": "number",
            "format": "double",
            "example": 10000
          },
          "soft_credits_amount": {
            "description": "Soft Credits Amount",
            "type": "number",
            "format": "double",
            "example": 16.5
          },
          "progress_bar_amount": {
            "description": "Dollar amount towards progress bar goal stored in page's currency",
            "type": "integer",
            "format": "float",
            "example": 500.5
          }
        },
        "type": "object"
      },
      "FundraisingTeam": {
        "title": "Fundraising Team",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of associated Campaign",
            "type": "integer",
            "example": 227362
          },
          "city": {
            "description": "City",
            "type": "string",
            "maxLength": 50,
            "example": "San Diego",
            "nullable": true
          },
          "country": {
            "description": "Country. Must be a valid ISO 3166-1 alpha-2 country code",
            "type": "string",
            "maxLength": 2,
            "example": "US",
            "nullable": true
          },
          "cover_photo_id": {
            "description": "Primary identifier of asset used as the Fundraising Team cover photo",
            "type": "integer",
            "example": 1145,
            "nullable": true
          },
          "cover_photo_url": {
            "description": "URL for cover photo image. Interpreted from cover_photo asset specified by cover_photo_id",
            "type": "string",
            "example": "https://www.classy-cdn-url.com/your-cover-photo.png",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "currency_code": {
            "description": "ISO code of the currency against which this Fundraising Team is normalized. Defaults to USD",
            "type": "string",
            "maxLength": 3,
            "example": "USD"
          },
          "description": {
            "description": "Team description",
            "type": "string",
            "example": "My team description",
            "nullable": true
          },
          "goal": {
            "description": "Fundraising Goal for this Team normalized against 'currency_code'. Defaults to the campaign's default team goal",
            "type": "integer",
            "format": "float",
            "example": 108.23
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 209745
          },
          "logo_id": {
            "description": "Primary identifier of associated Asset",
            "type": "integer",
            "example": 1145,
            "nullable": true
          },
          "logo_url": {
            "description": "URL for logo image. Either hardcoded URL for legacy Fundraising Teams or interpreted from logo Asset specified by logo_id",
            "type": "string",
            "maxLength": 255,
            "example": "https://www.classy-cdn-url.com/your-cover-photo.png",
            "nullable": true
          },
          "name": {
            "description": "Team name",
            "type": "string",
            "maxLength": 127,
            "example": "My Team"
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": true
          },
          "parent_id": {
            "description": "Parent Team ID. Used for creating a team hierarchy. Fundraising Team Policy must support SubTeam creation if a Parent Team ID is supplied",
            "type": "integer",
            "example": 209750,
            "nullable": true
          },
          "postal_code": {
            "description": "Postal Code",
            "type": "string",
            "maxLength": 50,
            "example": "90210",
            "nullable": true
          },
          "raw_currency_code": {
            "description": "ISO code of the default currency in which this Fundraising Team should be presented. Defaults to 'currency_code' if not specified",
            "type": "string",
            "example": "EUR"
          },
          "raw_goal": {
            "description": "Raw fundraising goal for this Team",
            "type": "string",
            "example": 100
          },
          "root_id": {
            "description": "Team ID at the highest level of the hierarchy. Fundraising Team Policy must support SubTeam creation if a Root ID is supplied",
            "type": "integer",
            "example": 3345,
            "nullable": true
          },
          "state": {
            "description": "State/province code. Must be a valid USPS state code",
            "type": "string",
            "maxLength": 100,
            "example": "CA",
            "nullable": true
          },
          "status": {
            "description": "Team status",
            "type": "string",
            "enum": [
              "active",
              "deleted",
              "pending_approval",
              "pending_cart_questions",
              "pending_cart_completion"
            ],
            "example": "active",
            "nullable": true
          },
          "team_lead_id": {
            "description": "Primary identifier of associated Team Lead",
            "type": "integer",
            "example": 2012,
            "nullable": true
          },
          "team_lead_supporter_id": {
            "description": "Primary identifier of associated Team Lead Supporter",
            "type": "integer",
            "example": 7845,
            "nullable": true
          },
          "thank_you_text": {
            "description": "Default thank you text on the thank you page",
            "type": "string",
            "example": "Thank you!",
            "nullable": true
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": true
          },
          "canonical_url": {
            "description": "The canonical url of the Fundraising Team",
            "type": "string",
            "example": "/team/10",
            "nullable": true
          },
          "designation_id": {
            "description": "Primary identifier of associated Designation",
            "type": "integer",
            "example": 34672,
            "nullable": true
          },
          "team_policy_id": {
            "description": "Primary identifier of associated Team Policy",
            "type": "integer",
            "example": 2354,
            "nullable": true
          }
        },
        "type": "object"
      },
      "FundraisingTeamFillable": {
        "title": "Fundraising Team Fillable",
        "properties": {
          "city": {
            "description": "City",
            "type": "string",
            "maxLength": 50,
            "example": "San Diego",
            "nullable": true
          },
          "country": {
            "description": "Country. Must be a valid ISO 3166-1 alpha-2 country code",
            "type": "string",
            "maxLength": 2,
            "example": "US",
            "nullable": true
          },
          "description": {
            "description": "Team description",
            "type": "string",
            "example": "My team description",
            "nullable": true
          },
          "name": {
            "description": "Team name",
            "type": "string",
            "maxLength": 127,
            "example": "My Team"
          },
          "postal_code": {
            "description": "Postal Code",
            "type": "string",
            "maxLength": 50,
            "example": "90210",
            "nullable": true
          },
          "raw_currency_code": {
            "description": "ISO code of the default currency in which this Fundraising Team should be presented. Defaults to 'currency_code' if not specified",
            "type": "string",
            "maxLength": 3,
            "example": "EUR",
            "nullable": true
          },
          "raw_goal": {
            "description": "Raw fundraising goal for this team. If unspecified, defaults to the team goal value set on the campaign",
            "type": "integer",
            "example": 100,
            "nullable": true
          },
          "state": {
            "description": "State/province name. Must be a valid USPS state code",
            "type": "string",
            "maxLength": 100,
            "example": "CA",
            "nullable": true
          },
          "thank_you_text": {
            "description": "Default thank you text on the thank you page",
            "type": "string",
            "example": "Thank you!",
            "nullable": true
          },
          "designation_id": {
            "description": "Primary identifier of associated Designation. Defaults to the campaign's designation",
            "type": "integer",
            "example": 34672,
            "nullable": true
          }
        },
        "type": "object"
      },
      "FundraisingTeamAggregate": {
        "title": "Fundraising Team Aggregate",
        "properties": {
          "average_donation_amount": {
            "description": "Average Donation Amount",
            "type": "integer",
            "format": "float",
            "example": 100.5
          },
          "credit_balance": {
            "description": "Sum of donations made directly to the Team that have not yet been allocated to its pages",
            "type": "integer",
            "format": "float",
            "example": 500
          },
          "donations_count": {
            "description": "Total donations for the Fundraising Team",
            "type": "integer",
            "example": 1000
          },
          "donors_count": {
            "description": "Total donors for the Fundraising Team",
            "type": "integer",
            "example": 1000
          },
          "fundraising_pages_count": {
            "description": "Total donors for the Fundraising Team",
            "type": "integer",
            "example": 1000
          },
          "hard_credits_amount": {
            "description": "Sum of all the direct donations. Does not include donations made to a Fundraising Page in the team",
            "type": "integer",
            "format": "float",
            "example": 200
          },
          "largest_donation_amount": {
            "description": "Amount of the largest donation made directly to the Team",
            "type": "integer",
            "format": "float",
            "example": 1475.99
          },
          "raised_amount": {
            "description": "Total raised by the Team Page",
            "type": "integer",
            "format": "float",
            "example": 10000
          },
          "soft_credits_amount": {
            "description": "Sum of the soft credits the Fundraising Team has",
            "type": "integer",
            "format": "float",
            "example": 16.5
          },
          "progress_bar_amount": {
            "description": "Dollar amount towards progress bar goal stored in team's currency",
            "type": "integer",
            "format": "float",
            "example": 500.5
          }
        },
        "type": "object"
      },
      "FundraisingTeamPolicy": {
        "title": "Fundraising Team Policy",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 2354,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          },
          "allow_subteams": {
            "description": "Indicates whether subteams are allowed under this Team",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "allow_fundraising_pages": {
            "description": "Indicates whether Fundraising Pages are allowed under this Team",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "allow_transactions": {
            "description": "Indicates whether Transactions are allowed under this Team",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "allow_cross_campaign_fundraisers": {
            "description": "Indicates whether Fundraisers from other Campaigns are allowed to join this Team",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "allocation_method": {
            "description": "Allocation method for this Team",
            "type": "string",
            "enum": ["manual", "automatic-even-split"],
            "example": "manual",
            "nullable": false
          },
          "fundraising_team_id": {
            "description": "Primary identifier of associated Fundraising Team",
            "type": "integer",
            "example": 209745
          },
          "min_members": {
            "description": "Minimum Members required before the Team is considered active",
            "type": "integer",
            "example": 1
          },
          "max_members": {
            "description": "Maximum Members allowed for this Team",
            "type": "integer",
            "example": 10
          },
          "fundraiser_registration_policy": {
            "description": "Fundraiser and Sub-team Registration Policy for this Team",
            "type": "string",
            "enum": [
              "public",
              "private-confirmation-required",
              "private-invite-only",
              "private-password",
              "admin-only"
            ],
            "example": "public",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "FundraisingTeamPolicyFillable": {
        "title": "Fundraising Team Policy Fillable",
        "properties": {
          "allow_subteams": {
            "description": "Indicates whether SubTeams are allowed under this Team",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "allow_fundraising_pages": {
            "description": "Indicates whether Fundraising Pages are allowed under this Team",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "allow_transactions": {
            "description": "Indicates whether Transactions are allowed under this Team",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "allow_cross_campaign_fundraisers": {
            "description": "Indicates whether Fundraisers from other Campaigns are allowed to join this Team",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "allocation_method": {
            "description": "Allocation method for this Team",
            "type": "string",
            "enum": ["manual", "automatic-even-split"],
            "example": "manual",
            "nullable": false
          },
          "min_members": {
            "description": "Minimum Members required before the Team is considered active",
            "type": "integer",
            "example": 1
          },
          "max_members": {
            "description": "Maximum Members allowed for this Team",
            "type": "integer",
            "example": 10
          },
          "fundraiser_registration_policy": {
            "description": "Fundraiser and Sub-team Registration Policy for this Team",
            "type": "string",
            "enum": [
              "public",
              "private-confirmation-required",
              "private-invite-only",
              "private-password",
              "admin-only"
            ],
            "example": "public",
            "nullable": false
          }
        },
        "type": "object"
      },
      "Question": {
        "title": "Question",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of Campaign",
            "type": "integer",
            "example": 227362
          },
          "created_at": {
            "description": "Date/time of when record created",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": true
          },
          "deleted_at": {
            "description": "Date/time of when record deleted",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": true
          },
          "enum_options": {
            "description": "Enum question options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionEnumOption"
            }
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 45678
          },
          "is_deleted": {
            "description": "Question deleted or not",
            "type": "boolean",
            "example": false
          },
          "is_required": {
            "description": "If the Question is required or not",
            "type": "boolean",
            "example": true
          },
          "label": {
            "description": "Question label",
            "type": "string",
            "example": "Do you require accommodations due to a medical condition or disability?"
          },
          "location": {
            "description": "Question location",
            "type": "string",
            "enum": [
              "donation_page",
              "team_creation",
              "page_creation",
              "campaign_registration"
            ],
            "example": "donation_page"
          },
          "product_id": {
            "description": "Identifier of associated product, such as ticket",
            "type": "integer",
            "example": "73647",
            "nullable": true
          },
          "tag": {
            "description": "Question tag, unique for a location on a campaign",
            "type": "string",
            "enum": [
              "address",
              "address2",
              "address_type",
              "birthdate",
              "blog",
              "cellphone",
              "city",
              "company_name",
              "country",
              "email_address",
              "email_type",
              "emergency_first_name",
              "emergency_last_name",
              "emergency_phone",
              "event_waiver",
              "first_name",
              "gender",
              "pronoun",
              "homephone",
              "last_name",
              "middle_name",
              "postal_code",
              "prefix",
              "run_walk",
              "shirt_size",
              "state",
              "state",
              "suffix",
              "text_opt_in",
              "website"
            ],
            "example": "email_address",
            "nullable": true
          },
          "type": {
            "description": "Type of the Question",
            "type": "string",
            "enum": [
              "boolean",
              "integer",
              "currency",
              "enum",
              "text",
              "string",
              "date",
              "yes_no"
            ],
            "example": "boolean"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": true
          },
          "weight": {
            "description": "Weight of the Question, used for display order",
            "type": "integer",
            "example": "0"
          }
        },
        "type": "object"
      },
      "QuestionFillable": {
        "title": "QuestionFillable",
        "properties": {
          "enum_options": {
            "description": "Enum question options. Required for and exclusive to enum question type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionEnumOptionFillable"
            },
            "nullable": true
          },
          "is_required": {
            "description": "If the Question is required or not",
            "type": "boolean",
            "example": true
          },
          "label": {
            "description": "Question label",
            "type": "string",
            "example": "Do you require accommodations due to a medical condition or disability?"
          },
          "location": {
            "description": "Question location, must be valid for campaign type. donation_page supported by all, team_creation supported by reg_w_fund and p2p, page_creation supported by p2p, campaign_registration supported by p2p and ticketed.",
            "type": "string",
            "enum": [
              "donation_page",
              "team_creation",
              "page_creation",
              "campaign_registration"
            ],
            "example": "donation_page"
          },
          "product_id": {
            "description": "Identifier of associated product, such as ticket",
            "type": "integer",
            "example": "73647",
            "nullable": true
          },
          "tag": {
            "description": "Question tag, must be unique for location on a campaign",
            "type": "string",
            "enum": [
              "address",
              "address2",
              "address_type",
              "birthdate",
              "blog",
              "cellphone",
              "city",
              "company_name",
              "country",
              "email_address",
              "email_type",
              "emergency_first_name",
              "emergency_last_name",
              "emergency_phone",
              "event_waiver",
              "first_name",
              "gender",
              "pronoun",
              "homephone",
              "last_name",
              "middle_name",
              "postal_code",
              "prefix",
              "run_walk",
              "shirt_size",
              "state",
              "state",
              "suffix",
              "text_opt_in",
              "website"
            ],
            "example": "email_address",
            "nullable": true
          },
          "type": {
            "description": "Type of the Question",
            "type": "string",
            "enum": [
              "boolean",
              "integer",
              "currency",
              "enum",
              "text",
              "string",
              "date",
              "yes_no"
            ],
            "example": "boolean"
          },
          "weight": {
            "description": "Weight of the Question, used for display order",
            "type": "integer",
            "example": "0"
          }
        },
        "type": "object"
      },
      "QuestionSuccess": {
        "title": "QuestionSuccess",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of Campaign",
            "type": "integer",
            "example": 227362
          },
          "created_at": {
            "description": "Date/time of when record created",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z"
          },
          "deleted_at": {
            "description": "Date/time of when record deleted",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": true
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 45678
          },
          "is_deleted": {
            "description": "Question deleted or not",
            "type": "boolean",
            "example": false
          },
          "is_required": {
            "description": "If the Question is required or not",
            "type": "boolean",
            "example": true
          },
          "label": {
            "description": "Question label",
            "type": "string",
            "example": "Do you require accommodations due to a medical condition or disability?"
          },
          "location": {
            "description": "Question location",
            "type": "string",
            "enum": [
              "donation_page",
              "team_creation",
              "page_creation",
              "campaign_registration"
            ],
            "example": "donation_page"
          },
          "product_id": {
            "description": "Identifier of associated product, such as ticket",
            "type": "integer",
            "example": "73647",
            "nullable": true
          },
          "tag": {
            "description": "Question tag, unique for a location on a campaign",
            "type": "string",
            "enum": [
              "address",
              "address2",
              "address_type",
              "birthdate",
              "blog",
              "cellphone",
              "city",
              "company_name",
              "country",
              "email_address",
              "email_type",
              "emergency_first_name",
              "emergency_last_name",
              "emergency_phone",
              "event_waiver",
              "first_name",
              "gender",
              "pronoun",
              "homephone",
              "last_name",
              "middle_name",
              "postal_code",
              "prefix",
              "run_walk",
              "shirt_size",
              "state",
              "state",
              "suffix",
              "text_opt_in",
              "website"
            ],
            "example": "email_address",
            "nullable": true
          },
          "type": {
            "description": "Type of the Question",
            "type": "string",
            "enum": [
              "boolean",
              "integer",
              "currency",
              "enum",
              "text",
              "string",
              "date",
              "yes_no"
            ],
            "example": "boolean"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": true
          },
          "weight": {
            "description": "Weight of the Question, used for display order",
            "type": "integer",
            "example": "0"
          }
        },
        "type": "object"
      },
      "QuestionEnumOption": {
        "title": "QuestionEnumOption",
        "properties": {
          "label": {
            "description": "QuestionEnumOption label",
            "type": "string",
            "example": "Text label"
          },
          "question_id": {
            "description": "QuestionEnumOption Question ID",
            "type": "integer",
            "example": 45678
          }
        },
        "type": "object"
      },
      "QuestionEnumOptionFillable": {
        "title": "QuestionEnumOptionFillable",
        "properties": {
          "label": {
            "description": "QuestionEnumOption label",
            "type": "string",
            "example": "Text label"
          }
        },
        "type": "object"
      },
      "TicketTypeFillable": {
        "title": "TicketTypeFillable",
        "properties": {
          "commitment": {
            "description": "A Commitment defines an agreement by a Supporter to raise a specified amount, or meet a certain condition, within a specific timeframe when ticket having commitment is purchased.",
            "properties": {
              "deadline": {
                "description": "Deadline for Commitment agreement",
                "type": "string",
                "format": "date-time",
                "example": "2016-02-01T00:00:00+0000",
                "nullable": false
              },
              "value": {
                "description": "Commitment amount",
                "type": "number",
                "format": "double",
                "minimum": 1,
                "example": 100,
                "nullable": false
              }
            },
            "type": "object"
          },
          "description": {
            "description": "Description of Ticket Type",
            "type": "string",
            "maxLength": 900,
            "example": "Ticket Type description"
          },
          "ended_at": {
            "description": "Date when Ticket Type is no longer available",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "entries_per_ticket": {
            "description": "How many entries a Ticket of this type grants to a purchaser",
            "type": "integer",
            "minimum": 1,
            "example": 3,
            "nullable": false
          },
          "is_active": {
            "description": "Whether Ticket Type is available to purchase",
            "type": "boolean",
            "default": true,
            "example": true
          },
          "max_per_transaction": {
            "description": "The most Tickets of this type that be purchased in a single transaction",
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "nullable": false
          },
          "name": {
            "description": "The name of the TicketType",
            "type": "string",
            "maxLength": 100,
            "example": "General Admission",
            "nullable": false
          },
          "org_percent": {
            "description": "Use deductible_percent",
            "type": "number",
            "format": "double",
            "example": 100,
            "deprecated": true
          },
          "deductible_amount": {
            "description": "Amount of ticket price that is considered donation to campaign (May only specify deductible_percent OR deductible_amount)",
            "type": "number",
            "format": "double",
            "example": 5
          },
          "deductible_percent": {
            "description": "Percentage of ticket price that is considered donation to campaign (May only specify deductible_percent OR deductible_amount)",
            "type": "number",
            "format": "double",
            "example": 100
          },
          "price": {
            "description": "Price of a single Ticket of this type.",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "example": 10,
            "nullable": false
          },
          "quantity_available": {
            "description": "Quantity of Tickets available for purchase. Use 'null' for unlimited tickets.",
            "type": "integer",
            "default": null,
            "minimum": -1,
            "example": 2,
            "nullable": true
          },
          "started_at": {
            "description": "Date when Ticket Type can start being purchased",
            "type": "string",
            "format": "date-time",
            "example": "2016-01-01T12:00:00+0000",
            "nullable": false
          },
          "weight": {
            "description": "Display order",
            "type": "integer",
            "minimum": 0,
            "example": 1
          }
        },
        "type": "object"
      },
      "TicketType": {
        "title": "TicketType",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TicketTypeFillable"
          },
          {
            "properties": {
              "campaign_id": {
                "description": "The ID of the Campaign the Ticket Type belongs to",
                "type": "integer",
                "example": 227362,
                "nullable": false
              },
              "commitment_id": {
                "description": "The ID of the Commitment associated to the TicketType",
                "type": "integer",
                "default": null,
                "example": 98374,
                "deprecated": true
              },
              "created_at": {
                "description": "Timestamp from when TicketType was created",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000"
              },
              "id": {
                "description": "Primary identifier of record",
                "type": "integer",
                "example": 9978
              },
              "is_classy_mode": {
                "description": "Whether TicketType is fees on top.",
                "type": "boolean",
                "example": false,
                "deprecated": true
              },
              "min_per_transaction": {
                "description": "The min Tickets of this type that be purchased in a single transaction",
                "type": "integer",
                "example": 1
              },
              "quantity_reserved": {
                "description": "Quantity of Tickets that are reserved awaiting checkout/payment. Only available for FRS campaigns.",
                "type": "integer",
                "example": 1
              },
              "quantity_sold": {
                "description": "Quantity of Tickets that have been sold. Only available for FRS campaigns.",
                "type": "integer",
                "example": 1
              },
              "updated_at": {
                "description": "Date when Tickets of this type was last updated",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000"
              }
            },
            "type": "object"
          }
        ]
      },
      "FundraisingPageTransfer": {
        "title": "Fundraising Page Transfer",
        "properties": {
          "id": {
            "description": "Primary identifier of the Fundraising Page Transfer",
            "type": "integer",
            "example": "7483746",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "destination_campaign_id": {
            "description": "Primary identifier of destination Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "destination_fundraising_team_id": {
            "description": "Primary identifier of destination Fundraising Team",
            "type": "integer",
            "example": 209745,
            "nullable": false
          },
          "destination_member_id": {
            "description": "Primary identifier of destination Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "fundraising_page_id": {
            "description": "Primary identifier of Fundraising Page being transferred",
            "type": "integer",
            "example": 2173528,
            "nullable": false
          },
          "source_campaign_id": {
            "description": "Primary identifier of original Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "source_fundraising_team_id": {
            "description": "Primary identifier of original Fundraising Team",
            "type": "integer",
            "example": 209745,
            "nullable": false
          },
          "source_member_id": {
            "description": "Primary identifier of original Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "transferring_member_id": {
            "description": "Primary identifier of transferring Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          }
        },
        "type": "object"
      },
      "FundraisingPageTransferFillable": {
        "title": "FundraisingPageTransfer Fillable",
        "properties": {
          "destination_campaign_id": {
            "description": "Primary identifier of destination Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": true
          },
          "destination_fundraising_team_id": {
            "description": "Primary identifier of destination Fundraising Team",
            "type": "integer",
            "example": 209745,
            "nullable": true
          },
          "destination_member_id": {
            "description": "Primary identifier of destination Member",
            "type": "integer",
            "example": 2012,
            "nullable": true
          }
        },
        "type": "object"
      },
      "Asset": {
        "title": "Asset",
        "properties": {
          "cdn_url": {
            "description": "Resource URL",
            "type": "string",
            "example": "https://cdn.classy.org/PECVc2gPjYdF.jpg",
            "nullable": false
          },
          "content_type": {
            "description": "Type of content",
            "type": "string",
            "example": "image/jpeg",
            "nullable": false
          },
          "created_at": {
            "description": "A timestamp reflecting the creation time of the comment",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-31T22:49:18+0000"
          },
          "created_by": {
            "description": "ID of the member who uploaded the Asset",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 1145,
            "nullable": false
          },
          "parent_id": {
            "description": "Primary identifier of parent",
            "type": "integer",
            "example": 1145,
            "nullable": true
          },
          "size": {
            "description": "Image weight in Bytes",
            "type": "integer",
            "example": 278923,
            "nullable": false
          },
          "state": {
            "description": "State of the Asset",
            "type": "string",
            "enum": ["pending", "uploaded", "processed", "invalid"],
            "example": "processed",
            "nullable": false
          },
          "type": {
            "description": "Type",
            "type": "string",
            "example": "scaled_640_480"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "BlockProperties": {
        "title": "BlockProperties",
        "properties": {
          "type": {
            "description": "Type of Block",
            "type": "string",
            "enum": [
              "header",
              "crowdfunding",
              "thank-you",
              "activity",
              "footer",
              "about",
              "donation",
              "impact",
              "fundraisers",
              "fundraiser",
              "team",
              "text",
              "html",
              "registration",
              "custom",
              "location",
              "progress-circle",
              "global-css",
              "p2p"
            ],
            "example": "donation"
          },
          "background": {
            "description": "Background properties for the Block",
            "properties": {
              "blur": {
                "description": "Value for background blur",
                "type": "integer",
                "example": "0"
              },
              "color": {
                "description": "Value for background color",
                "type": "string",
                "example": "#052635"
              },
              "colorOpacity": {
                "description": "Value for background color opacity",
                "type": "integer",
                "example": "100"
              },
              "fixed": {
                "description": "Background should be fixed or not",
                "type": "boolean",
                "example": "true"
              },
              "imageOpacity": {
                "description": "Value of background opacity",
                "type": "integer",
                "example": "100"
              },
              "position": {
                "description": "Background position property",
                "type": "string",
                "enum": [
                  "left top",
                  "left center",
                  "left bottom",
                  "right top",
                  "right center",
                  "right bottom",
                  "center top",
                  "center center",
                  "center bottom"
                ],
                "example": "center center"
              },
              "preset": {
                "description": "Preset value for background",
                "type": "string",
                "enum": [
                  "stretch",
                  "coverfixed",
                  "center",
                  "tile",
                  "contain",
                  "adaptive"
                ],
                "example": "coverfixed"
              },
              "repeat": {
                "description": "Background should repeat or not",
                "type": "string",
                "enum": ["repeat", "no-repeat"],
                "example": "no-repeat"
              },
              "size": {
                "description": "Background size",
                "type": "string",
                "enum": ["cover", "contain", "auto", "initial", "inherit"],
                "example": "cover"
              },
              "image": {
                "description": "Background image",
                "properties": {
                  "__media": {
                    "description": "Media type",
                    "type": "string",
                    "example": "image"
                  },
                  "origin": {
                    "description": "Origin of image",
                    "type": "string",
                    "enum": ["upload", "static"],
                    "example": "upload"
                  },
                  "assetId": {
                    "description": "Asset ID",
                    "type": "integer",
                    "example": "1145"
                  },
                  "title": {
                    "description": "Title of image",
                    "type": "string",
                    "example": "Downloaded image"
                  },
                  "alt": {
                    "description": "Alt value for image",
                    "type": "string",
                    "example": "Downloaded image"
                  },
                  "width": {
                    "description": "Width of image in pixel",
                    "type": "integer",
                    "example": "1024"
                  },
                  "height": {
                    "description": "Height of image in pixel",
                    "type": "integer",
                    "example": "1024"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "title": {
            "description": "Title of Block",
            "type": "string",
            "example": "Block"
          },
          "headline": {
            "description": "Headline of Block",
            "type": "string",
            "example": "You're making a difference"
          },
          "description": {
            "description": "Description of Block",
            "type": "string",
            "example": "Description of block"
          },
          "donation_amount_appeal": {
            "description": "Donation amount appeal text",
            "type": "string",
            "example": "Donation amount appeal"
          },
          "recurring-level": {
            "description": "Types of recurring donation level",
            "type": "array",
            "items": {
              "properties": {
                "display_on_page": {
                  "description": "Should recurring level be displayed on donation page",
                  "type": "boolean",
                  "example": "true"
                },
                "name": {
                  "description": "Recurring level name",
                  "type": "string",
                  "enum": [
                    "One-time",
                    "Daily",
                    "Weekly",
                    "Bi-weekly (every 2 weeks)",
                    "Monthly",
                    "Quarterly (every 3 months)",
                    "Semi-annually (every 6 months)",
                    "Yearly (every 12 months)"
                  ],
                  "example": "One-time"
                },
                "type": {
                  "description": "Recurring level type",
                  "type": "string",
                  "enum": [
                    "one-time",
                    "daily",
                    "weekly",
                    "bi-weekly",
                    "monthly",
                    "quarterly",
                    "semi-annually",
                    "yearly"
                  ],
                  "example": "one-time"
                }
              },
              "type": "object"
            }
          },
          "recurring-default": {
            "description": "Recurring level default value",
            "type": "string",
            "example": "one-time"
          },
          "recurring-type": {
            "description": "Recurring type field",
            "type": "string",
            "enum": ["default", "disabled", "fixed", "forced"],
            "example": "default"
          },
          "donation-levels": {
            "description": "Donation amount fields on donation page",
            "type": "array",
            "items": {
              "properties": {
                "amount": {
                  "description": "Donation amount value",
                  "type": "integer",
                  "example": "1000"
                },
                "display_on_page": {
                  "description": "Donation amount value to be display on page",
                  "type": "boolean",
                  "example": true
                },
                "displayAmount": {
                  "description": "Donation amount display value",
                  "type": "string",
                  "example": "$1000"
                }
              },
              "type": "object"
            }
          },
          "donation-default": {
            "description": "Custom amount text box display on donation page",
            "type": "string",
            "example": "Custom"
          },
          "recurring-donation-default": {
            "description": "Custom recurring amount text box display",
            "type": "string",
            "example": "Custom"
          },
          "submit-button-text": {
            "description": "Submit button text",
            "type": "string",
            "example": "Give now!"
          },
          "billing_address_autocomplete": {
            "description": "Autocomplete Billing Address",
            "type": "boolean",
            "example": true
          },
          "unsortable": {
            "description": "Can block be sortable?",
            "type": "boolean",
            "example": true
          },
          "recurring_donation_experiment": {
            "description": "Enable/Disable recurring donation experiment",
            "type": "boolean",
            "example": true
          },
          "template": {
            "description": "Block should be display on",
            "type": "string",
            "enum": ["desktop", "tablet", "mobile-ls"],
            "example": "desktop"
          }
        },
        "type": "object"
      },
      "Block": {
        "title": "Block",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BlockProperties"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Block record",
                "type": "string",
                "example": "5ceeb33d6e201a648239a387",
                "nullable": false
              },
              "created_at": {
                "description": "Date/time of Block created",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "theme_id": {
                "description": "Theme ID",
                "type": "string",
                "example": "61bae173216e3e52be1f7863"
              },
              "updated_at": {
                "description": "Date/time of Block last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "Theme": {
        "title": "Theme",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Theme",
                "type": "string",
                "example": "5df32f6a7402874de6093201",
                "nullable": false
              },
              "created_at": {
                "description": "Date/time of initial Theme creation",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Theme last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/ThemeFillable"
          }
        ]
      },
      "ThemeFillable": {
        "title": "Theme Fillable",
        "properties": {
          "campaign_id": {
            "description": "Primary identifier of Campaign",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "styles": {
            "description": "Theme properties like style, pages, type, etc",
            "type": "object",
            "example": {
              "background": {
                "blur": 0,
                "color": "rgba(64, 72, 78, 1)",
                "colorOpacity": 100,
                "fixed": false
              }
            },
            "nullable": true
          }
        },
        "type": "object"
      },
      "Integration": {
        "title": "Integration",
        "properties": {
          "access_token": {
            "description": "Access token for the Integration",
            "type": "string",
            "maxLength": 512,
            "example": "AccessToken",
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "enabled": {
            "description": "Indicates whether the Integration is enabled",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "expiration": {
            "description": "Date/time of expiration, if the Integration can expire",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "refresh_token": {
            "description": "Refresh token for the Integration",
            "type": "string",
            "maxLength": 512,
            "example": "RefreshToken",
            "nullable": false
          },
          "type": {
            "description": "Integration type",
            "type": "string",
            "enum": ["salesforce", "ngo-connect", "npsp"],
            "example": "salesforce"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "url": {
            "description": "An Integration endpoint or webhook url",
            "type": "string",
            "example": "http://example.com/webhook"
          },
          "version": {
            "description": "Current version of the Integration",
            "type": "string",
            "example": "1.0.9"
          },
          "is_test": {
            "description": "Indicates whether the Integration is sandboxed",
            "type": "boolean",
            "example": true
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 8534,
            "nullable": false
          }
        },
        "type": "object"
      },
      "IntegrationFillable": {
        "title": "Integration Fillable",
        "properties": {
          "access_token": {
            "description": "Access token for the Integration",
            "type": "string",
            "maxLength": 512,
            "example": "AccessToken",
            "nullable": false
          },
          "enabled": {
            "description": "Indicates whether the Integration is enabled",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "expiration": {
            "description": "Date/time of expiration, if the Integration can expire",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z"
          },
          "refresh_token": {
            "description": "Refresh token for the Integration",
            "type": "string",
            "maxLength": 512,
            "example": "RefreshToken",
            "nullable": false
          },
          "url": {
            "description": "An Integration endpoint or webhook url",
            "type": "string",
            "example": "http://example.com/webhook"
          },
          "version": {
            "description": "Current version of the Integration",
            "type": "string",
            "example": "1.0.9"
          },
          "is_test": {
            "description": "Indicates whether the Integration is sandboxed",
            "type": "boolean",
            "example": true
          },
          "client_id": {
            "description": "Client ID for an org-specific credential",
            "type": "string",
            "example": "bf91c434-dcf3-3a4c-b49a-12e0944ef1e2"
          },
          "client_secret": {
            "description": "Client secret for an org-specific credential",
            "type": "string",
            "example": "8B6D1023F2805B734786744C90B6BF7B577831E137FB1B2D2E5E81AD36CF57AE"
          },
          "tenant_id": {
            "description": "Tenant ID for an org-specific credential",
            "type": "string",
            "example": "bf91c434-dcf3-3a4c-b49a-12e0944ef1e2"
          },
          "extensions": {
            "description": "Service Provider extension",
            "type": "array",
            "items": {
              "properties": {
                "description": {
                  "description": "Description of the extension",
                  "type": "string",
                  "example": "Classy for Nonprofit Cloud brings next generation integration ability to the Classy environment."
                },
                "key": {
                  "description": "Key of the extension (C4EDU, C4NPC)",
                  "type": "string",
                  "enum": ["C4EDU", "C4NPC"],
                  "example": "C4NPC"
                },
                "name": {
                  "description": "Name of the extension ",
                  "type": "string",
                  "example": "Classy for Salesforce Fundraising- NPC"
                },
                "resource_urn": {
                  "description": "Resource urn of the extension",
                  "type": "string",
                  "example": "service-provider.extension.1"
                },
                "url": {
                  "description": "Url of the extension",
                  "type": "string",
                  "example": "/packaging/installPackage.apexp?p0=04tKj000201SfZs"
                },
                "version": {
                  "description": "Version of the extension",
                  "type": "string",
                  "example": "0.0.1-4"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "PartnerApp": {
        "title": "Partner App",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 456,
            "nullable": true
          },
          "partner_app_name": {
            "description": "Integration or partner app associated with this app",
            "type": "string",
            "enum": ["mittun", "nuclavis", "omatic", "rally_corp"],
            "example": "nuclavis"
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364
          },
          "created_at": {
            "description": "Date/time of record creation",
            "type": "string",
            "format": "date-time",
            "example": "2024-04-23T10:25:03Z"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2024-04-23T10:25:03Z"
          },
          "last_contacted": {
            "description": "Date/time of last contacted",
            "type": "string",
            "format": "date-time",
            "example": "2024-04-23T10:25:03Z",
            "nullable": true
          },
          "is_active": {
            "description": "If the partner app is active or not",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object"
      },
      "PartnerAppFillable": {
        "title": "Partner App fillable",
        "properties": {
          "partner_app_name": {
            "description": "Integration or partner app associated with this app",
            "type": "string",
            "enum": ["mittun", "nuclavis", "omatic", "rally_corp"],
            "example": "nuclavis"
          },
          "last_contacted": {
            "description": "Date/time of last contacted",
            "type": "string",
            "format": "date-time",
            "example": "2024-04-23T10:25:03Z",
            "nullable": true
          },
          "is_active": {
            "description": "If the partner app is active or not",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object"
      },
      "ServiceProvider": {
        "title": "Service Provider",
        "properties": {
          "id": {
            "description": "Primary identifier of Service Provider",
            "type": "integer",
            "example": 2145,
            "nullable": false
          },
          "description": {
            "description": "Description of Service Provider",
            "type": "string",
            "example": "Classy for SalesForce",
            "nullable": false
          },
          "name": {
            "description": "Service Provider name",
            "type": "string",
            "example": "SalesForce"
          },
          "url": {
            "description": "Provider URL",
            "type": "string",
            "example": "/packaging/installPackage.apexp?p0=04tj0000001iC1B"
          },
          "version": {
            "description": "Version of Provider",
            "type": "string",
            "example": "6.6"
          }
        },
        "type": "object"
      },
      "ServiceProviderFillable": {
        "title": "Service Provider Fillable",
        "properties": {
          "description": {
            "description": "Description of Service Provider",
            "type": "string",
            "example": "Classy for SalesForce"
          },
          "name": {
            "description": "Service Provider name",
            "type": "string",
            "example": "SalesForce",
            "nullable": false
          },
          "url": {
            "description": "Provider URL",
            "type": "string",
            "example": "/packaging/installPackage.apexp?p0=04tj0000001iC1B"
          },
          "version": {
            "description": "Version of Provider",
            "type": "string",
            "example": "6.6"
          },
          "api_key": {
            "description": "Api key for Service Provider",
            "type": "string",
            "example": "testingkey123"
          },
          "secret": {
            "description": "Service Provider secret",
            "type": "string",
            "example": "secretkey"
          },
          "extensions": {
            "description": "Service Provider extension",
            "type": "array",
            "items": {
              "properties": {
                "description": {
                  "description": "Description of the extension",
                  "type": "string",
                  "example": "Classy for Nonprofit Cloud brings next generation integration ability to the Classy environment."
                },
                "key": {
                  "description": "Key of the extension (C4EDU, C4NPC)",
                  "type": "string",
                  "enum": ["C4EDU", "C4NPC"],
                  "example": "C4NPC"
                },
                "name": {
                  "description": "Name of the extension ",
                  "type": "string",
                  "example": "Classy for Salesforce Fundraising- NPC"
                },
                "resource_urn": {
                  "description": "Resource urn of the extension",
                  "type": "string",
                  "example": "service-provider.extension.1"
                },
                "url": {
                  "description": "Url of the extension",
                  "type": "string",
                  "example": "/packaging/installPackage.apexp?p0=04tKj000201SfZs"
                },
                "version": {
                  "description": "Version of the extension",
                  "type": "string",
                  "example": "0.0.1-4"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "Like": {
        "title": "Like",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 3397,
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "liker_name": {
            "description": "The full name of the Member who made the Like",
            "type": "string",
            "example": "John Doe"
          },
          "likeable_id": {
            "description": "Primary identifier of the Entity for which the Like was created",
            "type": "integer",
            "example": 876,
            "nullable": true
          },
          "likeable_type": {
            "description": "Type of the Entity for which the Like was created",
            "type": "string",
            "example": "feed_item",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "LikeStory": {
        "title": "Like (Story)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Like"
          },
          {
            "properties": {
              "likeable_id": {
                "type": "integer",
                "example": 736
              },
              "likeable_type": {
                "type": "string",
                "example": "story"
              }
            },
            "type": "object"
          }
        ]
      },
      "LikeUpdate": {
        "title": "Like (Update)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Like"
          },
          {
            "properties": {
              "likeable_id": {
                "type": "integer",
                "example": 72631
              },
              "likeable_type": {
                "type": "string",
                "example": "update"
              }
            },
            "type": "object"
          }
        ]
      },
      "LikeComment": {
        "title": "Like (Comment)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Like"
          },
          {
            "properties": {
              "likeable_id": {
                "type": "integer",
                "example": 47281
              },
              "likeable_type": {
                "type": "string",
                "example": "comment"
              }
            },
            "type": "object"
          }
        ]
      },
      "LikeFillable": {
        "title": "Like (Fillable)",
        "properties": {
          "member_id": {
            "description": "Primary identifier of associated Member",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "likeable_id": {
            "description": "Primary identifier of the Entity for which the Like was created",
            "type": "integer",
            "example": 876,
            "nullable": true
          },
          "likeable_type": {
            "description": "Type of the Entity for which the Like was created",
            "type": "string",
            "example": "feed_item",
            "nullable": true
          }
        },
        "type": "object"
      },
      "LikeFillableStory": {
        "title": "Like (Fillable Story)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LikeFillable"
          },
          {
            "properties": {
              "likeable_id": {
                "type": "integer",
                "example": 736
              },
              "likeable_type": {
                "type": "string",
                "example": "story"
              }
            },
            "type": "object"
          }
        ]
      },
      "LikeFillableUpdate": {
        "title": "Like (Fillable Update)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LikeFillable"
          },
          {
            "properties": {
              "likeable_id": {
                "type": "integer",
                "example": 72631
              },
              "likeable_type": {
                "type": "string",
                "example": "update"
              }
            },
            "type": "object"
          }
        ]
      },
      "LikeFillableComment": {
        "title": "Like (Fillable Comment)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LikeFillable"
          },
          {
            "properties": {
              "likeable_id": {
                "type": "integer",
                "example": 47281
              },
              "likeable_type": {
                "type": "string",
                "example": "comment"
              }
            },
            "type": "object"
          }
        ]
      },
      "MagicLinkRequestBody": {
        "title": "MagicLinkRequestBody",
        "properties": {
          "email": {
            "description": "Email",
            "type": "string",
            "example": "hello@classy.org"
          },
          "email_link": {
            "description": "Magic Link",
            "type": "string",
            "example": "https:://example.org/magic-link?token=4abd4def-af73-4036-9829-1d79aa248fe5"
          },
          "sent_at": {
            "description": "Date and time at which magic link is sent",
            "type": "string",
            "example": "2023-11-29 07:18:37"
          },
          "expires_at": {
            "description": "Expiration date and time of magic link",
            "type": "string",
            "example": "2023-11-29 07:18:37"
          },
          "requested_from": {
            "description": "Name of the service",
            "type": "string",
            "example": "2023-11-29 07:18:37"
          },
          "is_expired": {
            "description": "Expiration flag for the magic link",
            "type": "string",
            "example": "2023-11-29 07:18:37"
          },
          "use_count": {
            "description": "Magic link usage count",
            "type": "string",
            "example": "2023-11-29 07:18:37"
          }
        },
        "type": "object"
      },
      "MagicLink": {
        "title": "Magic Link",
        "properties": {
          "id": {
            "description": "ID of magic link",
            "type": "integer",
            "example": 1,
            "nullable": false
          },
          "code": {
            "description": "Code of magic link",
            "type": "string",
            "example": "4abd4def-af73-4036-9829-1d79aa248fe5",
            "nullable": false
          },
          "expires_at": {
            "description": "Expiration date and time for magic link",
            "type": "string",
            "example": "2025-01-01 01:59:59",
            "nullable": false
          },
          "created_at": {
            "description": "Creation date and time of magic link",
            "type": "string",
            "example": "2025-01-01 00:00:00",
            "nullable": true
          },
          "updated_at": {
            "description": "Updation date and time of magic link",
            "type": "string",
            "example": "2025-01-01 01:59:59",
            "nullable": true
          },
          "email": {
            "description": "Magic link receivers email address",
            "type": "string",
            "example": "hello@classy.com",
            "nullable": true
          },
          "requested_from": {
            "description": "Service name which is used to create magic link",
            "type": "string",
            "example": "dev-sso",
            "nullable": true
          },
          "is_expired": {
            "description": "Expiration flag for the magic link",
            "type": "boolean",
            "example": 1,
            "nullable": true
          },
          "use_count": {
            "description": "Count of magic link used by user",
            "type": "integer",
            "example": 1,
            "nullable": true
          },
          "email_link": {
            "description": "Link which is sent to the user",
            "type": "string",
            "example": 1,
            "nullable": true
          },
          "sent_at": {
            "description": "Date and time of the magic link when it was sent to the user",
            "type": "string",
            "example": "2024-01-01 00:00:00",
            "nullable": true
          }
        },
        "type": "object"
      },
      "MagicLinkContextRequestBody": {
        "title": "MagicLinkContextRequestBody",
        "properties": {
          "code": {
            "description": "Magic link code",
            "type": "string",
            "example": "hello@classy.org"
          },
          "created_by": {
            "description": "Member ID of the user who created the magic link",
            "type": "string",
            "example": "2012"
          },
          "member_id": {
            "description": "Member ID of the user for which the magic link is created",
            "type": "string",
            "example": "2012"
          },
          "metadata": {
            "description": "Additional data for magic link",
            "type": "string",
            "example": "{\n *                  'organization_id' : 82364\n *              }"
          },
          "redirect_uri": {
            "description": "URL where user should redirect after successful login",
            "type": "string",
            "example": "2023-11-29 07:18:37"
          },
          "remember_me": {
            "description": "Remember me",
            "type": "string",
            "example": "1"
          }
        },
        "type": "object"
      },
      "MagicLinkContext": {
        "title": "Magic link context",
        "properties": {
          "id": {
            "description": "ID of magic link context",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "code": {
            "description": "Code of magic link",
            "type": "integer",
            "example": "4abd4def-af73-1234-4321-1d79aa248fe5",
            "nullable": false
          },
          "created_by": {
            "description": "ID of member who created the magic link",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "member_id": {
            "description": "ID of member for which the magic link is created",
            "type": "string",
            "example": 2012,
            "nullable": false
          },
          "redirect_uri": {
            "description": "Service name which requested to create magic link",
            "type": "string",
            "example": "https://www.google.com",
            "nullable": true
          },
          "created_at": {
            "description": "Creation date and time for magic link context",
            "type": "string",
            "example": "2025-01-01 01:59:59",
            "nullable": true
          },
          "updated_at": {
            "description": "Updation date and time for the magic link context",
            "type": "integer",
            "example": "2025-01-01 01:59:59",
            "nullable": true
          },
          "remember_me": {
            "description": "Remember me flag when the user is logged in via magic link",
            "type": "boolean",
            "example": 1,
            "nullable": true
          },
          "metadata": {
            "description": "Addition data for magic link",
            "type": "string",
            "example": "{\n *                  'organization_id' : 82364\n *              }",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Post": {
        "title": "Post",
        "properties": {
          "body": {
            "description": "Main content of Post",
            "type": "string",
            "nullable": false
          },
          "comments_count": {
            "description": "Cached count of the number of Comments made in response to Post",
            "type": "integer",
            "example": 3,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "latest_comments": {
            "description": "Array of latest Comments made in response to Post (limit 3 items)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": false
          },
          "likes_count": {
            "description": "Cached count of the number of Likes that Post has received",
            "type": "integer",
            "example": 14,
            "nullable": false
          },
          "member_id": {
            "description": "Primary identifier of Member who created Post (i.e. the poster)",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "postable_id": {
            "description": "Primary identifier of Fundraising Entity for which the Post was made",
            "type": "integer",
            "nullable": false
          },
          "postable_type": {
            "description": "String describing type of Fundraising Entity for which the Post was made",
            "type": "string",
            "nullable": false
          },
          "poster_name": {
            "description": "Full name of Post's creator",
            "type": "string",
            "example": "Buster McTest",
            "nullable": true
          },
          "shares_count": {
            "description": "Cached count of the number of times Post has been shared",
            "type": "integer",
            "example": 8,
            "nullable": false
          },
          "status": {
            "description": "Indication whether Post is a draft or has been published",
            "type": "string",
            "enum": ["draft", "published"],
            "example": "published",
            "nullable": false
          },
          "title": {
            "description": "Title of Post",
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "views_count": {
            "description": "Cached count of the number of times Post has been viewed",
            "type": "integer",
            "example": 46,
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignPost": {
        "title": "Post (Campaign)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 2012,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "campaign",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "FundraisingPagePost": {
        "title": "Post (Fundraising Page)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 2173528,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "fundraising_page",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "FundraisingTeamPost": {
        "title": "Post (Fundraising Team)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 209745,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "fundraising_team",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "Story": {
        "title": "Story",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "properties": {
              "body": {
                "description": "Main content of Story",
                "type": "string",
                "example": "The main reason that I am raising funds for this organization is to...",
                "nullable": false
              },
              "id": {
                "description": "Primary identifier of record",
                "type": "integer",
                "example": 72552,
                "nullable": false
              },
              "latest_comments": {
                "description": "Array of latest Comments made in response to Story (limit 3 items)",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StoryComment"
                },
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "CampaignStory": {
        "title": "Story (Campaign)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Story"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 2012,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "campaign",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "FundraisingPageStory": {
        "title": "Story (Fundraising Page)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Story"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 2173528,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "fundraising_page",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "FundraisingTeamStory": {
        "title": "Story (Fundraising Team)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Story"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 209745,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "fundraising_team",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "Update": {
        "title": "Update",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "properties": {
              "asset_id": {
                "description": "ID of associated Asset",
                "type": "integer",
                "example": null,
                "nullable": true
              },
              "asset_url": {
                "description": "CDN URL of associated Asset",
                "type": "string",
                "example": null,
                "nullable": true
              },
              "body": {
                "description": "Main content of Update",
                "type": "string",
                "example": "Thank you everyone for the progress we've made so far! We have five days until...",
                "nullable": false
              },
              "id": {
                "description": "Primary identifier of record",
                "type": "integer",
                "example": 72631,
                "nullable": false
              },
              "latest_comments": {
                "description": "Array of latest Comments made in response to Update (limit 3 items)",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateComment"
                },
                "nullable": false
              },
              "visibility": {
                "description": "Visibility of Update (private updates can only be seen by the Member associated with record)",
                "type": "string",
                "enum": ["private", "public"],
                "example": "public",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "CampaignUpdate": {
        "title": "Update (Campaign)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Update"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 2012,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "campaign",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "FundraisingPageUpdate": {
        "title": "Update (Fundraising Page)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Update"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 2173528,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "fundraising_page",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "FundraisingTeamUpdate": {
        "title": "Update (Fundraising Team)",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Update"
          },
          {
            "properties": {
              "postable_id": {
                "description": "Primary identifier of Fundraising Entity for which the Post was made",
                "type": "integer",
                "example": 209745,
                "nullable": false
              },
              "postable_type": {
                "description": "String describing type of Fundraising Entity for which the Post was made",
                "type": "string",
                "example": "fundraising_team",
                "nullable": false
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/FundraisingTeamPost"
          }
        ]
      },
      "PromoCode": {
        "title": "Promo Code",
        "properties": {
          "adjustment_amount": {
            "description": "Value to configure price adjustment when applied against an Item. Can reflect either a percentage or flat amount based on associated adjustment_type",
            "type": "integer",
            "example": 10,
            "nullable": false
          },
          "adjustment_type": {
            "description": "Specification of how adjustment_amount is applied",
            "type": "string",
            "enum": ["percentage", "amount"],
            "example": "percentage",
            "nullable": false
          },
          "applications_count": {
            "description": "Count of the number of times the promo code has been applied to Items still in a Cart or successfully transacted against",
            "type": "integer",
            "example": 22
          },
          "code": {
            "description": "Value of the Promo Code to entered on checkout",
            "type": "string",
            "maxLength": 25,
            "example": "TENPERCENTOFF",
            "nullable": false
          },
          "ends_at": {
            "description": "Date/time when the Promo Code can no longer be applied to purchases",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 8273,
            "nullable": false
          },
          "is_active": {
            "description": "Indicates whether Promo Code is active or not regardless of availability or date range",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "is_general": {
            "description": "Indicates whether Promo Code has a general designation, meaning it applies to all TicketTypes for its Campaign",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "quantity": {
            "description": "Total number of Items against which the Promo Code can be applied (null implies unlimited applications)",
            "type": "integer",
            "example": 100
          },
          "starts_at": {
            "description": "Date/time when record can start being applied to purchase",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "PromoCodeFillable": {
        "title": "Promo Code Fillable",
        "properties": {
          "adjustment_amount": {
            "description": "Value to configure price adjustment when applied against an item. Can reflect either a percentage or flat amount based on associated adjustment_type",
            "type": "integer",
            "example": 10,
            "nullable": false
          },
          "adjustment_type": {
            "description": "Specification of how adjustment_amount is applied",
            "type": "string",
            "enum": ["percentage", "amount"],
            "example": "percentage",
            "nullable": false
          },
          "code": {
            "description": "Value of the Promo Code to entered on checkout",
            "type": "string",
            "maxLength": 25,
            "example": "TENPERCENTOFF",
            "nullable": false
          },
          "ends_at": {
            "description": "Date/time when the Promo Code can no longer be applied to purchases",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "is_active": {
            "description": "Indicates whether Promo Code is active or not regardless of availability or date range",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "is_general": {
            "description": "Indicates whether Promo Code has a general designation, meaning it applies to all TicketTypes for its Campaign",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "quantity": {
            "description": "Total number of items against which the Promo Code can be applied (null implies unlimited applications)",
            "type": "integer",
            "example": 100
          },
          "starts_at": {
            "description": "Date/time when record can start being applied to purchase",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "PromoCodeConfiguration": {
        "title": "Promo Code Configuration",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 6054,
            "nullable": false
          },
          "promo_code_id": {
            "description": "Primary identifier of associated Promo Code",
            "type": "integer",
            "example": 8273,
            "nullable": false
          },
          "ticket_type_id": {
            "description": "Primary identifier of associated Ticket Type",
            "type": "integer",
            "example": 9978,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "PromoCodeConfigurationFillable": {
        "title": "Promo Code Configuration Fillable",
        "properties": {
          "promo_code_id": {
            "description": "Primary identifier of associated Promo Code",
            "type": "integer",
            "example": 8273,
            "nullable": false
          },
          "ticket_type_id": {
            "description": "Primary identifier of associated Ticket Type",
            "type": "integer",
            "example": 9978,
            "nullable": false
          }
        },
        "type": "object"
      },
      "Registration": {
        "title": "Registration",
        "properties": {
          "address1": {
            "description": "Line one of Registration address",
            "type": "string",
            "example": "8554 Capricorn Way",
            "nullable": true
          },
          "address2": {
            "description": "Line two of Registration address",
            "type": "string",
            "example": "N/A",
            "nullable": true
          },
          "attendee_id": {
            "description": "Unique ID for Attendee for an organization",
            "type": "integer",
            "example": 248911,
            "nullable": true
          },
          "blog": {
            "description": "Registration blog field",
            "type": "string",
            "example": "blog.test.com",
            "nullable": true
          },
          "campaign_id": {
            "description": "ID of Campaign registered for",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "cell": {
            "description": "Phone Cell number",
            "type": "string",
            "pattern": "^\\d{3}-\\d{3}-\\d{4}$",
            "example": "619-322-5056"
          },
          "city": {
            "description": "City field of Registration",
            "type": "string",
            "example": "San Diego"
          },
          "commitment_id": {
            "description": "Minimum fundraising goal ID",
            "type": "integer",
            "example": 98374
          },
          "company": {
            "description": "Name of the company",
            "type": "string",
            "example": "PayPal"
          },
          "country": {
            "description": "Country field of Registration",
            "type": "string",
            "example": "US"
          },
          "created_at": {
            "description": "Date/time of last record created",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z"
          },
          "date_of_birth": {
            "description": "Date/time of birth of who is registering",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z"
          },
          "email": {
            "description": "Email address of who is registering",
            "type": "string",
            "example": "test@classy.org"
          },
          "first_name": {
            "description": "First name of who is registering",
            "type": "string",
            "example": "Kevin"
          },
          "fundraising_page_id": {
            "description": "Identifier of the fundraising page",
            "type": "integer",
            "example": 2173528
          },
          "gender": {
            "description": "First letter of the gender",
            "type": "string",
            "example": "m"
          },
          "id": {
            "description": "Primary identifier of the Registration",
            "type": "integer",
            "example": 78345
          },
          "last_name": {
            "description": "Last name of who is registering",
            "type": "string",
            "example": "Cheek"
          },
          "member_id": {
            "description": "Member identifier",
            "type": "integer",
            "example": 2012
          },
          "phone": {
            "description": "Phone of who is registering",
            "type": "string",
            "example": "619-322-5056"
          },
          "postal_code": {
            "description": "Postal code of who is registering",
            "type": "string",
            "example": "92126"
          },
          "product_name": {
            "description": "Name of the product",
            "type": "string",
            "example": "General Admission"
          },
          "state": {
            "description": "State field of Registration",
            "type": "string",
            "example": "LA"
          },
          "status": {
            "description": "Attending status",
            "type": "string",
            "enum": ["attending", "not_attending", "archived"],
            "example": "attending"
          },
          "supporter_id": {
            "description": "Identifier of Supporter",
            "type": "integer",
            "example": 53
          },
          "transaction_id": {
            "description": "Identifier of Transaction",
            "type": "integer",
            "example": 62376
          },
          "transaction_item_id": {
            "description": "Identifier of the Item of the transaction",
            "type": "integer",
            "example": 17020
          },
          "transaction_last_four": {
            "description": "Card last four incase of a CC payment while registration",
            "type": "integer",
            "example": 1111
          },
          "transaction_payment_type": {
            "description": "Type of payment used in the transaction",
            "type": "string",
            "example": "Credit Card"
          },
          "tshirt_size": {
            "description": "Size of tshirt",
            "type": "string",
            "example": "ML"
          },
          "updated_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "website": {
            "description": "Website of registrant",
            "type": "string",
            "example": "https://classy.org"
          }
        },
        "type": "object"
      },
      "RegistrationFillable": {
        "title": "RegistrationFillable",
        "properties": {
          "first_name": {
            "description": "First name of who is registering",
            "type": "string",
            "example": "Kevin"
          },
          "last_name": {
            "description": "Last name of who is registering",
            "type": "string",
            "example": "Cheek"
          },
          "email": {
            "description": "Email address of who is registering",
            "type": "string",
            "example": "test@classy.org"
          },
          "phone": {
            "description": "Phone of who is registering",
            "type": "string",
            "example": "619-322-5056"
          },
          "cell": {
            "description": "Phone Cell number",
            "type": "string",
            "pattern": "^\\d{3}-\\d{3}-\\d{4}$",
            "example": "619-322-5056"
          },
          "address1": {
            "description": "First address of Registration",
            "type": "string",
            "example": "8554 Capricorn Way",
            "nullable": true
          },
          "address2": {
            "description": "Second address of Registration",
            "type": "string",
            "example": "N/A",
            "nullable": true
          },
          "city": {
            "description": "City field of Registration",
            "type": "string",
            "example": "San Diego"
          },
          "state": {
            "description": "State field of Registration",
            "type": "string",
            "example": "LA"
          },
          "status": {
            "description": "Attending status",
            "type": "string",
            "enum": ["attending", "not_attending", "archived"],
            "example": "attending"
          },
          "postal_code": {
            "description": "Postal code of who is registering",
            "type": "string",
            "example": "92126"
          },
          "country": {
            "description": "Country field of Registration",
            "type": "string",
            "example": "US"
          },
          "company": {
            "description": "Name of the company",
            "type": "string",
            "example": "PayPal"
          },
          "website": {
            "description": "Website of registrant",
            "type": "string",
            "example": "https://classy.org"
          },
          "blog": {
            "description": "Blog of registrant",
            "type": "string",
            "example": "https://classy.org"
          },
          "gender": {
            "description": "First letter of the gender",
            "type": "string",
            "example": "m"
          },
          "date_of_birth": {
            "description": "Date/time of birth of who is registering",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z"
          },
          "tshirt_size": {
            "description": "Size of tshirt",
            "type": "string",
            "example": "ML"
          }
        },
        "type": "object"
      },
      "Role": {
        "title": "Role",
        "description": "Class RoleTemplate",
        "properties": {},
        "type": "object"
      },
      "ZuoraContact": {
        "title": "Zuora Contact",
        "properties": {
          "Address1": {
            "description": "First line of address",
            "type": "string",
            "maxLength": 255,
            "example": "1234 Main Street",
            "nullable": false
          },
          "Address2": {
            "description": "Second line of address",
            "type": "string",
            "maxLength": 255,
            "example": "Suite 1300",
            "nullable": true
          },
          "City": {
            "description": "City name",
            "type": "string",
            "maxLength": 40,
            "example": "San Diego",
            "nullable": false
          },
          "Country": {
            "description": "Country name",
            "type": "string",
            "example": "United Stated",
            "nullable": false
          },
          "FirstName": {
            "description": "First name",
            "type": "string",
            "maxLength": 100,
            "example": "John",
            "nullable": false
          },
          "LastName": {
            "description": "Last name",
            "type": "string",
            "maxLength": 100,
            "example": "Doe",
            "nullable": false
          },
          "PostalCode": {
            "description": "Postal Code",
            "type": "string",
            "maxLength": 20,
            "example": "92101",
            "nullable": false
          },
          "State": {
            "description": "State name",
            "type": "string",
            "example": "California",
            "nullable": false
          },
          "WorkPhone": {
            "description": "Phone number",
            "type": "string",
            "maxLength": 40,
            "example": "5551234567",
            "nullable": false
          },
          "WorkEmail": {
            "description": "Email address",
            "type": "string",
            "maxLength": 80,
            "example": "classy@classy.org",
            "nullable": false
          }
        },
        "type": "object"
      },
      "ZuoraReportFilter": {
        "title": "Zuora Report Filter",
        "properties": {
          "filters": {
            "description": "Array of Filters. Can be any valid json",
            "type": "array",
            "items": {
              "properties": {
                "key": {
                  "description": "",
                  "type": "string",
                  "example": "rf"
                },
                "data": {
                  "properties": {
                    "filters": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "field": {
                            "description": "Name of the field",
                            "type": "string",
                            "example": "campaign-name"
                          },
                          "operator": {
                            "description": "",
                            "type": "string",
                            "example": "ne"
                          },
                          "input": {
                            "description": "",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "18378"
                            }
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "ZuoraReportSort": {
        "title": "Zuora Report Sort",
        "properties": {
          "field": {
            "description": "Field to be sorted by",
            "type": "string",
            "example": "id"
          },
          "order": {
            "description": "How to sort the records",
            "type": "string",
            "example": "DESC"
          }
        },
        "type": "object"
      },
      "SavedReportFillable": {
        "title": "Saved Report Fillable",
        "properties": {
          "name": {
            "description": "Name of report",
            "type": "string",
            "maxLength": 255,
            "example": "zuora-invoice",
            "nullable": false
          },
          "filters": {
            "description": "Array of Filters. Can be any valid json",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZuoraReportFilter"
            }
          },
          "sort": {
            "description": "Sort array. Should be an associative array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZuoraReportSort"
            }
          },
          "columns": {
            "description": "Columns array. Should just be an array of strings",
            "type": "array",
            "items": {
              "type": "string",
              "example": "id,billing_email_address,supporter-name,status,frequency,normalized_total_gross_amount,created_date,campaign-name"
            }
          },
          "type": {
            "description": "Type of report.",
            "type": "string",
            "enum": ["zuora", "custom", "recent"],
            "example": "zuora",
            "nullable": false
          },
          "resource": {
            "description": "Resource type of report",
            "type": "string",
            "enum": [
              "transaction",
              "attendee",
              "campaign",
              "page",
              "recurring",
              "supporter",
              "team",
              "orderItem"
            ],
            "example": "transaction",
            "nullable": false
          }
        },
        "type": "object"
      },
      "SavedReport": {
        "title": "Saved Report",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SavedReportFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Saved Report",
                "type": "integer",
                "example": 1736,
                "nullable": false
              },
              "member_id": {
                "description": "ID of associated Member",
                "type": "integer",
                "example": 2012
              },
              "organization_id": {
                "description": "ID of associated Organization",
                "type": "integer",
                "example": 82364,
                "nullable": false
              },
              "created_at": {
                "description": "Date/Time report was created",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/Time report was last updated",
                "type": "string",
                "format": "date-time",
                "example": "2016-01-01T12:00:00+0000",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "SourceTrackingCodeFillable": {
        "title": "Source Tracking Code Fillable",
        "properties": {
          "c_src": {
            "description": "Primary Source Tracking Code. Either c_src or c_src2 is required.",
            "type": "string",
            "example": "Code123"
          },
          "c_src2": {
            "description": "Secondary Source Tracking Code",
            "type": "string",
            "example": "Code123"
          },
          "referrer": {
            "description": "Name of referrer for Source Tracking Code",
            "type": "string",
            "maxLength": 2047,
            "example": "www.classy.org",
            "nullable": true
          },
          "event_type": {
            "description": "Event type for Source Tracking Code",
            "type": "string",
            "maxLength": 255,
            "example": "landing_page.hit",
            "nullable": false
          }
        },
        "type": "object"
      },
      "SourceTrackingCode": {
        "title": "Source Tracking Code",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceTrackingCodeFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Source Tracking Code",
                "type": "integer",
                "example": 9597,
                "nullable": false
              },
              "trackable_id": {
                "description": "Primary identifier of associated trackable resource. This is required with trackable_type. Resource can be either Fundraising Page, Fundraising Team or Transaction.",
                "type": "integer",
                "example": 8734,
                "nullable": true
              },
              "trackable_type": {
                "description": "The type of Resource. This is required with trackable_id",
                "type": "string",
                "enum": ["fundraising_page", "fundraising_team", "transaction"],
                "example": "transaction",
                "nullable": true
              },
              "created_at": {
                "description": "Date/time of initial Source Tracking Code creation",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Source Tracking Code last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "BatchSourceTrackingCode": {
        "title": "Batch Source Tracking Code ",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "source_tracking_code": {
                "$ref": "#/components/schemas/SourceTrackingCodeFillable"
              },
              "entities": {
                "type": "array",
                "items": {
                  "properties": {
                    "id": {
                      "description": "Primary identifier of associated resource",
                      "type": "integer",
                      "example": 8734
                    },
                    "type": {
                      "description": "The type of Resource.",
                      "type": "string",
                      "enum": [
                        "fundraising_page",
                        "fundraising_team",
                        "transaction"
                      ],
                      "example": "transaction"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "SourceTrackingCodeWithoutTrackable": {
        "title": "Source Tracking Code Without Teackable Resource",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceTrackingCodeFillable"
          },
          {
            "properties": {
              "id": {
                "description": "Primary identifier of Source Tracking Code",
                "type": "integer",
                "example": 9597,
                "nullable": false
              },
              "trackable_id": {
                "description": "Primary identifier of associated trackable resource. This is required with trackable_type. Resource can be either Fundraising Page, Fundraising Team or Transaction.",
                "type": "integer",
                "example": null,
                "nullable": true
              },
              "trackable_type": {
                "description": "The type of Resource. This is required with trackable_id",
                "type": "string",
                "enum": ["fundraising_page", "fundraising_team", "transaction"],
                "example": null,
                "nullable": true
              },
              "created_at": {
                "description": "Date/time of initial Source Tracking Code creation",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              },
              "updated_at": {
                "description": "Date/time of Source Tracking Code last updated",
                "type": "string",
                "format": "date-time",
                "example": "2019-04-23T10:25:03Z",
                "nullable": false
              }
            },
            "type": "object"
          }
        ]
      },
      "Supporter": {
        "title": "Supporter",
        "properties": {
          "address1": {
            "description": "Supporter main address",
            "type": "string",
            "example": "300 N Washington St",
            "nullable": true
          },
          "address2": {
            "description": "Secondary Supporter address",
            "type": "string",
            "example": "300 N Washington St",
            "nullable": true
          },
          "city": {
            "description": "Supporter City",
            "type": "string",
            "example": "Gettysburg",
            "nullable": true
          },
          "country": {
            "description": "Supporter Country",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "email_address": {
            "description": "Supporter email address",
            "type": "string",
            "format": "email",
            "example": "test@classy.org"
          },
          "first_name": {
            "description": "First name of the supporter",
            "type": "string",
            "example": "Hannah",
            "nullable": true
          },
          "gender": {
            "description": "Support gender",
            "type": "string",
            "pattern": "/^[M,F,m,f]$/",
            "example": "M",
            "nullable": true
          },
          "id": {
            "description": "Supporter number identifier",
            "type": "integer",
            "example": "5827"
          },
          "last_emailed_at": {
            "description": "To whom the last e-mail was sent",
            "type": "string",
            "format": "email",
            "example": "test@classy.org",
            "nullable": true
          },
          "last_name": {
            "description": "Supporter last name",
            "type": "string",
            "example": "Rosendo",
            "nullable": true
          },
          "location": {
            "description": "Free text representing a location",
            "type": "string",
            "example": "City Townhall",
            "nullable": true
          },
          "member_id": {
            "description": "Member number identifier",
            "type": "integer",
            "example": "2012"
          },
          "metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "description": "Arbitrary JSON metadata"
          },
          "nickname": {
            "description": "Supporter nickname",
            "type": "string",
            "example": "Classy",
            "nullable": true
          },
          "opt_in": {
            "description": "Indicates whether the supported opted in to communication or not",
            "type": "boolean",
            "example": true
          },
          "origin": {
            "description": "Supporter origin",
            "type": "string",
            "example": "donation"
          },
          "phone": {
            "description": "Supporter phone number",
            "type": "string",
            "example": "619-555-1212",
            "nullable": true
          },
          "postal_code": {
            "description": "Zip Code",
            "type": "string",
            "example": "92101",
            "nullable": true
          },
          "source_campaign_id": {
            "description": "Campaign number identifier",
            "type": "integer",
            "example": 227362,
            "nullable": true
          },
          "source_fundraising_page_id": {
            "description": "Fundraising page identifier",
            "type": "integer",
            "example": "2173528",
            "nullable": true
          },
          "source_member_id": {
            "description": "Member identifier",
            "type": "integer",
            "example": 2012,
            "nullable": true
          },
          "source_organization_id": {
            "description": "Organization identifier",
            "type": "integer",
            "example": "82364",
            "nullable": true
          },
          "state": {
            "description": "State/province name",
            "type": "string",
            "example": "NE",
            "nullable": true
          },
          "updated_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "SupporterFillable": {
        "title": "Supporter Fillable",
        "properties": {
          "address1": {
            "description": "Supporter main address",
            "type": "string",
            "maxLength": 512,
            "example": "300 N Washington St",
            "nullable": true
          },
          "address2": {
            "description": "Secondary Supporter address",
            "type": "string",
            "maxLength": 45,
            "example": "300 N Washington St",
            "nullable": true
          },
          "city": {
            "description": "Supporter City",
            "type": "string",
            "maxLength": 45,
            "example": "Gettysburg",
            "nullable": true
          },
          "country": {
            "description": "Supporter Country",
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "US",
            "nullable": true
          },
          "email_address": {
            "description": "Supporter email address",
            "type": "string",
            "format": "email",
            "example": "test@classy.org",
            "nullable": true
          },
          "first_name": {
            "description": "First name of the supporter",
            "type": "string",
            "maxLength": 32,
            "example": "Hannah",
            "nullable": true
          },
          "gender": {
            "description": "Support gender",
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "pattern": "/^[M,F,m,f]$/",
            "example": "M",
            "nullable": true
          },
          "last_name": {
            "description": "Supporter last name",
            "type": "string",
            "maxLength": 32,
            "example": "Rosendo",
            "nullable": true
          },
          "location": {
            "description": "Free text representing a location",
            "type": "string",
            "maxLength": 45,
            "example": "City Townhall",
            "nullable": true
          },
          "metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Metadata"
              }
            ],
            "nullable": true,
            "description": "Arbitrary JSON metadata"
          },
          "nickname": {
            "description": "Supporter nickname",
            "type": "string",
            "maxLength": 32,
            "example": "Classy",
            "nullable": true
          },
          "phone": {
            "description": "Supporter phone number",
            "type": "string",
            "maxLength": 16,
            "example": "619-555-1212",
            "nullable": true
          },
          "postal_code": {
            "description": "Zip Code",
            "type": "string",
            "maxLength": 50,
            "example": 92101,
            "nullable": true
          },
          "state": {
            "description": "State/province name",
            "type": "string",
            "maxLength": 100,
            "example": "NE",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Tag": {
        "title": "Tag",
        "description": "A Tag is a representation of metadata that can be associated with one or more entities. They can be\n *     used for multiple reasons, including flagging specific Campaigns or Organizations for feature testing.",
        "properties": {
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 189,
            "nullable": false
          },
          "name": {
            "description": "Name of Tag",
            "type": "string",
            "example": "feature-001",
            "nullable": true
          }
        },
        "type": "object"
      },
      "EntityTaskflows": {
        "title": "Entity Task flows",
        "properties": {
          "created_at": {
            "description": "Timestamp of initial creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-20T08:23:21Z"
          },
          "entity_id": {
            "description": "Entity ID/Fundraising Page ID",
            "type": "integer",
            "example": "900549"
          },
          "entity_type": {
            "description": "Type of the entity",
            "type": "string",
            "example": "Fundraising Page"
          },
          "id": {
            "description": "Entity ID",
            "type": "integer",
            "example": "1"
          },
          "fundraising_task_flow_id": {
            "description": "Represents id from fundraising_task_flows",
            "type": "integer",
            "example": "2"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-21T08:23:21Z"
          }
        },
        "type": "object"
      },
      "FundraisingTaskCompletions": {
        "title": "Fundraising Task Completions",
        "properties": {
          "created_at": {
            "description": "Timestamp of initial creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-20T08:23:21Z"
          },
          "id": {
            "description": "TaskCompletion ID",
            "type": "integer",
            "example": "1"
          },
          "fundraising_task_flow_id": {
            "description": "Represents id from fundraising_task_flows",
            "type": "integer",
            "example": "2"
          },
          "fundraising_task_id": {
            "description": "Represents id from fundraising_tasks",
            "type": "integer",
            "example": "3"
          },
          "task_completed_at": {
            "description": "Timestamp of task completion",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-20T08:23:21Z"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-21T08:23:21Z"
          },
          "user_id": {
            "description": "Supporter ID",
            "type": "integer",
            "example": "3989311"
          }
        },
        "type": "object"
      },
      "FundraisingTaskFlows": {
        "title": "Fundraising Task Flows",
        "properties": {
          "created_at": {
            "description": "Timestamp of initial creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-20T08:23:21Z"
          },
          "description": {
            "description": "Description of the task",
            "type": "string",
            "example": "Tasks pertaining to customizing the fundraiser page"
          },
          "id": {
            "description": "TaskFlow ID",
            "type": "integer",
            "example": "1"
          },
          "name": {
            "description": "Name of the task",
            "type": "string",
            "example": "CRAFT_YOUR_PAGE"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-21T08:23:21Z"
          }
        },
        "type": "object"
      },
      "FundraisingTasks": {
        "title": "Fundraising Tasks",
        "properties": {
          "created_at": {
            "description": "Timestamp of initial creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-23T08:23:21Z"
          },
          "description": {
            "description": "Description of the task",
            "type": "string",
            "example": "Completed when a fundraiser updates their story."
          },
          "fundraising_task_flow_id": {
            "description": "Represents id from fundraising_task_flows",
            "type": "integer",
            "example": "2"
          },
          "id": {
            "description": "Task ID",
            "type": "integer",
            "example": "1"
          },
          "name": {
            "description": "Name of the task",
            "type": "string",
            "example": "PERSONALIZE_YOUR_STORY"
          },
          "status": {
            "description": "Status of the task",
            "type": "enum",
            "enum": ["active", "inactive"],
            "example": "active"
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-05-23T08:23:21Z"
          }
        },
        "type": "object"
      },
      "TaxEntity": {
        "title": "Tax Entity",
        "description": "A Tax Entity is an abstract representation of an Organization's business credentials in one or more\ncountries for tax identification purposes. Each record contains a currency code that the Organization is able to\nsettle in, as well as additional fields for contact and tax information. This information is commonly displayed on\nDonation receipts for tax compliance purposes.\n\nThis model features heavily in the Classy Passport functionality, as it defines the various business Entities that the\nOrganization may be associated with in multiple countries across multiple currency codes.",
        "properties": {
          "address": {
            "description": "Operating business address for Organization",
            "type": "string",
            "example": "350 Tenth Avenue",
            "nullable": true
          },
          "city": {
            "description": "City where operating business is located",
            "type": "string",
            "example": "San Diego",
            "nullable": true
          },
          "compliance_text": {
            "description": "Compliance instructions for Donors to Business Entity",
            "type": "string",
            "example": "We are a 501(c)3 tax-exempt organization and your donation is tax-deductible within the\nguidelines of U.S. law. To claim a donation as a deduction on your U.S. taxes, please keep your donation receipt as your\nofficial record.",
            "nullable": true
          },
          "country": {
            "description": "ISO-3166 alpha-2 code of country where operating business is located",
            "type": "string",
            "example": "US",
            "nullable": true
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "currency_code": {
            "description": "ISO 4217-compliant alpha currency code",
            "type": "string",
            "example": "USD",
            "nullable": false
          },
          "email_address": {
            "description": "Email address for contacting Business Entity",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 331,
            "nullable": false
          },
          "is_default": {
            "description": "Flag indicating that record contains default information for business in specified country",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "name": {
            "description": "Name of Business Entity",
            "type": "string",
            "example": "My Organization (US)",
            "nullable": true
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "phone_number": {
            "description": "Phone number of Business Entity",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "postal_code": {
            "description": "Postal code of Business Entity location",
            "type": "string",
            "example": "92101",
            "nullable": true
          },
          "province": {
            "description": "ISO-3166 alpha-2 province code of Business Entity location",
            "type": "string",
            "example": "CA",
            "nullable": true
          },
          "tax_identifier": {
            "description": "Government tax identification number (e.g. United States EIN, etc.)",
            "type": "string",
            "example": "01-1899988",
            "nullable": true
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignTemplate": {
        "title": "Campaign Template",
        "properties": {
          "campaign_type": {
            "description": "Campaign Type",
            "type": "string",
            "enum": [
              "ticketed",
              "registration",
              "fund_for_entry",
              "peer_to_peer",
              "donation",
              "reg_w_fund",
              "crowdfunding"
            ],
            "example": "ticketed",
            "nullable": false
          },
          "components": {
            "$ref": "#/components/schemas/Campaign"
          },
          "contact_id": {
            "description": "Member ID of the user to contact with Campaign Template questions",
            "type": "string",
            "example": 2012,
            "nullable": false
          },
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "creator_id": {
            "description": "Member ID of the user that created the Campaign Template",
            "type": "integer",
            "example": 2012,
            "nullable": false
          },
          "deletable": {
            "description": "Campaign Templates can not be deleted if a Campaign was created from the template",
            "type": "boolean",
            "example": false,
            "nullable": false
          },
          "description": {
            "description": "Description of the Campaign Template",
            "type": "string",
            "example": "Use this template for all 2020 campaigns"
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 65273,
            "nullable": false
          },
          "name": {
            "description": "Name of the Campaign Template",
            "type": "string",
            "example": "Run for the Cure Template"
          },
          "organization_id": {
            "description": "The ID of the Organization that created the Campaign Template",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "templated_campaigns": {
            "description": "The number of campaigns created from this Template",
            "type": "integer",
            "example": 3,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          },
          "source_campaign_id": {
            "description": "The ID of the source Campaign associated with the Campaign Template",
            "type": "integer",
            "example": 562342,
            "nullable": false
          }
        },
        "type": "object"
      },
      "CampaignTemplateFillable": {
        "title": "Campaign Template Fillable",
        "properties": {
          "description": {
            "description": "Description of the Campaign Template",
            "type": "string",
            "example": "Use this template for all 2020 campaigns"
          },
          "name": {
            "description": "Name of the Campaign Template",
            "type": "string",
            "example": "Run for the Cure Template"
          },
          "contact_id": {
            "description": "Member ID of the user to contact with Campaign Template questions",
            "type": "string",
            "example": 2012,
            "nullable": false
          }
        },
        "type": "object"
      },
      "ComponentItem": {
        "title": "Component Item",
        "properties": {
          "_id": {
            "description": "Primary identifier of Component Item. Here Component Item will be Message",
            "type": "string",
            "example": "60211671ddbc6168896d9bf7"
          },
          "locked": {
            "description": "Indicates whether the Component Item is locked or not",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "status": {
            "description": "Status of Component Item",
            "type": "string",
            "default": null,
            "enum": ["active", "inactive"],
            "example": "active"
          },
          "created_at": {
            "description": "Date/time of Component Item was created",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of Component Item last updated",
            "type": "string",
            "format": "date-time",
            "example": "2019-04-23T10:25:03Z",
            "nullable": false
          },
          "value": {
            "$ref": "#/components/schemas/Message"
          },
          "item_attributes": {
            "description": "There can be multiple item attributes from the Message as _id, message_type etc.",
            "properties": {
              "_id": {
                "description": "Primary identifier of Message",
                "properties": {
                  "locked": {
                    "description": "Indicates whether Primary identifier is locked or not",
                    "type": "boolean",
                    "default": false,
                    "example": true
                  }
                },
                "type": "object"
              },
              "message_type": {
                "description": "Message type",
                "properties": {
                  "locked": {
                    "description": "Indicates whether Message type is locked or not",
                    "type": "boolean",
                    "default": false,
                    "example": true
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ComponentItemMessageFillable": {
        "title": "Component Item Message Fillable",
        "properties": {
          "message": {
            "description": "There can be multiple item attributes from the Message as _id, message_type etc.",
            "properties": {
              "locked": {
                "description": "Indicates whether the Message is locked to update or not",
                "type": "boolean",
                "default": false,
                "example": false
              },
              "component_items": {
                "description": "Array of Component Items",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComponentItem"
                }
              },
              "status": {
                "description": "Status of Component Item",
                "type": "string",
                "default": null,
                "enum": ["active", "inactive"],
                "example": null
              },
              "value": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ComponentItemMessage": {
        "title": "Component Item Message",
        "properties": {
          "_id": {
            "description": "Primary identifier of Message",
            "type": "string",
            "example": "606f66b41447be6d5b3f318b"
          },
          "locked": {
            "description": "Indicates whether the Message is locked to update or not",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "component_items": {
            "description": "Array of Component Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentItem"
            }
          }
        },
        "type": "object"
      },
      "TransactionContext": {
        "title": "Transaction Context",
        "properties": {
          "application_fee_campaign_category": {
            "description": "Campaign Category the Transaction belongs to",
            "type": "string",
            "enum": [
              "main_donate_button",
              "recurring_migration",
              "high_value",
              "major_giving",
              "virtual"
            ],
            "example": "main_donate_button",
            "nullable": true
          },
          "commerce_order_id": {
            "description": "Commerce Order ID",
            "type": "string",
            "example": "or_01HFSN0GJZ6656RM8602Z37DY1",
            "nullable": true
          },
          "created_by": {
            "description": "Name of associated App",
            "type": "string",
            "example": "My App"
          },
          "commerce_confirmation_id": {
            "description": "Commerce Confirmation ID",
            "type": "string",
            "example": "C9UE75VB2",
            "nullable": true
          },
          "is_passport": {
            "description": "Passport Transaction",
            "type": "boolean",
            "example": true,
            "nullable": false
          },
          "source_campaign_id": {
            "description": "Source Campaign identifier",
            "type": "integer",
            "example": 227362,
            "nullable": false
          },
          "source_campaign_type": {
            "description": "Source Campaign type",
            "type": "string",
            "enum": [
              "crowdfunding",
              "donation",
              "fund_for_entry",
              "peer_to_peer",
              "reg_w_fund",
              "registration",
              "ticketed",
              "dynamic"
            ],
            "example": "peer_to_peer",
            "nullable": false
          }
        },
        "type": "object"
      },
      "TransactionMemberTransfer": {
        "title": "Transaction Member Transfer",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "destination_member_id": {
            "description": "Primary identifier of Member to which the associated Transaction was transferred",
            "type": "integer",
            "example": 6263952,
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 113,
            "nullable": false
          },
          "source_member_id": {
            "description": "Primary identifier of Member from which the associated Transaction was transferred",
            "type": "integer",
            "example": 8476291,
            "nullable": true
          },
          "transaction_id": {
            "description": "Primary identifier of associated Transaction",
            "type": "integer",
            "example": 1427264,
            "nullable": false
          },
          "transferring_member_id": {
            "description": "Primary identifier of Member who initiated the Transfer",
            "type": "integer",
            "example": 847629,
            "nullable": true
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      },
      "WhitelistedCurrency": {
        "title": "Whitelisted Currency",
        "properties": {
          "created_at": {
            "description": "Date/time of initial record creation",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T08:23:21Z",
            "nullable": false
          },
          "currency_code": {
            "description": "ISO 4217-compliant alpha currency code",
            "type": "string",
            "example": "USD",
            "nullable": false
          },
          "id": {
            "description": "Primary identifier of record",
            "type": "integer",
            "example": 427,
            "nullable": false
          },
          "organization_id": {
            "description": "Primary identifier of associated Organization",
            "type": "integer",
            "example": 82364,
            "nullable": false
          },
          "updated_at": {
            "description": "Date/time of last record update",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-23T10:25:03Z",
            "nullable": false
          }
        },
        "type": "object"
      }
    },
    "parameters": {
      "page": {
        "name": "page",
        "in": "query",
        "description": "Indicator of which page of results to return",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 1
        }
      },
      "per_page": {
        "name": "per_page",
        "in": "query",
        "description": "Number of entries to return in each page of results",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 20
        }
      }
    },
    "securitySchemes": {
      "OAuth2Application": {
        "type": "oauth2",
        "description": "OAuth bearer token for client application",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "{host}/oauth2/auth",
            "refreshUrl": "{host}/oauth2/auth",
            "scopes": {}
          }
        }
      },
      "OAuth2Member": {
        "type": "oauth2",
        "description": "OAuth bearer token for client application with additional member context",
        "flows": {
          "password": {
            "tokenUrl": "{host}/oauth2/auth",
            "refreshUrl": "{host}/oauth2/auth",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {
      "OAuth2Application": []
    },
    {
      "OAuth2Member": []
    }
  ],
  "tags": [
    {
      "name": "Acknowledgement",
      "description": "An acknowledgement is a means of indicating that the member who made a transaction has been formally thanked. Every acknowledgement is made by the associated member, optionally on behalf of another fundraising entity.\nAcknowledgements should be created after a donator has been contacted via email, comment, etc."
    },
    {
      "name": "Activity",
      "description": "An activity is a record of an interaction with the Classy platform.\nActivity types include creating a new donation, creating a new fundraising page or team, adding a new team member, and more.\nActivities are not created directly via the API, but are generated as a side-effect of user interaction with other parts of the Classy system."
    },
    {
      "name": "Answer",
      "description": "Answer objects represent an answer to a Question that is associated with an answerable_type (referenced by answerable_id and answerable_type),\nsupported types include: fundraising_page, fundraising_team, transaction or registration.\n\nThese types coincide with the location attribute of the answer’s question (referenced by question_id).\nThe above answerable_type values correspond with the four possible location values which are respectively: page_creation, team_creation, donation_page, campaign_registration.\n\nThis is the reason why (in addition to listing by organization, campaign, or question) answers can be fetched by page, team, transaction, or registration."
    },
    {
      "name": "API App",
      "description": "An App represents a client that can interact with Classy API."
    },
    {
      "name": "Appeal Set",
      "description": "An appeal set is a group of campaign specific appeals for social media. The current appeals that are supported include\nFacebook, Twitter, SMS, and Email. There is one set of appeals per campaign, and a campaign does not necessarily have an\nassociated appeal set."
    },
    {
      "name": "Branding",
      "description": "Organizations can have branding images and styles that will be applied to various areas of the classy platform.\n Examples include changing the classy logo to the organization logo, adding an organization background image to the classy login page, etc."
    },
    {
      "name": "Campaign",
      "description": "The fundraising aspect of Classy takes place within Campaigns and Events. Use the campaign endpoint to retrieve information about a campaign by its unique ID."
    },
    {
      "name": "Campaign Channel",
      "description": "Campaign Channel is an Integration channel association available for specific Campaign. Integration channels will be like Facebook, Double the Donation. Campign Channel have channel specific flags and statuses"
    },
    {
      "name": "Campaign Credential Set",
      "description": "A Credential Set is fundamentally a record that dictates what a user can do or access within a Campaign or Organization context in the API."
    },
    {
      "name": "Channel Fundraising Entity",
      "description": "Channel Fundraising Entity will be used to store additional channel details for the fundraising entity. Where fundraising_entity_id is the ID of the associated fundraising entity and fundraising_entity_type is the type of the associated fundraising entity, like a campaign or fundraising page."
    },
    {
      "name": "Classy Subscription Plan",
      "description": "A ClassySubscriptionPlan is a legacy method of specifying the Classy plan to which an organization is subscribed, which was associated with specific transaction rates and plan features. This has been replaced with plans defined by an integration with an external service."
    },
    {
      "name": "Comment",
      "description": "Comments can also be made in response to Stories, Updates, or FeedItems made on a fundraising entity.\n Please note that these take a slightly different form from comments for activity records."
    },
    {
      "name": "Credit Adjustment",
      "description": "A credit adjustment represents against a debit or credit fundraising entity's fundraising total (aka total_raised).\nThis adjustment represents credit specifically where funds are not captured. A simple example would be a fundraiser receiving credit against his or her goal for volunteer service instead of\nfunds raised."
    },
    {
      "name": "Dedication",
      "description": "When a donation is dedicated to a specific individual, it can trigger a series of actions. An email message, crafted by the donor, is sent to the dedicatee. Use the dedication endpoint to create, retrieve, and update donor dedications."
    },
    {
      "name": "Designation",
      "description": "A Designation refers to a specific cause the organization campaigns under. Multiple campaigns can\nbenefit the designated project. Designations allow me to assign Campaigns that champion the same cause to one Designation. Classy can also retrieve donation metrics for\nDesignations as an aggregation of all Campaigns within a Designation."
    },
    {
      "name": "Domain Slug",
      "description": "A Domain Slug is a value used to shorten a URL by referencing a domain and a fundraising entity."
    },
    {
      "name": "Donation Matching Plan",
      "description": "Donation matching occurs when a Sponsor - company or individual - agrees to match your campaign donations for a\nspecific time period and/or up to a certain limit."
    },
    {
      "name": "Double the Donation",
      "description": ""
    },
    {
      "name": "eCard",
      "description": "Donors can send an eCard dedication along with their donation. Currently, a single campaign can support a maximum of 4\neCards. eCards are 600 pixels wide by 400 pixels tall and uploaded by the organization."
    },
    {
      "name": "Engagement Settings",
      "description": "Organization specific settings related to engagements such as email and SMS settings. We can set SMS numbers or email DNS, throttling etc."
    },
    {
      "name": "FAQ",
      "description": "An FAQ (short for Frequently Asked Question) is a means of answering common questions that donors or registrants may\nhave when donating/registering for a campaign. These question/answer pairs will be publicly displayed on the checkout page for your campaign.\n"
    },
    {
      "name": "Feed Item",
      "description": "A feed item is a representation of a message that populates the feed of a fundraising entity (i.e. the feed item’s\n“feedable”). Each feed item references an “agent” who performed an action, and may also reference a “linkable” object that is relevant\nto the action performed.\n"
    },
    {
      "name": "Fundraising Page",
      "description": "A fundraising page is a means for an individual fundraiser to raise funds for a\nspecific peer-to-peer campaign. Like other fundraising entities, each page allows\nfor the creation of an associated story and updates and displays a feed of\ninteractions that donors have had with the page throughout its lifecycle."
    },
    {
      "name": "Fundraising Page Transfer",
      "description": "Transfer Fundraising Page to another Member, Campaign or Fundraising Team."
    },
    {
      "name": "Fundraising Team",
      "description": "Represents a group of donors consisting of a team lead fundraising together to reach a fundraising goal."
    },
    {
      "name": "Fundraising Team Transfer",
      "description": "Transfer a Fundraising Team within its Campaign/subteam infrastructure. This is done by specifying the team's direct parent, making it either a direct team for its Campaign or a subteam for another team for its Campaign.\n\nThe endpoint requires two parameters within its post body: `new_parent_id` and `new_parent_type`. These parameters are used to specify the new direct parent of the Fundraising Team. At the moment, this can either be the Fundraising Team's Campaign itself (making it a direct team for the Campaign) or another Fundraising Team associated with the Fundraising Team's Campaign (making it a subteam of the specified team).\n\n<b>NOTE</b>: An error will be returned if the new parent for a Fundraising Team is currently a subteam of the Fundraising Team."
    },
    {
      "name": "Fundraising Team Policy",
      "description": "The Fundraising Team Policy represents a settings policy that can be applied to a Fundraising Team (parent, or sub-team). Fundraising Team Policy\nattributes will effect the behavior of the Team and allow or restrict certain actions such as sub-team or Fundraising Page creation. Fundraising Teams and\nFundraising Team Policies share a 1:1 relationship and Fundraising Team Policy attributes are set when creating a Fundraising Team."
    },
    {
      "name": "Hard Credit Transfer",
      "description": "A hard credit transfer is a means of transferring a hard credit (i.e. transaction) between fundraising entities associated with the same organization."
    },
    {
      "name": "Like",
      "description": "A like is a small show of approval for its associated 'likeable' entity. At the moment, the API allows Stories, Updates, FeedItems, and Comments to be 'likeable'."
    },
    {
      "name": "Matched Transaction",
      "description": "A matched transaction can be created when a normal transaction may be matched with a future transaction.  This might\noccur in the case of an employer match, a sponsor pledge, or some other form of matching gift.  The matching\ntransaction, once confirmed, will create an additional hard credit to the same entity that received the original\ntransaction.  This credit is recognized in reporting and on the fundraiser/team/campaign total_raised metric, but\nfunds may not yet be received.  Funds received for a matching transaction can be managed through its Cash Ledger\n(See Cash Ledger)"
    },
    {
      "name": "Member",
      "description": "A Member can be registered by directly having their attributes submitted (first_name, last_name, email_address, ...),\nor from their facebook account. To register a user from their Facebook account, a facebook authorization code must be\nobtained from this user. Member is also an user across the whole application. It have administration access levels for Organizations and Campaigns.\n"
    },
    {
      "name": "Organization",
      "description": "Represents an organization account.\n\nAn organization's `currency_code` is used for Passport functionality.\n`currency_code` dictates the currency code that is used to normalize all of the organization's fundraising entities\n(e.g. campaigns, fundraising teams, and fundraising pages)."
    },
    {
      "name": "Organization Channel",
      "description": "An organization channel is a method of configuring an integration between an organization and a third-party event service (e.g. Facebook)."
    },
    {
      "name": "Organization Credential Set",
      "description": "A Credential Set is fundamentally a record that dictates what a user can do or access within a Campaign or Organization context in the API."
    },
    {
      "name": "Organization Notification",
      "description": ""
    },
    {
      "name": "Payouts",
      "description": "Payouts will provide transactions of PayPal and Stripe."
    },
    {
      "name": "Promo Code",
      "description": "A promo code record represents a shareable string that can be used to apply a discount to the purchase of one or more configured ticket types for a specified campaign. The code can specify either a percentage of the base price or flat amount of one or more tickets. A promo code can be configured to optionally restrict the number of times and/or a time frame during which the promo code can be used. A code can also be given a general designation, meaning it has no direct configurations against one or more ticket types and instead applies to all ticket types for its campaign."
    },
    {
      "name": "Promo Code Configuration",
      "description": "A promo code configuration record indicates that its associated promo code can be applied to purchases of the associated ticket type."
    },
    {
      "name": "Question",
      "description": "Questions are set up by organizations learn more about their supporters and fundraisers. These questions appear as a supporter signs up to fundraise or when making a donation."
    },
    {
      "name": "Recurring Donation Plan",
      "description": "A Recurring Donation Plan is a record of a user's intent to provide recurring donations towards a campaign or fundraising page. The record itself contains the provided billing address and identifying credit card information for the plan."
    },
    {
      "name": "Recurring Donation Plan History",
      "description": "A Recurring Donation Plan History is a history record of Recurring Donation Plan."
    },
    {
      "name": "Registration",
      "description": "Registration records show information pertaining to event attendance, either through a ticket purchase or basic registration."
    },
    {
      "name": "Restricted Country",
      "description": "Restrict countries to have restricted usage of Classy such as for GDPR"
    },
    {
      "name": "Role",
      "description": "Organizations and Campaigns have roles that can be assigned to Members."
    },
    {
      "name": "SoftCredit",
      "description": "Soft credits serve to allocate credit from part or all of the funds raised for a fundraising entity to any of its associated entities. For example, a transaction made against a fundraising team can be allocated to its fundraising pages by creating and associating soft credits in specified amounts that will be considered when calculating each page's progress towards its fundraising goal."
    },
    {
      "name": "Source Tracking Codes",
      "description": "Some Organizations have multiple marketing channels to support their cause. Source Tracking Codes are internal codes Classy uses to identify which marketing channel a Supporter passed through."
    },
    {
      "name": "Staff Notification Setting",
      "description": "Notification settings are for sending email notifications for different scopes as Organization and Campaign. Based on settings, email notification\n will be sent for Transactions, Fundraising Pages or Teams, Chargeback, Recurring Donations and Classy Pay payout report."
    },
    {
      "name": "Story",
      "description": "A type of post meant for display on a fundraising entity's page. This allows an administrator for\nthe fundraising entity to present an appeal for donations or registrations to page visitors in a unique or personalized\nway. There is only one published story per fundraising entity."
    },
    {
      "name": "Supporter",
      "description": "A donor profile that’s owned by the organization. When an organization makes an update to a supporter, it will not affect member profile."
    },
    {
      "name": "Theme",
      "description": "It is a Campaign Theme which is used to set Theme properties like pages (landing, donation, thank you, etc) and styles for the Theme."
    },
    {
      "name": "Ticket Type",
      "description": "A Ticket Type defines the available ticket(s) for a ticketed Campaign. For example, ‘General Admission’ or ‘VIP’\n *\nThis defines what types of tickets are available. It is NOT an instance of a specific ticket or purchase history of a ticket.\n\nE.g. 'General Admission', quantity 1,000.\n\nThis is NOT a specific instance of a ticket or purchase history of a ticket.  It defines what types of tickets are available."
    },
    {
      "name": "Transaction",
      "description": "Transactions have three types of attributes relating to Passport: raw, charged, and normalized.\n\nRaw attributes reflect the donor/purchaser's intent when creating the Transaction. The only attribute directly specified on the Transaction is `raw_currency_code` - the other visible attributes (`raw_total_gross_amount`, `raw_donation_gross_amount`, and  `raw_overhead_net_amount`) are all derived from the raw values set on the transaction's items.\n\nCharged attributes reflect the values that are actually charged when the payment is processed. Since the potential values for a Transaction's `charged_currency_code` should be limited to those available to an Organization for processing, this value can differ from the Transaction's `raw_currency_code`. The amount that is charged is reflected in `charged_total_gross_amount`, while the fees are expressed in `charged_classy_fees_amount` and `charged_pp_fees_amount` (`charged_fees_amount` attribute is the sum of these two attributes). There is additionally a `charged_at` timestamp that is used for normalization.\n\nNormalized attributes reflect a conversion from raw and/or charged attributes into the Transaction's `currency_code`, which is the same for all Passport-enabled entities associated with the Transaction's Organization. This normalization occurs to allow for a constant basis of comparison across each of these entities. These normalized values are all converted from the associated raw or charged attributes, preferring the charged attribute over the raw attribute if available. For example, `charged_total_gross_amount` will be used instead of `raw_total_gross_amount` if both `charged_total_gross_amount` and `charged_currency_code` are present. If `charged_at` is also present, the exchange rate between `charged_currency_code` and `currency_code` at that time will be used if/when the Transaction is renormalized.\n\nIt should be noted that there is no notion of raw fees, as these are calculated at the time that a Transaction is charged and therefore only reflected as charged attributes. If a transaction is flagged as 'fee-on-top', this will be reflected by an increase in the `charged_total_gross_amount` that will not be visible in `raw_total_gross_amount`.\n\nTransactions may be in a number of different states: success, incomplete, canceled, refunded, cb_initiated, cb_lost, test, pending, failed\n\nAn additional transaction attribute relating to Passport is the `tax_entity_id`. Tax entities indicate that an Organization is tax compliant within a certain country. A single organization may have more than one tax entity. The `tax_entity_id` listed on the Transaction indicates which of the Organization's tax entities indicates the tax compliance of the Transaction.\n\nTransactions may have an associated 'context' attribute which provides data about the Transaction's original Campaign (this does not change between hard credit transfers) and whether or not the transaction is considered to incorporate Passport functionality. This attribute can be used for filtering and/or sorting when using index endpoints.\n"
    },
    {
      "name": "Transaction Item",
      "description": "Transaction Items describe the specific donations, tickets, registrations (and more) that could make up a Transaction.\n Some transactions will only have a single Transaction Item, but others may have many.\n\nLike transactions, transaction items have three types of attributes relating to Passport: raw, charged, and normalized.\n\nRaw attributes (e.g. `raw_currency_code`, `raw_final_price`, etc.) reflect donor intent through their donation or product purchases. `raw_final_price` represents the total raw value of a transaction item - it is either set directly (as with a direct donation) or derived from the product of `raw_price` (the price of the transaction item's associated product) and the specified quantity. Transaction items associated with a product may also have `raw_overhead_amount` set, which indicates the amount of the `raw_final_price` that is attributed to campaign overhead. All raw amounts are presented in terms of `raw_currency_code`, which is inherited from the transaction item's transaction and cannot be set on a per-item basis.\n\nCharged (e.g. `charged_final_price`, `charged_fees_amount`, etc.) attributes are all derived from the transaction item's associated transaction and reflect the percentage that the transaction item contributed to the transaction's raw gross amount. For example, a transaction item that contributed 85% of its transaction's `raw_total_gross_amount` through its `raw_final_price` will see its charged attributes reflect 85% of the transaction's charged attribute values. All of these values will be reflected in terms of the `charged_currency_code` of the transaction item's transaction.\n\nNormalized attributes (e.g. `final_price`, `fees_amount`, etc.) reflect a conversion from raw and/or charged attributes into the transaction item's `currency_code`, which is the same for all Passport-enabled entities associated with the transaction item's organization. This normalization occurs to allow for a constant basis of comparison across each of these entities. These normalized values are all converted from the associated raw or charged attributes, preferring the charged attribute over the raw attribute if available. For example, `charged_final_price` will be used instead of `raw_final_price` if both `charged_final_price` and `charged_currency_code` are present. If `charged_at` is also present, the exchange rate between `charged_currency_code` and `currency_code` at that time will be used if/when the transaction item is renormalized.\n"
    },
    {
      "name": "Transaction Receipt",
      "description": "Transaction receipts record any instance when a specific transaction is produced for a donation."
    },
    {
      "name": "Update",
      "description": "A type of post meant for display on a fundraising entity's page. This allows and administrator for\nthe fundraising entity to provide donors or registrants with information about the progress of the campaign and maintain\na consistent level of engagement during the fundraising entity's lifetime. There can be multiple published updates per\nfundraising entity."
    },
    {
      "name": "Whitelisted Currency",
      "description": "A record indicating one of the possible currencies that an organization is allowing for fundraising\nand transactions. If no such records exist for an organization, it is assumed that the organization allows all\ncurrencies supported by Classy Passport functionality."
    }
  ]
}
